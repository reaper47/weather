
project-thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08006db8  08006db8  00016db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b0  080073b0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080073b0  080073b0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073b0  080073b0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080073b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  200001dc  08007594  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08007594  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016475  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b1b  00000000  00000000  00036681  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  000391a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf8  00000000  00000000  00039ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f2b0  00000000  00000000  0003aab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d046  00000000  00000000  00059d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ac5e6  00000000  00000000  00066dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113394  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004018  00000000  00000000  00113410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006da0 	.word	0x08006da0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006da0 	.word	0x08006da0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_Init+0x28>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_Init+0x28>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f949 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f003 fe10 	bl	8004898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f961 	bl	8000f6a <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc0:	f000 f929 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004
 8000ce0:	20000000 	.word	0x20000000

08000ce4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000004 	.word	0x20000004
 8000d08:	20000400 	.word	0x20000400

08000d0c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000400 	.word	0x20000400

08000d24 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff ffee 	bl	8000d0c <HAL_GetTick>
 8000d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d3c:	d005      	beq.n	8000d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_Delay+0x40>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d4a:	bf00      	nop
 8000d4c:	f7ff ffde 	bl	8000d0c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <HAL_Delay+0x28>
  {
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000004 	.word	0x20000004

08000d68 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <NVIC_SetPriorityGrouping+0x44>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9a:	4a04      	ldr	r2, [pc, #16]	; (8000dac <NVIC_SetPriorityGrouping+0x44>)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	60d3      	str	r3, [r2, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <NVIC_GetPriorityGrouping+0x18>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	f003 0307 	and.w	r3, r3, #7
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <NVIC_EnableIRQ+0x30>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	da0b      	bge.n	8000e2c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <NVIC_SetPriority+0x4c>)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 030f 	and.w	r3, r3, #15
 8000e20:	3b04      	subs	r3, #4
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2a:	e009      	b.n	8000e40 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4907      	ldr	r1, [pc, #28]	; (8000e50 <NVIC_SetPriority+0x50>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee0:	f7ff ff8e 	bl	8000e00 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff2d 	bl	8000d68 <NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff42 	bl	8000db0 <NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff35 	bl	8000dcc <NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffa2 	bl	8000ebc <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d005      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e027      	b.n	8000ff4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 020e 	bic.w	r2, r2, #14
 8000fb2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0201 	bic.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	4798      	blx	r3
    } 
  }
  return status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001016:	e160      	b.n	80012da <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8152 	beq.w	80012d4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x40>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b12      	cmp	r3, #18
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	6939      	ldr	r1, [r7, #16]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d00b      	beq.n	80010dc <HAL_GPIO_Init+0xdc>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d007      	beq.n	80010dc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d0:	2b11      	cmp	r3, #17
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b12      	cmp	r3, #18
 80010da:	d130      	bne.n	800113e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001112:	2201      	movs	r2, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	f003 0201 	and.w	r2, r3, #1
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80ac 	beq.w	80012d4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <HAL_GPIO_Init+0x2f8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a5d      	ldr	r2, [pc, #372]	; (80012f8 <HAL_GPIO_Init+0x2f8>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <HAL_GPIO_Init+0x2f8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001194:	4a59      	ldr	r2, [pc, #356]	; (80012fc <HAL_GPIO_Init+0x2fc>)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011be:	d025      	beq.n	800120c <HAL_GPIO_Init+0x20c>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4f      	ldr	r2, [pc, #316]	; (8001300 <HAL_GPIO_Init+0x300>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d01f      	beq.n	8001208 <HAL_GPIO_Init+0x208>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a4e      	ldr	r2, [pc, #312]	; (8001304 <HAL_GPIO_Init+0x304>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d019      	beq.n	8001204 <HAL_GPIO_Init+0x204>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_GPIO_Init+0x308>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d013      	beq.n	8001200 <HAL_GPIO_Init+0x200>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a4c      	ldr	r2, [pc, #304]	; (800130c <HAL_GPIO_Init+0x30c>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d00d      	beq.n	80011fc <HAL_GPIO_Init+0x1fc>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a4b      	ldr	r2, [pc, #300]	; (8001310 <HAL_GPIO_Init+0x310>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d007      	beq.n	80011f8 <HAL_GPIO_Init+0x1f8>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <HAL_GPIO_Init+0x314>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d101      	bne.n	80011f4 <HAL_GPIO_Init+0x1f4>
 80011f0:	2306      	movs	r3, #6
 80011f2:	e00c      	b.n	800120e <HAL_GPIO_Init+0x20e>
 80011f4:	2307      	movs	r3, #7
 80011f6:	e00a      	b.n	800120e <HAL_GPIO_Init+0x20e>
 80011f8:	2305      	movs	r3, #5
 80011fa:	e008      	b.n	800120e <HAL_GPIO_Init+0x20e>
 80011fc:	2304      	movs	r3, #4
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x20e>
 8001200:	2303      	movs	r3, #3
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x20e>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x20e>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x20e>
 800120c:	2300      	movs	r3, #0
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800121e:	4937      	ldr	r1, [pc, #220]	; (80012fc <HAL_GPIO_Init+0x2fc>)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <HAL_GPIO_Init+0x318>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001250:	4a31      	ldr	r2, [pc, #196]	; (8001318 <HAL_GPIO_Init+0x318>)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_GPIO_Init+0x318>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800127a:	4a27      	ldr	r2, [pc, #156]	; (8001318 <HAL_GPIO_Init+0x318>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <HAL_GPIO_Init+0x318>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012a4:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <HAL_GPIO_Init+0x318>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_GPIO_Init+0x318>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_GPIO_Init+0x318>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f ae97 	bne.w	8001018 <HAL_GPIO_Init+0x18>
  }
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	48001400 	.word	0x48001400
 8001314:	48001800 	.word	0x48001800
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e001      	b.n	800133e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001368:	e002      	b.n	8001370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001382:	af00      	add	r7, sp, #0
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	f000 beda 	b.w	800214a <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 8164 	beq.w	800166e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013a6:	4bb0      	ldr	r3, [pc, #704]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d00c      	beq.n	80013cc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b2:	4bad      	ldr	r3, [pc, #692]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d15a      	bne.n	8001474 <HAL_RCC_OscConfig+0xf8>
 80013be:	4baa      	ldr	r3, [pc, #680]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d153      	bne.n	8001474 <HAL_RCC_OscConfig+0xf8>
 80013cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80013e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d102      	bne.n	80013fe <HAL_RCC_OscConfig+0x82>
 80013f8:	4b9b      	ldr	r3, [pc, #620]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0xae>
 80013fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001402:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001416:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800141a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001426:	4b90      	ldr	r3, [pc, #576]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800142e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001432:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001436:	fa92 f2a2 	rbit	r2, r2
 800143a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800143e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001442:	fab2 f282 	clz	r2, r2
 8001446:	b252      	sxtb	r2, r2
 8001448:	f042 0220 	orr.w	r2, r2, #32
 800144c:	b252      	sxtb	r2, r2
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	f002 021f 	and.w	r2, r2, #31
 8001454:	2101      	movs	r1, #1
 8001456:	fa01 f202 	lsl.w	r2, r1, r2
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 8105 	beq.w	800166c <HAL_RCC_OscConfig+0x2f0>
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 80ff 	bne.w	800166c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	f000 be6b 	b.w	800214a <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x112>
 8001480:	4b79      	ldr	r3, [pc, #484]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a78      	ldr	r2, [pc, #480]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 8001486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e030      	b.n	80014f0 <HAL_RCC_OscConfig+0x174>
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10c      	bne.n	80014b2 <HAL_RCC_OscConfig+0x136>
 8001498:	4b73      	ldr	r3, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a72      	ldr	r2, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 800149e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a6f      	ldr	r2, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80014aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e01e      	b.n	80014f0 <HAL_RCC_OscConfig+0x174>
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x15c>
 80014be:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a69      	ldr	r2, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0x174>
 80014d8:	4b63      	ldr	r3, [pc, #396]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a62      	ldr	r2, [pc, #392]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b60      	ldr	r3, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a5f      	ldr	r2, [pc, #380]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d05a      	beq.n	80015b0 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fc07 	bl	8000d0c <HAL_GetTick>
 80014fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	e00a      	b.n	800151a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fc02 	bl	8000d0c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b64      	cmp	r3, #100	; 0x64
 8001512:	d902      	bls.n	800151a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	f000 be18 	b.w	800214a <HAL_RCC_OscConfig+0xdce>
 800151a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800152e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	fab3 f383 	clz	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	095b      	lsrs	r3, r3, #5
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <HAL_RCC_OscConfig+0x1d0>
 8001546:	4b48      	ldr	r3, [pc, #288]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	e015      	b.n	8001578 <HAL_RCC_OscConfig+0x1fc>
 800154c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001550:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001564:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001568:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001574:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800157c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001580:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001584:	fa92 f2a2 	rbit	r2, r2
 8001588:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 800158c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001590:	fab2 f282 	clz	r2, r2
 8001594:	b252      	sxtb	r2, r2
 8001596:	f042 0220 	orr.w	r2, r2, #32
 800159a:	b252      	sxtb	r2, r2
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	f002 021f 	and.w	r2, r2, #31
 80015a2:	2101      	movs	r1, #1
 80015a4:	fa01 f202 	lsl.w	r2, r1, r2
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0aa      	beq.n	8001504 <HAL_RCC_OscConfig+0x188>
 80015ae:	e05e      	b.n	800166e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fbac 	bl	8000d0c <HAL_GetTick>
 80015b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ba:	f7ff fba7 	bl	8000d0c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d902      	bls.n	80015d0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f000 bdbd 	b.w	800214a <HAL_RCC_OscConfig+0xdce>
 80015d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015dc:	fa93 f3a3 	rbit	r3, r3
 80015e0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80015e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d102      	bne.n	8001602 <HAL_RCC_OscConfig+0x286>
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	e015      	b.n	800162e <HAL_RCC_OscConfig+0x2b2>
 8001602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001606:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800161e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_RCC_OscConfig+0x2ec>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001632:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001636:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800163a:	fa92 f2a2 	rbit	r2, r2
 800163e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001642:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001646:	fab2 f282 	clz	r2, r2
 800164a:	b252      	sxtb	r2, r2
 800164c:	f042 0220 	orr.w	r2, r2, #32
 8001650:	b252      	sxtb	r2, r2
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	f002 021f 	and.w	r2, r2, #31
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1aa      	bne.n	80015ba <HAL_RCC_OscConfig+0x23e>
 8001664:	e003      	b.n	800166e <HAL_RCC_OscConfig+0x2f2>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 8171 	beq.w	8001960 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800167e:	4bd0      	ldr	r3, [pc, #832]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800168a:	4bcd      	ldr	r3, [pc, #820]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	d16e      	bne.n	8001774 <HAL_RCC_OscConfig+0x3f8>
 8001696:	4bca      	ldr	r3, [pc, #808]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800169e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016a2:	d167      	bne.n	8001774 <HAL_RCC_OscConfig+0x3f8>
 80016a4:	2302      	movs	r3, #2
 80016a6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 80016b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	095b      	lsrs	r3, r3, #5
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d102      	bne.n	80016d4 <HAL_RCC_OscConfig+0x358>
 80016ce:	4bbc      	ldr	r3, [pc, #752]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	e013      	b.n	80016fc <HAL_RCC_OscConfig+0x380>
 80016d4:	2302      	movs	r3, #2
 80016d6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016f8:	4bb1      	ldr	r3, [pc, #708]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	2202      	movs	r2, #2
 80016fe:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001702:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001706:	fa92 f2a2 	rbit	r2, r2
 800170a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 800170e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001712:	fab2 f282 	clz	r2, r2
 8001716:	b252      	sxtb	r2, r2
 8001718:	f042 0220 	orr.w	r2, r2, #32
 800171c:	b252      	sxtb	r2, r2
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	f002 021f 	and.w	r2, r2, #31
 8001724:	2101      	movs	r1, #1
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_RCC_OscConfig+0x3c4>
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d002      	beq.n	8001740 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	f000 bd05 	b.w	800214a <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b9f      	ldr	r3, [pc, #636]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6919      	ldr	r1, [r3, #16]
 800174e:	23f8      	movs	r3, #248	; 0xf8
 8001750:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001760:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	4994      	ldr	r1, [pc, #592]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	e0f5      	b.n	8001960 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8085 	beq.w	800188a <HAL_RCC_OscConfig+0x50e>
 8001780:	2301      	movs	r3, #1
 8001782:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001792:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800179e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	2301      	movs	r3, #1
 80017a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff faaf 	bl	8000d0c <HAL_GetTick>
 80017ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff faaa 	bl	8000d0c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d902      	bls.n	80017ca <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	f000 bcc0 	b.w	800214a <HAL_RCC_OscConfig+0xdce>
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80017dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d102      	bne.n	80017fa <HAL_RCC_OscConfig+0x47e>
 80017f4:	4b72      	ldr	r3, [pc, #456]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	e013      	b.n	8001822 <HAL_RCC_OscConfig+0x4a6>
 80017fa:	2302      	movs	r3, #2
 80017fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800180c:	2302      	movs	r3, #2
 800180e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001812:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800181e:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2202      	movs	r2, #2
 8001824:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001828:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800182c:	fa92 f2a2 	rbit	r2, r2
 8001830:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001834:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001838:	fab2 f282 	clz	r2, r2
 800183c:	b252      	sxtb	r2, r2
 800183e:	f042 0220 	orr.w	r2, r2, #32
 8001842:	b252      	sxtb	r2, r2
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f002 021f 	and.w	r2, r2, #31
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0ae      	beq.n	80017b4 <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	4b5a      	ldr	r3, [pc, #360]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6919      	ldr	r1, [r3, #16]
 8001864:	23f8      	movs	r3, #248	; 0xf8
 8001866:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001876:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	494f      	ldr	r1, [pc, #316]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e06a      	b.n	8001960 <HAL_RCC_OscConfig+0x5e4>
 800188a:	2301      	movs	r3, #1
 800188c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800189c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	461a      	mov	r2, r3
 80018b0:	2300      	movs	r3, #0
 80018b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fa2a 	bl	8000d0c <HAL_GetTick>
 80018b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff fa25 	bl	8000d0c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d902      	bls.n	80018d4 <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	f000 bc3b 	b.w	800214a <HAL_RCC_OscConfig+0xdce>
 80018d4:	2302      	movs	r3, #2
 80018d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80018e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	095b      	lsrs	r3, r3, #5
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d102      	bne.n	8001904 <HAL_RCC_OscConfig+0x588>
 80018fe:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	e013      	b.n	800192c <HAL_RCC_OscConfig+0x5b0>
 8001904:	2302      	movs	r3, #2
 8001906:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001916:	2302      	movs	r3, #2
 8001918:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800191c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <HAL_RCC_OscConfig+0x644>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	2202      	movs	r2, #2
 800192e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001932:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001936:	fa92 f2a2 	rbit	r2, r2
 800193a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 800193e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001942:	fab2 f282 	clz	r2, r2
 8001946:	b252      	sxtb	r2, r2
 8001948:	f042 0220 	orr.w	r2, r2, #32
 800194c:	b252      	sxtb	r2, r2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f002 021f 	and.w	r2, r2, #31
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ae      	bne.n	80018be <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80d7 	beq.w	8001b1e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d066      	beq.n	8001a48 <HAL_RCC_OscConfig+0x6cc>
 800197a:	2301      	movs	r3, #1
 800197c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800198c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_RCC_OscConfig+0x648>)
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	461a      	mov	r2, r3
 800199e:	2301      	movs	r3, #1
 80019a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7ff f9b3 	bl	8000d0c <HAL_GetTick>
 80019a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	e00d      	b.n	80019c8 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff f9ae 	bl	8000d0c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d905      	bls.n	80019c8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e3c4      	b.n	800214a <HAL_RCC_OscConfig+0xdce>
 80019c0:	40021000 	.word	0x40021000
 80019c4:	10908120 	.word	0x10908120
 80019c8:	2302      	movs	r3, #2
 80019ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80019da:	2302      	movs	r3, #2
 80019dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019f2:	2202      	movs	r2, #2
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a06:	4ba5      	ldr	r3, [pc, #660]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a0a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a0e:	2102      	movs	r1, #2
 8001a10:	6019      	str	r1, [r3, #0]
 8001a12:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fa93 f1a3 	rbit	r1, r3
 8001a1c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a20:	6019      	str	r1, [r3, #0]
  return(result);
 8001a22:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a32:	b25b      	sxtb	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0b2      	beq.n	80019ac <HAL_RCC_OscConfig+0x630>
 8001a46:	e06a      	b.n	8001b1e <HAL_RCC_OscConfig+0x7a2>
 8001a48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	fa93 f2a3 	rbit	r2, r3
 8001a5a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a5e:	601a      	str	r2, [r3, #0]
  return(result);
 8001a60:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b8c      	ldr	r3, [pc, #560]	; (8001ca0 <HAL_RCC_OscConfig+0x924>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	461a      	mov	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff f948 	bl	8000d0c <HAL_GetTick>
 8001a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	e009      	b.n	8001a96 <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff f943 	bl	8000d0c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e359      	b.n	800214a <HAL_RCC_OscConfig+0xdce>
 8001a96:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001aca:	2202      	movs	r2, #2
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001adc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ade:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	6019      	str	r1, [r3, #0]
 8001aea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f1a3 	rbit	r1, r3
 8001af4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001af8:	6019      	str	r1, [r3, #0]
  return(result);
 8001afa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1b1      	bne.n	8001a82 <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8159 	beq.w	8001de0 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d112      	bne.n	8001b66 <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	61d3      	str	r3, [r2, #28]
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b60:	2301      	movs	r3, #1
 8001b62:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b66:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <HAL_RCC_OscConfig+0x928>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d11a      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b72:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <HAL_RCC_OscConfig+0x928>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a4b      	ldr	r2, [pc, #300]	; (8001ca4 <HAL_RCC_OscConfig+0x928>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff f8c5 	bl	8000d0c <HAL_GetTick>
 8001b82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b86:	e009      	b.n	8001b9c <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b88:	f7ff f8c0 	bl	8000d0c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b64      	cmp	r3, #100	; 0x64
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e2d6      	b.n	800214a <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HAL_RCC_OscConfig+0x928>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ef      	beq.n	8001b88 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x844>
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	e02f      	b.n	8001c20 <HAL_RCC_OscConfig+0x8a4>
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x868>
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a33      	ldr	r2, [pc, #204]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	6213      	str	r3, [r2, #32]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0x8a4>
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x88c>
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6213      	str	r3, [r2, #32]
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a27      	ldr	r2, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0x8a4>
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001c1a:	f023 0304 	bic.w	r3, r3, #4
 8001c1e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d06b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f86f 	bl	8000d0c <HAL_GetTick>
 8001c2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff f86a 	bl	8000d0c <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e27e      	b.n	800214a <HAL_RCC_OscConfig+0xdce>
 8001c4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c50:	2202      	movs	r2, #2
 8001c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	fa93 f2a3 	rbit	r2, r3
 8001c5e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c68:	2202      	movs	r2, #2
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c7a:	601a      	str	r2, [r3, #0]
  return(result);
 8001c7c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c80:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d108      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x92c>
 8001c96:	4b01      	ldr	r3, [pc, #4]	; (8001c9c <HAL_RCC_OscConfig+0x920>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	e013      	b.n	8001cc4 <HAL_RCC_OscConfig+0x948>
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	10908120 	.word	0x10908120
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	4bc0      	ldr	r3, [pc, #768]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001cc8:	2102      	movs	r1, #2
 8001cca:	6011      	str	r1, [r2, #0]
 8001ccc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	fa92 f1a2 	rbit	r1, r2
 8001cd6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cda:	6011      	str	r1, [r2, #0]
  return(result);
 8001cdc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	fab2 f282 	clz	r2, r2
 8001ce6:	b252      	sxtb	r2, r2
 8001ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cec:	b252      	sxtb	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f002 021f 	and.w	r2, r2, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d099      	beq.n	8001c34 <HAL_RCC_OscConfig+0x8b8>
 8001d00:	e064      	b.n	8001dcc <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff f803 	bl	8000d0c <HAL_GetTick>
 8001d06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7fe fffe 	bl	8000d0c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e212      	b.n	800214a <HAL_RCC_OscConfig+0xdce>
 8001d24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d28:	2202      	movs	r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	fa93 f2a3 	rbit	r2, r3
 8001d36:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d40:	2202      	movs	r2, #2
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d52:	601a      	str	r2, [r3, #0]
  return(result);
 8001d54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d102      	bne.n	8001d74 <HAL_RCC_OscConfig+0x9f8>
 8001d6e:	4b95      	ldr	r3, [pc, #596]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	e00d      	b.n	8001d90 <HAL_RCC_OscConfig+0xa14>
 8001d74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d78:	2202      	movs	r2, #2
 8001d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	fa93 f2a3 	rbit	r2, r3
 8001d86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	4b8d      	ldr	r3, [pc, #564]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d94:	2102      	movs	r1, #2
 8001d96:	6011      	str	r1, [r2, #0]
 8001d98:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	fa92 f1a2 	rbit	r1, r2
 8001da2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001da6:	6011      	str	r1, [r2, #0]
  return(result);
 8001da8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	fab2 f282 	clz	r2, r2
 8001db2:	b252      	sxtb	r2, r2
 8001db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001db8:	b252      	sxtb	r2, r2
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	f002 021f 	and.w	r2, r2, #31
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d19f      	bne.n	8001d0c <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dcc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd4:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	4a7a      	ldr	r2, [pc, #488]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dde:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 81ae 	beq.w	8002148 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dec:	4b75      	ldr	r3, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	f000 81a5 	beq.w	8002144 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	f040 811d 	bne.w	8002040 <HAL_RCC_OscConfig+0xcc4>
 8001e06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e1e:	601a      	str	r2, [r3, #0]
  return(result);
 8001e20:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	461a      	mov	r2, r3
 8001e36:	2300      	movs	r3, #0
 8001e38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe ff67 	bl	8000d0c <HAL_GetTick>
 8001e3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	e009      	b.n	8001e58 <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe ff62 	bl	8000d0c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e178      	b.n	800214a <HAL_RCC_OscConfig+0xdce>
 8001e58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	fa93 f2a3 	rbit	r2, r3
 8001e6c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e70:	601a      	str	r2, [r3, #0]
  return(result);
 8001e72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_OscConfig+0xb16>
 8001e8c:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	e01b      	b.n	8001eca <HAL_RCC_OscConfig+0xb4e>
 8001e92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ece:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ed2:	6011      	str	r1, [r2, #0]
 8001ed4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	fa92 f1a2 	rbit	r1, r2
 8001ede:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ee2:	6011      	str	r1, [r2, #0]
  return(result);
 8001ee4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	fab2 f282 	clz	r2, r2
 8001eee:	b252      	sxtb	r2, r2
 8001ef0:	f042 0220 	orr.w	r2, r2, #32
 8001ef4:	b252      	sxtb	r2, r2
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	f002 021f 	and.w	r2, r2, #31
 8001efc:	2101      	movs	r1, #1
 8001efe:	fa01 f202 	lsl.w	r2, r1, r2
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d19d      	bne.n	8001e44 <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f08:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	f023 020f 	bic.w	r2, r3, #15
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	492b      	ldr	r1, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a19      	ldr	r1, [r3, #32]
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	4924      	ldr	r1, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
 8001f38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	fa93 f2a3 	rbit	r2, r3
 8001f4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f50:	601a      	str	r2, [r3, #0]
  return(result);
 8001f52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f56:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	461a      	mov	r2, r3
 8001f68:	2301      	movs	r3, #1
 8001f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7fe fece 	bl	8000d0c <HAL_GetTick>
 8001f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f74:	e009      	b.n	8001f8a <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f76:	f7fe fec9 	bl	8000d0c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0df      	b.n	800214a <HAL_RCC_OscConfig+0xdce>
 8001f8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	fa93 f2a3 	rbit	r2, r3
 8001f9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fa2:	601a      	str	r2, [r3, #0]
  return(result);
 8001fa4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fa8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d104      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xc4c>
 8001fbe:	4b01      	ldr	r3, [pc, #4]	; (8001fc4 <HAL_RCC_OscConfig+0xc48>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e01d      	b.n	8002000 <HAL_RCC_OscConfig+0xc84>
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f2a3 	rbit	r2, r3
 8001fdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	fa93 f2a3 	rbit	r2, r3
 8001ff6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	4b55      	ldr	r3, [pc, #340]	; (8002154 <HAL_RCC_OscConfig+0xdd8>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002004:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002008:	6011      	str	r1, [r2, #0]
 800200a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	fa92 f1a2 	rbit	r1, r2
 8002014:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002018:	6011      	str	r1, [r2, #0]
  return(result);
 800201a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b252      	sxtb	r2, r2
 8002026:	f042 0220 	orr.w	r2, r2, #32
 800202a:	b252      	sxtb	r2, r2
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f002 021f 	and.w	r2, r2, #31
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d09b      	beq.n	8001f76 <HAL_RCC_OscConfig+0xbfa>
 800203e:	e083      	b.n	8002148 <HAL_RCC_OscConfig+0xdcc>
 8002040:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002058:	601a      	str	r2, [r3, #0]
  return(result);
 800205a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800205e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002068:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	461a      	mov	r2, r3
 8002070:	2300      	movs	r3, #0
 8002072:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe fe4a 	bl	8000d0c <HAL_GetTick>
 8002078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	e009      	b.n	8002092 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207e:	f7fe fe45 	bl	8000d0c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e05b      	b.n	800214a <HAL_RCC_OscConfig+0xdce>
 8002092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800209a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020aa:	601a      	str	r2, [r3, #0]
  return(result);
 80020ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	095b      	lsrs	r3, r3, #5
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d102      	bne.n	80020cc <HAL_RCC_OscConfig+0xd50>
 80020c6:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_RCC_OscConfig+0xdd8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	e01b      	b.n	8002104 <HAL_RCC_OscConfig+0xd88>
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	fa93 f2a3 	rbit	r2, r3
 80020e0:	f107 0320 	add.w	r3, r7, #32
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	f107 031c 	add.w	r3, r7, #28
 80020ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	fa93 f2a3 	rbit	r2, r3
 80020fa:	f107 0318 	add.w	r3, r7, #24
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_RCC_OscConfig+0xdd8>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f107 0214 	add.w	r2, r7, #20
 8002108:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800210c:	6011      	str	r1, [r2, #0]
 800210e:	f107 0214 	add.w	r2, r7, #20
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	fa92 f1a2 	rbit	r1, r2
 8002118:	f107 0210 	add.w	r2, r7, #16
 800211c:	6011      	str	r1, [r2, #0]
  return(result);
 800211e:	f107 0210 	add.w	r2, r7, #16
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	fab2 f282 	clz	r2, r2
 8002128:	b252      	sxtb	r2, r2
 800212a:	f042 0220 	orr.w	r2, r2, #32
 800212e:	b252      	sxtb	r2, r2
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f002 021f 	and.w	r2, r2, #31
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d19d      	bne.n	800207e <HAL_RCC_OscConfig+0xd02>
 8002142:	e001      	b.n	8002148 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000

08002158 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b09e      	sub	sp, #120	; 0x78
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e164      	b.n	800243a <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b92      	ldr	r3, [pc, #584]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d910      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b8f      	ldr	r3, [pc, #572]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 0207 	bic.w	r2, r3, #7
 8002186:	498d      	ldr	r1, [pc, #564]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b8b      	ldr	r3, [pc, #556]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e14c      	b.n	800243a <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b84      	ldr	r3, [pc, #528]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4981      	ldr	r1, [pc, #516]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80df 	beq.w	800238a <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d13d      	bne.n	8002250 <HAL_RCC_ClockConfig+0xf8>
 80021d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80021e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d102      	bne.n	80021fe <HAL_RCC_ClockConfig+0xa6>
 80021f8:	4b71      	ldr	r3, [pc, #452]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	e00f      	b.n	800221e <HAL_RCC_ClockConfig+0xc6>
 80021fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002202:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	667b      	str	r3, [r7, #100]	; 0x64
 800220c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002210:	663b      	str	r3, [r7, #96]	; 0x60
 8002212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800221a:	4b69      	ldr	r3, [pc, #420]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002222:	65ba      	str	r2, [r7, #88]	; 0x58
 8002224:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002226:	fa92 f2a2 	rbit	r2, r2
 800222a:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 800222c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800222e:	fab2 f282 	clz	r2, r2
 8002232:	b252      	sxtb	r2, r2
 8002234:	f042 0220 	orr.w	r2, r2, #32
 8002238:	b252      	sxtb	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f002 021f 	and.w	r2, r2, #31
 8002240:	2101      	movs	r1, #1
 8002242:	fa01 f202 	lsl.w	r2, r1, r2
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d17d      	bne.n	8002348 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0f4      	b.n	800243a <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d13d      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x17c>
 8002258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d102      	bne.n	8002282 <HAL_RCC_ClockConfig+0x12a>
 800227c:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	e00f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x14a>
 8002282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002286:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	647b      	str	r3, [r7, #68]	; 0x44
 8002290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002294:	643b      	str	r3, [r7, #64]	; 0x40
 8002296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229e:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80022a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022aa:	fa92 f2a2 	rbit	r2, r2
 80022ae:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80022b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022b2:	fab2 f282 	clz	r2, r2
 80022b6:	b252      	sxtb	r2, r2
 80022b8:	f042 0220 	orr.w	r2, r2, #32
 80022bc:	b252      	sxtb	r2, r2
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f002 021f 	and.w	r2, r2, #31
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d13b      	bne.n	8002348 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b2      	b.n	800243a <HAL_RCC_ClockConfig+0x2e2>
 80022d4:	2302      	movs	r3, #2
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d102      	bne.n	80022fc <HAL_RCC_ClockConfig+0x1a4>
 80022f6:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	e00d      	b.n	8002318 <HAL_RCC_ClockConfig+0x1c0>
 80022fc:	2302      	movs	r3, #2
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
 8002308:	2302      	movs	r3, #2
 800230a:	623b      	str	r3, [r7, #32]
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2202      	movs	r2, #2
 800231a:	61ba      	str	r2, [r7, #24]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	fa92 f2a2 	rbit	r2, r2
 8002322:	617a      	str	r2, [r7, #20]
  return(result);
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	fab2 f282 	clz	r2, r2
 800232a:	b252      	sxtb	r2, r2
 800232c:	f042 0220 	orr.w	r2, r2, #32
 8002330:	b252      	sxtb	r2, r2
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	f002 021f 	and.w	r2, r2, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f202 	lsl.w	r2, r1, r2
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e078      	b.n	800243a <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 0203 	bic.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	491a      	ldr	r1, [pc, #104]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800235a:	f7fe fcd7 	bl	8000d0c <HAL_GetTick>
 800235e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002360:	e00a      	b.n	8002378 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002362:	f7fe fcd3 	bl	8000d0c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e060      	b.n	800243a <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 020c 	and.w	r2, r3, #12
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	429a      	cmp	r2, r3
 8002388:	d1eb      	bne.n	8002362 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d215      	bcs.n	80023c4 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 0207 	bic.w	r2, r3, #7
 80023a0:	4906      	ldr	r1, [pc, #24]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d006      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e03f      	b.n	800243a <HAL_RCC_ClockConfig+0x2e2>
 80023ba:	bf00      	nop
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_RCC_ClockConfig+0x2ec>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4919      	ldr	r1, [pc, #100]	; (8002444 <HAL_RCC_ClockConfig+0x2ec>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_RCC_ClockConfig+0x2ec>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4911      	ldr	r1, [pc, #68]	; (8002444 <HAL_RCC_ClockConfig+0x2ec>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002402:	f000 f825 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 8002406:	4601      	mov	r1, r0
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_RCC_ClockConfig+0x2ec>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002410:	23f0      	movs	r3, #240	; 0xf0
 8002412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	60fb      	str	r3, [r7, #12]
  return(result);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	fa22 f303 	lsr.w	r3, r2, r3
 8002426:	4a08      	ldr	r2, [pc, #32]	; (8002448 <HAL_RCC_ClockConfig+0x2f0>)
 8002428:	5cd3      	ldrb	r3, [r2, r3]
 800242a:	fa21 f303 	lsr.w	r3, r1, r3
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_RCC_ClockConfig+0x2f4>)
 8002430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002432:	2000      	movs	r0, #0
 8002434:	f7fe fc26 	bl	8000c84 <HAL_InitTick>
  
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3778      	adds	r7, #120	; 0x78
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	0800713c 	.word	0x0800713c
 800244c:	20000008 	.word	0x20000008

08002450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b08b      	sub	sp, #44	; 0x2c
 8002454:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800246a:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <HAL_RCC_GetSysClockFreq+0xc4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b04      	cmp	r3, #4
 8002478:	d002      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x30>
 800247a:	2b08      	cmp	r3, #8
 800247c:	d003      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x36>
 800247e:	e03f      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002482:	623b      	str	r3, [r7, #32]
      break;
 8002484:	e03f      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800248c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002490:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	607b      	str	r3, [r7, #4]
  return(result);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_RCC_GetSysClockFreq+0xcc>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	f003 020f 	and.w	r2, r3, #15
 80024b2:	230f      	movs	r3, #15
 80024b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	4a15      	ldr	r2, [pc, #84]	; (8002520 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80024d8:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
 80024e8:	e007      	b.n	80024fa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80024ea:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	623b      	str	r3, [r7, #32]
      break;
 80024fe:	e002      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002502:	623b      	str	r3, [r7, #32]
      break;
 8002504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002506:	6a3b      	ldr	r3, [r7, #32]
}
 8002508:	4618      	mov	r0, r3
 800250a:	372c      	adds	r7, #44	; 0x2c
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40021000 	.word	0x40021000
 8002518:	007a1200 	.word	0x007a1200
 800251c:	0800711c 	.word	0x0800711c
 8002520:	0800712c 	.word	0x0800712c

08002524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_RCC_GetHCLKFreq+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000008 	.word	0x20000008

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002542:	f7ff ffef 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002546:	4601      	mov	r1, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002550:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002554:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	603b      	str	r3, [r7, #0]
  return(result);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_RCC_GetPCLK1Freq+0x40>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	0800714c 	.word	0x0800714c

08002580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002586:	f7ff ffcd 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 800258a:	4601      	mov	r1, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002594:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002598:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	603b      	str	r3, [r7, #0]
  return(result);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	0800714c 	.word	0x0800714c

080025c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b092      	sub	sp, #72	; 0x48
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80d6 	beq.w	800278e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e8:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10e      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f4:	4b4a      	ldr	r3, [pc, #296]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	4a49      	ldr	r2, [pc, #292]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fe:	61d3      	str	r3, [r2, #28]
 8002600:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	4b44      	ldr	r3, [pc, #272]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a40      	ldr	r2, [pc, #256]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7fe fb6f 	bl	8000d0c <HAL_GetTick>
 800262e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7fe fb6b 	bl	8000d0c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d901      	bls.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1d4      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	4b37      	ldr	r3, [pc, #220]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002650:	4b33      	ldr	r3, [pc, #204]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8083 	beq.w	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800266c:	429a      	cmp	r2, r3
 800266e:	d07b      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800267a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	4b25      	ldr	r3, [pc, #148]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	461a      	mov	r2, r3
 8002698:	2301      	movs	r3, #1
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80026aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026be:	4a18      	ldr	r2, [pc, #96]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80026c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d04c      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe fb1d 	bl	8000d0c <HAL_GetTick>
 80026d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	e00a      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7fe fb19 	bl	8000d0c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d901      	bls.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e180      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80026ec:	2302      	movs	r3, #2
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
 80026f8:	2302      	movs	r3, #2
 80026fa:	623b      	str	r3, [r7, #32]
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	61fb      	str	r3, [r7, #28]
  return(result);
 8002704:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d108      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800271a:	4b01      	ldr	r3, [pc, #4]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	e00d      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
 8002728:	10908100 	.word	0x10908100
 800272c:	2302      	movs	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	4b9c      	ldr	r3, [pc, #624]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2202      	movs	r2, #2
 800273e:	613a      	str	r2, [r7, #16]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	fa92 f2a2 	rbit	r2, r2
 8002746:	60fa      	str	r2, [r7, #12]
  return(result);
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	fab2 f282 	clz	r2, r2
 800274e:	b252      	sxtb	r2, r2
 8002750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002754:	b252      	sxtb	r2, r2
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	f002 021f 	and.w	r2, r2, #31
 800275c:	2101      	movs	r1, #1
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0b6      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002768:	4b90      	ldr	r3, [pc, #576]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	498d      	ldr	r1, [pc, #564]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800277a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002782:	4b8a      	ldr	r3, [pc, #552]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a89      	ldr	r2, [pc, #548]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800279a:	4b84      	ldr	r3, [pc, #528]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	4981      	ldr	r1, [pc, #516]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027b8:	4b7c      	ldr	r3, [pc, #496]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4979      	ldr	r1, [pc, #484]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027d6:	4b75      	ldr	r3, [pc, #468]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	4972      	ldr	r1, [pc, #456]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f4:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f023 0210 	bic.w	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	496a      	ldr	r1, [pc, #424]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002812:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	4963      	ldr	r1, [pc, #396]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002830:	4b5e      	ldr	r3, [pc, #376]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	f023 0220 	bic.w	r2, r3, #32
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	495b      	ldr	r1, [pc, #364]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800284e:	4b57      	ldr	r3, [pc, #348]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	4954      	ldr	r1, [pc, #336]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800285c:	4313      	orrs	r3, r2
 800285e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800286c:	4b4f      	ldr	r3, [pc, #316]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	494c      	ldr	r1, [pc, #304]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800288a:	4b48      	ldr	r3, [pc, #288]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	4945      	ldr	r1, [pc, #276]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002898:	4313      	orrs	r3, r2
 800289a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a8:	4b40      	ldr	r3, [pc, #256]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	493d      	ldr	r1, [pc, #244]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	4936      	ldr	r1, [pc, #216]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028e4:	4b31      	ldr	r3, [pc, #196]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	492e      	ldr	r1, [pc, #184]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	4927      	ldr	r1, [pc, #156]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	491f      	ldr	r1, [pc, #124]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800292e:	4313      	orrs	r3, r2
 8002930:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	4918      	ldr	r1, [pc, #96]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800294c:	4313      	orrs	r3, r2
 800294e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	4910      	ldr	r1, [pc, #64]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4909      	ldr	r1, [pc, #36]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00b      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	4901      	ldr	r1, [pc, #4]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	630b      	str	r3, [r1, #48]	; 0x30
 80029aa:	e001      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80029ac:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	490b      	ldr	r1, [pc, #44]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e6:	4904      	ldr	r1, [pc, #16]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3748      	adds	r7, #72	; 0x48
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e01d      	b.n	8002a4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f001 ff5c 	bl	80048e0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f000 f96c 	bl	8002d18 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0202 	mvn.w	r2, #2
 8002ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f905 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8f7 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f908 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d122      	bne.n	8002b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0204 	mvn.w	r2, #4
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8db 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8cd 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f8de 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d122      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d11b      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0208 	mvn.w	r2, #8
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2204      	movs	r2, #4
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8b1 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8a3 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8b4 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d122      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b10      	cmp	r3, #16
 8002ba6:	d11b      	bne.n	8002be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0210 	mvn.w	r2, #16
 8002bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f887 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002bcc:	e005      	b.n	8002bda <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f879 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f88a 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10e      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d107      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0201 	mvn.w	r2, #1
 8002c04:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f001 fe1c 	bl	8004844 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	2b80      	cmp	r3, #128	; 0x80
 8002c18:	d10e      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b80      	cmp	r3, #128	; 0x80
 8002c26:	d107      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f976 	bl	8002f24 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c46:	d10e      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	d107      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f969 	bl	8002f38 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d10e      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d107      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c8a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f838 	bl	8002d02 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d10e      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d107      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f06f 0220 	mvn.w	r2, #32
 8002cb6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f929 	bl	8002f10 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d013      	beq.n	8002d5c <TIM_Base_SetConfig+0x44>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3a:	d00f      	beq.n	8002d5c <TIM_Base_SetConfig+0x44>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3f      	ldr	r2, [pc, #252]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <TIM_Base_SetConfig+0x44>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3e      	ldr	r2, [pc, #248]	; (8002e40 <TIM_Base_SetConfig+0x128>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <TIM_Base_SetConfig+0x44>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3d      	ldr	r2, [pc, #244]	; (8002e44 <TIM_Base_SetConfig+0x12c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d003      	beq.n	8002d5c <TIM_Base_SetConfig+0x44>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a3c      	ldr	r2, [pc, #240]	; (8002e48 <TIM_Base_SetConfig+0x130>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d108      	bne.n	8002d6e <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a31      	ldr	r2, [pc, #196]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <TIM_Base_SetConfig+0x9e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7c:	d01b      	beq.n	8002db6 <TIM_Base_SetConfig+0x9e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a2e      	ldr	r2, [pc, #184]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d017      	beq.n	8002db6 <TIM_Base_SetConfig+0x9e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a2d      	ldr	r2, [pc, #180]	; (8002e40 <TIM_Base_SetConfig+0x128>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d013      	beq.n	8002db6 <TIM_Base_SetConfig+0x9e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <TIM_Base_SetConfig+0x12c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00f      	beq.n	8002db6 <TIM_Base_SetConfig+0x9e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2c      	ldr	r2, [pc, #176]	; (8002e4c <TIM_Base_SetConfig+0x134>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <TIM_Base_SetConfig+0x9e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a2b      	ldr	r2, [pc, #172]	; (8002e50 <TIM_Base_SetConfig+0x138>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <TIM_Base_SetConfig+0x9e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2a      	ldr	r2, [pc, #168]	; (8002e54 <TIM_Base_SetConfig+0x13c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_Base_SetConfig+0x9e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <TIM_Base_SetConfig+0x130>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d108      	bne.n	8002dc8 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d013      	beq.n	8002e1c <TIM_Base_SetConfig+0x104>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <TIM_Base_SetConfig+0x12c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00f      	beq.n	8002e1c <TIM_Base_SetConfig+0x104>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <TIM_Base_SetConfig+0x134>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <TIM_Base_SetConfig+0x104>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <TIM_Base_SetConfig+0x138>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0x104>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <TIM_Base_SetConfig+0x13c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0x104>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a0c      	ldr	r2, [pc, #48]	; (8002e48 <TIM_Base_SetConfig+0x130>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	615a      	str	r2, [r3, #20]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40013400 	.word	0x40013400
 8002e48:	40015000 	.word	0x40015000
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800

08002e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e042      	b.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d004      	beq.n	8002ea6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1a      	ldr	r2, [pc, #104]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d108      	bne.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002eac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
} 
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40012c00 	.word	0x40012c00
 8002f08:	40013400 	.word	0x40013400
 8002f0c:	40015000 	.word	0x40015000

08002f10 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e043      	b.n	8002fe6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f001 fcda 	bl	800492c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fa77 	bl	8003484 <UART_SetConfig>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e022      	b.n	8002fe6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fc69 	bl	8003880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fcc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fcf0 	bl	80039c4 <UART_CheckIdleState>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b088      	sub	sp, #32
 8002ff2:	af02      	add	r7, sp, #8
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	d177      	bne.n	80030fe <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_UART_Transmit+0x2c>
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e070      	b.n	8003100 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_UART_Transmit+0x3e>
 8003028:	2302      	movs	r3, #2
 800302a:	e069      	b.n	8003100 <HAL_UART_Transmit+0x112>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2221      	movs	r2, #33	; 0x21
 800303e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003042:	f7fd fe63 	bl	8000d0c <HAL_GetTick>
 8003046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	88fa      	ldrh	r2, [r7, #6]
 8003054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003058:	e034      	b.n	80030c4 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2200      	movs	r2, #0
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fced 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e03c      	b.n	8003100 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	d111      	bne.n	80030b4 <HAL_UART_Transmit+0xc6>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10d      	bne.n	80030b4 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	881a      	ldrh	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a8:	b292      	uxth	r2, r2
 80030aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	3302      	adds	r3, #2
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	e007      	b.n	80030c4 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	60ba      	str	r2, [r7, #8]
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b292      	uxth	r2, r2
 80030c2:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1c4      	bne.n	800305a <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2200      	movs	r2, #0
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fcbb 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e00a      	b.n	8003100 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_UART_Receive_IT>:
  * @param pData pointer to data buffer.
  * @param Size amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b20      	cmp	r3, #32
 8003120:	d172      	bne.n	8003208 <HAL_UART_Receive_IT+0x100>
  {
    if((pData == NULL ) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_UART_Receive_IT+0x26>
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06b      	b.n	800320a <HAL_UART_Receive_IT+0x102>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_UART_Receive_IT+0x38>
 800313c:	2302      	movs	r3, #2
 800313e:	e064      	b.n	800320a <HAL_UART_Receive_IT+0x102>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	88fa      	ldrh	r2, [r7, #6]
 800315a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003166:	d10e      	bne.n	8003186 <HAL_UART_Receive_IT+0x7e>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <HAL_UART_Receive_IT+0x74>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003176:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800317a:	e028      	b.n	80031ce <HAL_UART_Receive_IT+0xc6>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003184:	e023      	b.n	80031ce <HAL_UART_Receive_IT+0xc6>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10d      	bne.n	80031aa <HAL_UART_Receive_IT+0xa2>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <HAL_UART_Receive_IT+0x98>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	22ff      	movs	r2, #255	; 0xff
 800319a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800319e:	e016      	b.n	80031ce <HAL_UART_Receive_IT+0xc6>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	227f      	movs	r2, #127	; 0x7f
 80031a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031a8:	e011      	b.n	80031ce <HAL_UART_Receive_IT+0xc6>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031b2:	d10c      	bne.n	80031ce <HAL_UART_Receive_IT+0xc6>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_UART_Receive_IT+0xbe>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	227f      	movs	r2, #127	; 0x7f
 80031c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031c4:	e003      	b.n	80031ce <HAL_UART_Receive_IT+0xc6>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	223f      	movs	r2, #63	; 0x3f
 80031ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2222      	movs	r2, #34	; 0x22
 80031d8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003202:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_UART_Receive_IT+0x102>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_UART_IRQHandler+0x42>
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fced 	bl	8003c32 <UART_Receive_IT>
      return;
 8003258:	e0fa      	b.n	8003450 <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80ba 	beq.w	80033de <HAL_UART_IRQHandler+0x1c6>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80af 	beq.w	80033de <HAL_UART_IRQHandler+0x1c6>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00e      	beq.n	80032a8 <HAL_UART_IRQHandler+0x90>
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00e      	beq.n	80032d0 <HAL_UART_IRQHandler+0xb8>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d009      	beq.n	80032d0 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2202      	movs	r2, #2
 80032c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c8:	f043 0204 	orr.w	r2, r3, #4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00e      	beq.n	80032f8 <HAL_UART_IRQHandler+0xe0>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d009      	beq.n	80032f8 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2204      	movs	r2, #4
 80032ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f0:	f043 0202 	orr.w	r2, r3, #2
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d013      	beq.n	800332a <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2208      	movs	r2, #8
 800331c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003322:	f043 0208 	orr.w	r2, r3, #8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 808d 	beq.w	800344e <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <HAL_UART_IRQHandler+0x136>
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_UART_IRQHandler+0x136>
      {
        UART_Receive_IT(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fc72 	bl	8003c32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_UART_IRQHandler+0x150>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d131      	bne.n	80033cc <HAL_UART_IRQHandler+0x1b4>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fbbe 	bl	8003aea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d123      	bne.n	80033c4 <HAL_UART_IRQHandler+0x1ac>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003390:	2b00      	cmp	r3, #0
 8003392:	d013      	beq.n	80033bc <HAL_UART_IRQHandler+0x1a4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003398:	4a2f      	ldr	r2, [pc, #188]	; (8003458 <HAL_UART_IRQHandler+0x240>)
 800339a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd fdee 	bl	8000f82 <HAL_DMA_Abort_IT>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d016      	beq.n	80033da <HAL_UART_IRQHandler+0x1c2>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80033b6:	4610      	mov	r0, r2
 80033b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ba:	e00e      	b.n	80033da <HAL_UART_IRQHandler+0x1c2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f857 	bl	8003470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c2:	e00a      	b.n	80033da <HAL_UART_IRQHandler+0x1c2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f853 	bl	8003470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ca:	e006      	b.n	80033da <HAL_UART_IRQHandler+0x1c2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f84f 	bl	8003470 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80033d8:	e039      	b.n	800344e <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033da:	bf00      	nop
    return;
 80033dc:	e037      	b.n	800344e <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <HAL_UART_IRQHandler+0x1fc>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033fa:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fc7a 	bl	8003d06 <HAL_UARTEx_WakeupCallback>
    return;
 8003412:	e01d      	b.n	8003450 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_UART_IRQHandler+0x218>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fb92 	bl	8003b52 <UART_Transmit_IT>
    return;
 800342e:	e00f      	b.n	8003450 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_UART_IRQHandler+0x238>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fbdc 	bl	8003c02 <UART_EndTransmit_IT>
    return;
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <HAL_UART_IRQHandler+0x238>
    return;
 800344e:	bf00      	nop
  }

}
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	08003b27 	.word	0x08003b27

0800345c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003490:	2310      	movs	r3, #16
 8003492:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003494:	2300      	movs	r3, #0
 8003496:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8003498:	2300      	movs	r3, #0
 800349a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4ba7      	ldr	r3, [pc, #668]	; (800375c <UART_SetConfig+0x2d8>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a96      	ldr	r2, [pc, #600]	; (8003760 <UART_SetConfig+0x2dc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d121      	bne.n	8003550 <UART_SetConfig+0xcc>
 800350c:	4b95      	ldr	r3, [pc, #596]	; (8003764 <UART_SetConfig+0x2e0>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b03      	cmp	r3, #3
 8003516:	d817      	bhi.n	8003548 <UART_SetConfig+0xc4>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <UART_SetConfig+0x9c>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003531 	.word	0x08003531
 8003524:	0800353d 	.word	0x0800353d
 8003528:	08003543 	.word	0x08003543
 800352c:	08003537 	.word	0x08003537
 8003530:	2301      	movs	r3, #1
 8003532:	75fb      	strb	r3, [r7, #23]
 8003534:	e0b2      	b.n	800369c <UART_SetConfig+0x218>
 8003536:	2302      	movs	r3, #2
 8003538:	75fb      	strb	r3, [r7, #23]
 800353a:	e0af      	b.n	800369c <UART_SetConfig+0x218>
 800353c:	2304      	movs	r3, #4
 800353e:	75fb      	strb	r3, [r7, #23]
 8003540:	e0ac      	b.n	800369c <UART_SetConfig+0x218>
 8003542:	2308      	movs	r3, #8
 8003544:	75fb      	strb	r3, [r7, #23]
 8003546:	e0a9      	b.n	800369c <UART_SetConfig+0x218>
 8003548:	2310      	movs	r3, #16
 800354a:	75fb      	strb	r3, [r7, #23]
 800354c:	bf00      	nop
 800354e:	e0a5      	b.n	800369c <UART_SetConfig+0x218>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a84      	ldr	r2, [pc, #528]	; (8003768 <UART_SetConfig+0x2e4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d123      	bne.n	80035a2 <UART_SetConfig+0x11e>
 800355a:	4b82      	ldr	r3, [pc, #520]	; (8003764 <UART_SetConfig+0x2e0>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003566:	d012      	beq.n	800358e <UART_SetConfig+0x10a>
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d802      	bhi.n	8003574 <UART_SetConfig+0xf0>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <UART_SetConfig+0xfe>
 8003572:	e012      	b.n	800359a <UART_SetConfig+0x116>
 8003574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003578:	d00c      	beq.n	8003594 <UART_SetConfig+0x110>
 800357a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800357e:	d003      	beq.n	8003588 <UART_SetConfig+0x104>
 8003580:	e00b      	b.n	800359a <UART_SetConfig+0x116>
 8003582:	2300      	movs	r3, #0
 8003584:	75fb      	strb	r3, [r7, #23]
 8003586:	e089      	b.n	800369c <UART_SetConfig+0x218>
 8003588:	2302      	movs	r3, #2
 800358a:	75fb      	strb	r3, [r7, #23]
 800358c:	e086      	b.n	800369c <UART_SetConfig+0x218>
 800358e:	2304      	movs	r3, #4
 8003590:	75fb      	strb	r3, [r7, #23]
 8003592:	e083      	b.n	800369c <UART_SetConfig+0x218>
 8003594:	2308      	movs	r3, #8
 8003596:	75fb      	strb	r3, [r7, #23]
 8003598:	e080      	b.n	800369c <UART_SetConfig+0x218>
 800359a:	2310      	movs	r3, #16
 800359c:	75fb      	strb	r3, [r7, #23]
 800359e:	bf00      	nop
 80035a0:	e07c      	b.n	800369c <UART_SetConfig+0x218>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a71      	ldr	r2, [pc, #452]	; (800376c <UART_SetConfig+0x2e8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d123      	bne.n	80035f4 <UART_SetConfig+0x170>
 80035ac:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <UART_SetConfig+0x2e0>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80035b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035b8:	d012      	beq.n	80035e0 <UART_SetConfig+0x15c>
 80035ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035be:	d802      	bhi.n	80035c6 <UART_SetConfig+0x142>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <UART_SetConfig+0x150>
 80035c4:	e012      	b.n	80035ec <UART_SetConfig+0x168>
 80035c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035ca:	d00c      	beq.n	80035e6 <UART_SetConfig+0x162>
 80035cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035d0:	d003      	beq.n	80035da <UART_SetConfig+0x156>
 80035d2:	e00b      	b.n	80035ec <UART_SetConfig+0x168>
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]
 80035d8:	e060      	b.n	800369c <UART_SetConfig+0x218>
 80035da:	2302      	movs	r3, #2
 80035dc:	75fb      	strb	r3, [r7, #23]
 80035de:	e05d      	b.n	800369c <UART_SetConfig+0x218>
 80035e0:	2304      	movs	r3, #4
 80035e2:	75fb      	strb	r3, [r7, #23]
 80035e4:	e05a      	b.n	800369c <UART_SetConfig+0x218>
 80035e6:	2308      	movs	r3, #8
 80035e8:	75fb      	strb	r3, [r7, #23]
 80035ea:	e057      	b.n	800369c <UART_SetConfig+0x218>
 80035ec:	2310      	movs	r3, #16
 80035ee:	75fb      	strb	r3, [r7, #23]
 80035f0:	bf00      	nop
 80035f2:	e053      	b.n	800369c <UART_SetConfig+0x218>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a5d      	ldr	r2, [pc, #372]	; (8003770 <UART_SetConfig+0x2ec>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d123      	bne.n	8003646 <UART_SetConfig+0x1c2>
 80035fe:	4b59      	ldr	r3, [pc, #356]	; (8003764 <UART_SetConfig+0x2e0>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800360a:	d012      	beq.n	8003632 <UART_SetConfig+0x1ae>
 800360c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003610:	d802      	bhi.n	8003618 <UART_SetConfig+0x194>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <UART_SetConfig+0x1a2>
 8003616:	e012      	b.n	800363e <UART_SetConfig+0x1ba>
 8003618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361c:	d00c      	beq.n	8003638 <UART_SetConfig+0x1b4>
 800361e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003622:	d003      	beq.n	800362c <UART_SetConfig+0x1a8>
 8003624:	e00b      	b.n	800363e <UART_SetConfig+0x1ba>
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]
 800362a:	e037      	b.n	800369c <UART_SetConfig+0x218>
 800362c:	2302      	movs	r3, #2
 800362e:	75fb      	strb	r3, [r7, #23]
 8003630:	e034      	b.n	800369c <UART_SetConfig+0x218>
 8003632:	2304      	movs	r3, #4
 8003634:	75fb      	strb	r3, [r7, #23]
 8003636:	e031      	b.n	800369c <UART_SetConfig+0x218>
 8003638:	2308      	movs	r3, #8
 800363a:	75fb      	strb	r3, [r7, #23]
 800363c:	e02e      	b.n	800369c <UART_SetConfig+0x218>
 800363e:	2310      	movs	r3, #16
 8003640:	75fb      	strb	r3, [r7, #23]
 8003642:	bf00      	nop
 8003644:	e02a      	b.n	800369c <UART_SetConfig+0x218>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a4a      	ldr	r2, [pc, #296]	; (8003774 <UART_SetConfig+0x2f0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d123      	bne.n	8003698 <UART_SetConfig+0x214>
 8003650:	4b44      	ldr	r3, [pc, #272]	; (8003764 <UART_SetConfig+0x2e0>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365c:	d012      	beq.n	8003684 <UART_SetConfig+0x200>
 800365e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003662:	d802      	bhi.n	800366a <UART_SetConfig+0x1e6>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <UART_SetConfig+0x1f4>
 8003668:	e012      	b.n	8003690 <UART_SetConfig+0x20c>
 800366a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800366e:	d00c      	beq.n	800368a <UART_SetConfig+0x206>
 8003670:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003674:	d003      	beq.n	800367e <UART_SetConfig+0x1fa>
 8003676:	e00b      	b.n	8003690 <UART_SetConfig+0x20c>
 8003678:	2300      	movs	r3, #0
 800367a:	75fb      	strb	r3, [r7, #23]
 800367c:	e00e      	b.n	800369c <UART_SetConfig+0x218>
 800367e:	2302      	movs	r3, #2
 8003680:	75fb      	strb	r3, [r7, #23]
 8003682:	e00b      	b.n	800369c <UART_SetConfig+0x218>
 8003684:	2304      	movs	r3, #4
 8003686:	75fb      	strb	r3, [r7, #23]
 8003688:	e008      	b.n	800369c <UART_SetConfig+0x218>
 800368a:	2308      	movs	r3, #8
 800368c:	75fb      	strb	r3, [r7, #23]
 800368e:	e005      	b.n	800369c <UART_SetConfig+0x218>
 8003690:	2310      	movs	r3, #16
 8003692:	75fb      	strb	r3, [r7, #23]
 8003694:	bf00      	nop
 8003696:	e001      	b.n	800369c <UART_SetConfig+0x218>
 8003698:	2310      	movs	r3, #16
 800369a:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a4:	d17d      	bne.n	80037a2 <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d865      	bhi.n	8003778 <UART_SetConfig+0x2f4>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <UART_SetConfig+0x230>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036d9 	.word	0x080036d9
 80036b8:	080036f5 	.word	0x080036f5
 80036bc:	08003711 	.word	0x08003711
 80036c0:	08003779 	.word	0x08003779
 80036c4:	0800372b 	.word	0x0800372b
 80036c8:	08003779 	.word	0x08003779
 80036cc:	08003779 	.word	0x08003779
 80036d0:	08003779 	.word	0x08003779
 80036d4:	08003747 	.word	0x08003747
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80036d8:	f7fe ff30 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 80036dc:	4603      	mov	r3, r0
 80036de:	005a      	lsls	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	441a      	add	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	82bb      	strh	r3, [r7, #20]
        break;
 80036f2:	e044      	b.n	800377e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80036f4:	f7fe ff44 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 80036f8:	4603      	mov	r3, r0
 80036fa:	005a      	lsls	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	441a      	add	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	82bb      	strh	r3, [r7, #20]
        break;
 800370e:	e036      	b.n	800377e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800371a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6852      	ldr	r2, [r2, #4]
 8003722:	fbb3 f3f2 	udiv	r3, r3, r2
 8003726:	82bb      	strh	r3, [r7, #20]
        break;
 8003728:	e029      	b.n	800377e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800372a:	f7fe fe91 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800372e:	4603      	mov	r3, r0
 8003730:	005a      	lsls	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	085b      	lsrs	r3, r3, #1
 8003738:	441a      	add	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003742:	82bb      	strh	r3, [r7, #20]
        break;
 8003744:	e01b      	b.n	800377e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	82bb      	strh	r3, [r7, #20]
        break;
 800375a:	e010      	b.n	800377e <UART_SetConfig+0x2fa>
 800375c:	efff69f3 	.word	0xefff69f3
 8003760:	40013800 	.word	0x40013800
 8003764:	40021000 	.word	0x40021000
 8003768:	40004400 	.word	0x40004400
 800376c:	40004800 	.word	0x40004800
 8003770:	40004c00 	.word	0x40004c00
 8003774:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	74fb      	strb	r3, [r7, #19]
        break;
 800377c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800377e:	8abb      	ldrh	r3, [r7, #20]
 8003780:	f023 030f 	bic.w	r3, r3, #15
 8003784:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003786:	8abb      	ldrh	r3, [r7, #20]
 8003788:	105b      	asrs	r3, r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	b29a      	uxth	r2, r3
 8003792:	897b      	ldrh	r3, [r7, #10]
 8003794:	4313      	orrs	r3, r2
 8003796:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	897a      	ldrh	r2, [r7, #10]
 800379e:	60da      	str	r2, [r3, #12]
 80037a0:	e069      	b.n	8003876 <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d863      	bhi.n	8003870 <UART_SetConfig+0x3ec>
 80037a8:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <UART_SetConfig+0x32c>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	080037f5 	.word	0x080037f5
 80037b8:	08003815 	.word	0x08003815
 80037bc:	08003871 	.word	0x08003871
 80037c0:	08003835 	.word	0x08003835
 80037c4:	08003871 	.word	0x08003871
 80037c8:	08003871 	.word	0x08003871
 80037cc:	08003871 	.word	0x08003871
 80037d0:	08003855 	.word	0x08003855
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80037d4:	f7fe feb2 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 80037d8:	4602      	mov	r2, r0
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	441a      	add	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60da      	str	r2, [r3, #12]
        break;
 80037f2:	e040      	b.n	8003876 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037f4:	f7fe fec4 	bl	8002580 <HAL_RCC_GetPCLK2Freq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	441a      	add	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	b29a      	uxth	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60da      	str	r2, [r3, #12]
        break;
 8003812:	e030      	b.n	8003876 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800381e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6852      	ldr	r2, [r2, #4]
 8003826:	fbb3 f3f2 	udiv	r3, r3, r2
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60da      	str	r2, [r3, #12]
        break;
 8003832:	e020      	b.n	8003876 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003834:	f7fe fe0c 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	085b      	lsrs	r3, r3, #1
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	b29a      	uxth	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60da      	str	r2, [r3, #12]
        break;
 8003852:	e010      	b.n	8003876 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60da      	str	r2, [r3, #12]
        break;
 800386e:	e002      	b.n	8003876 <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	74fb      	strb	r3, [r7, #19]
        break;
 8003874:	bf00      	nop
    }
  }

  return ret;
 8003876:	7cfb      	ldrb	r3, [r7, #19]

}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01a      	beq.n	8003996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397e:	d10a      	bne.n	8003996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
  }
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039d6:	f7fd f999 	bl	8000d0c <HAL_GetTick>
 80039da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d10e      	bne.n	8003a08 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f82c 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e022      	b.n	8003a4e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d10e      	bne.n	8003a34 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f816 	bl	8003a56 <UART_WaitOnFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e00c      	b.n	8003a4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4613      	mov	r3, r2
 8003a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a66:	e02c      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6e:	d028      	beq.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a76:	f7fd f949 	bl	8000d0c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d21d      	bcs.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e00f      	b.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4013      	ands	r3, r2
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d0c3      	beq.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b00:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f7ff fc93 	bl	8003470 <HAL_UART_ErrorCallback>
}
 8003b4a:	bf00      	nop
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b085      	sub	sp, #20
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b21      	cmp	r3, #33	; 0x21
 8003b64:	d146      	bne.n	8003bf4 <UART_Transmit_IT+0xa2>
  {
    if(huart->TxXferCount == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d111      	bne.n	8003b96 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b80:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b90:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e02f      	b.n	8003bf6 <UART_Transmit_IT+0xa4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d114      	bne.n	8003bca <UART_Transmit_IT+0x78>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d110      	bne.n	8003bca <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bac:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	881a      	ldrh	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	1c9a      	adds	r2, r3, #2
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bc8:	e009      	b.n	8003bde <UART_Transmit_IT+0x8c>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	1c59      	adds	r1, r3, #1
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	64d1      	str	r1, [r2, #76]	; 0x4c
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <UART_Transmit_IT+0xa4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c18:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff fc1a 	bl	800345c <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c32:	b590      	push	{r4, r7, lr}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c40:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b22      	cmp	r3, #34	; 0x22
 8003c4c:	d14e      	bne.n	8003cec <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c54:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	d112      	bne.n	8003c86 <UART_Receive_IT+0x54>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10e      	bne.n	8003c86 <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8003c6e:	89ba      	ldrh	r2, [r7, #12]
 8003c70:	89fb      	ldrh	r3, [r7, #14]
 8003c72:	4013      	ands	r3, r2
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	1c9a      	adds	r2, r3, #2
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54
 8003c84:	e00b      	b.n	8003c9e <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c86:	89bb      	ldrh	r3, [r7, #12]
 8003c88:	b2d9      	uxtb	r1, r3
 8003c8a:	89fb      	ldrh	r3, [r7, #14]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c92:	1c5c      	adds	r4, r3, #1
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	6544      	str	r4, [r0, #84]	; 0x54
 8003c98:	400a      	ands	r2, r1
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4619      	mov	r1, r3
 8003cae:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d118      	bne.n	8003ce8 <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cc4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fd76 	bl	80047d0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e00a      	b.n	8003cfe <UART_Receive_IT+0xcc>
    }

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e008      	b.n	8003cfe <UART_Receive_IT+0xcc>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0208 	orr.w	r2, r2, #8
 8003cfa:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd90      	pop	{r4, r7, pc}

08003d06 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <DHT11_sample>:
#include "dht11.h"


SampleDHT11 DHT11_sample()
{
 8003d1c:	b5b0      	push	{r4, r5, r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	uint8_t buffer[DHT11_N_BYTES] = {0};
 8003d24:	f107 0318 	add.w	r3, r7, #24
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	711a      	strb	r2, [r3, #4]

	_start_signal();
 8003d2e:	f000 f863 	bl	8003df8 <_start_signal>
	if (_is_response_valid())
 8003d32:	f000 f881 	bl	8003e38 <_is_response_valid>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <DHT11_sample+0x2a>
		_read(buffer);
 8003d3c:	f107 0318 	add.w	r3, r7, #24
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f89d 	bl	8003e80 <_read>

	SampleDHT11 samples = {.station_id = 1, .humidity = 0, .temperature = 0};
 8003d46:	2301      	movs	r3, #1
 8003d48:	733b      	strb	r3, [r7, #12]
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
	if (_is_read_valid(buffer)) {
 8003d56:	f107 0318 	add.w	r3, r7, #24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f8ee 	bl	8003f3c <_is_read_valid>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d039      	beq.n	8003dda <DHT11_sample+0xbe>
		samples.humidity = buffer[IDX_BYTE_IRH] + buffer[IDX_BYTE_DRH]/100.0;
 8003d66:	7e3b      	ldrb	r3, [r7, #24]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fbe3 	bl	8000534 <__aeabi_i2d>
 8003d6e:	4604      	mov	r4, r0
 8003d70:	460d      	mov	r5, r1
 8003d72:	7e7b      	ldrb	r3, [r7, #25]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fc fbdd 	bl	8000534 <__aeabi_i2d>
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <DHT11_sample+0xd8>)
 8003d80:	f7fc fd6c 	bl	800085c <__aeabi_ddiv>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4620      	mov	r0, r4
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	f7fc fa86 	bl	800029c <__adddf3>
 8003d90:	4603      	mov	r3, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	4618      	mov	r0, r3
 8003d96:	4621      	mov	r1, r4
 8003d98:	f7fc ff0e 	bl	8000bb8 <__aeabi_d2f>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	613b      	str	r3, [r7, #16]
		samples.temperature = buffer[IDX_BYTE_ITP] + buffer[IDX_BYTE_DTP]/100.0;
 8003da0:	7ebb      	ldrb	r3, [r7, #26]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fbc6 	bl	8000534 <__aeabi_i2d>
 8003da8:	4604      	mov	r4, r0
 8003daa:	460d      	mov	r5, r1
 8003dac:	7efb      	ldrb	r3, [r7, #27]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fbc0 	bl	8000534 <__aeabi_i2d>
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <DHT11_sample+0xd8>)
 8003dba:	f7fc fd4f 	bl	800085c <__aeabi_ddiv>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	f7fc fa69 	bl	800029c <__adddf3>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	460c      	mov	r4, r1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	f7fc fef1 	bl	8000bb8 <__aeabi_d2f>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	617b      	str	r3, [r7, #20]
	}
	return samples;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	461c      	mov	r4, r3
 8003dde:	f107 030c 	add.w	r3, r7, #12
 8003de2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003de6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bdb0      	pop	{r4, r5, r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40590000 	.word	0x40590000

08003df8 <_start_signal>:


void _start_signal(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
	gpio_set_output(DHT11_GPIO_Port, DHT11_Pin);
 8003dfc:	2120      	movs	r1, #32
 8003dfe:	480d      	ldr	r0, [pc, #52]	; (8003e34 <_start_signal+0x3c>)
 8003e00:	f000 f916 	bl	8004030 <gpio_set_output>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 0);
 8003e04:	2200      	movs	r2, #0
 8003e06:	2120      	movs	r1, #32
 8003e08:	480a      	ldr	r0, [pc, #40]	; (8003e34 <_start_signal+0x3c>)
 8003e0a:	f7fd fa9f 	bl	800134c <HAL_GPIO_WritePin>
	delay_us(18000);
 8003e0e:	f244 6050 	movw	r0, #18000	; 0x4650
 8003e12:	f000 fec1 	bl	8004b98 <delay_us>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, 1);
 8003e16:	2201      	movs	r2, #1
 8003e18:	2120      	movs	r1, #32
 8003e1a:	4806      	ldr	r0, [pc, #24]	; (8003e34 <_start_signal+0x3c>)
 8003e1c:	f7fd fa96 	bl	800134c <HAL_GPIO_WritePin>
	delay_us(40);
 8003e20:	2028      	movs	r0, #40	; 0x28
 8003e22:	f000 feb9 	bl	8004b98 <delay_us>
	gpio_set_input(DHT11_GPIO_Port, DHT11_Pin);
 8003e26:	2120      	movs	r1, #32
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <_start_signal+0x3c>)
 8003e2a:	f000 f91d 	bl	8004068 <gpio_set_input>
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	48000800 	.word	0x48000800

08003e38 <_is_response_valid>:


bool _is_response_valid(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
	bool is_checked = false;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	71fb      	strb	r3, [r7, #7]
	if (!(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))) {
 8003e42:	2120      	movs	r1, #32
 8003e44:	480d      	ldr	r0, [pc, #52]	; (8003e7c <_is_response_valid+0x44>)
 8003e46:	f7fd fa69 	bl	800131c <HAL_GPIO_ReadPin>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10f      	bne.n	8003e70 <_is_response_valid+0x38>
		delay_us(80);
 8003e50:	2050      	movs	r0, #80	; 0x50
 8003e52:	f000 fea1 	bl	8004b98 <delay_us>
		is_checked = HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin);
 8003e56:	2120      	movs	r1, #32
 8003e58:	4808      	ldr	r0, [pc, #32]	; (8003e7c <_is_response_valid+0x44>)
 8003e5a:	f7fd fa5f 	bl	800131c <HAL_GPIO_ReadPin>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	71fb      	strb	r3, [r7, #7]
		delay_us(80);
 8003e6a:	2050      	movs	r0, #80	; 0x50
 8003e6c:	f000 fe94 	bl	8004b98 <delay_us>
	}
	return is_checked;
 8003e70:	79fb      	ldrb	r3, [r7, #7]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	48000800 	.word	0x48000800

08003e80 <_read>:


void _read(uint8_t buffer[DHT11_N_BYTES])
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < DHT11_N_BITS; i++) {
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e04d      	b.n	8003f2a <_read+0xaa>
		while (!(HAL_GPIO_ReadPin (DHT11_GPIO_Port, DHT11_Pin)));
 8003e8e:	bf00      	nop
 8003e90:	2120      	movs	r1, #32
 8003e92:	4829      	ldr	r0, [pc, #164]	; (8003f38 <_read+0xb8>)
 8003e94:	f7fd fa42 	bl	800131c <HAL_GPIO_ReadPin>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f8      	beq.n	8003e90 <_read+0x10>
		delay_us(40);
 8003e9e:	2028      	movs	r0, #40	; 0x28
 8003ea0:	f000 fe7a 	bl	8004b98 <delay_us>
		if (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == 0)
 8003ea4:	2120      	movs	r1, #32
 8003ea6:	4824      	ldr	r0, [pc, #144]	; (8003f38 <_read+0xb8>)
 8003ea8:	f7fd fa38 	bl	800131c <HAL_GPIO_ReadPin>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d119      	bne.n	8003ee6 <_read+0x66>
			ClearBit(buffer, i);
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	08db      	lsrs	r3, r3, #3
 8003eb6:	b2d8      	uxtb	r0, r3
 8003eb8:	4602      	mov	r2, r0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	b25a      	sxtb	r2, r3
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	2101      	movs	r1, #1
 8003ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed0:	b25b      	sxtb	r3, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	b25b      	sxtb	r3, r3
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	b25a      	sxtb	r2, r3
 8003eda:	4601      	mov	r1, r0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	440b      	add	r3, r1
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e016      	b.n	8003f14 <_read+0x94>
		else
			SetBit(buffer, i);
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	08db      	lsrs	r3, r3, #3
 8003eea:	b2d8      	uxtb	r0, r3
 8003eec:	4602      	mov	r2, r0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b25a      	sxtb	r2, r3
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	2101      	movs	r1, #1
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b25a      	sxtb	r2, r3
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	440b      	add	r3, r1
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));
 8003f14:	bf00      	nop
 8003f16:	2120      	movs	r1, #32
 8003f18:	4807      	ldr	r0, [pc, #28]	; (8003f38 <_read+0xb8>)
 8003f1a:	f7fd f9ff 	bl	800131c <HAL_GPIO_ReadPin>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f8      	bne.n	8003f16 <_read+0x96>
	for (uint8_t i = 0; i < DHT11_N_BITS; i++) {
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	3301      	adds	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b27      	cmp	r3, #39	; 0x27
 8003f2e:	d9ae      	bls.n	8003e8e <_read+0xe>
	}
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	48000800 	.word	0x48000800

08003f3c <_is_read_valid>:


bool _is_read_valid(uint8_t buffer[DHT11_N_BYTES])
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	return (buffer[IDX_BYTE_CHK] != 0 &&
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d015      	beq.n	8003f7a <_is_read_valid+0x3e>
		   (buffer[IDX_BYTE_IRH] + buffer[IDX_BYTE_DRH] + buffer[IDX_BYTE_ITP] + buffer[IDX_BYTE_DTP]) == buffer[IDX_BYTE_CHK]);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3301      	adds	r3, #1
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	3202      	adds	r2, #2
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	4413      	add	r3, r2
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	3203      	adds	r2, #3
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	3204      	adds	r2, #4
 8003f70:	7812      	ldrb	r2, [r2, #0]
	return (buffer[IDX_BYTE_CHK] != 0 &&
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <_is_read_valid+0x3e>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <_is_read_valid+0x40>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	b2db      	uxtb	r3, r3
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <DHT11_to_post>:


void DHT11_to_post(char *buffer, size_t len, SampleDHT11 sample, char *endpoint, char *host)
{
 8003f90:	b082      	sub	sp, #8
 8003f92:	b5b0      	push	{r4, r5, r7, lr}
 8003f94:	b0a2      	sub	sp, #136	; 0x88
 8003f96:	af06      	add	r7, sp, #24
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
 8003f9c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003fa0:	e881 000c 	stmia.w	r1, {r2, r3}
	char json[JSON_LENGTH] = {"\0"};
 8003fa4:	4b1f      	ldr	r3, [pc, #124]	; (8004024 <DHT11_to_post+0x94>)
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	81bb      	strh	r3, [r7, #12]
 8003faa:	f107 030e 	add.w	r3, r7, #14
 8003fae:	2262      	movs	r2, #98	; 0x62
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fe60 	bl	8004c78 <memset>
    snprintf(json, JSON_LENGTH, "{\"temperature\":%f,\"humidity\":%f,\"station_id\":%d}", sample.temperature, sample.humidity, sample.station_id);
 8003fb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc facb 	bl	8000558 <__aeabi_f2d>
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	460d      	mov	r5, r1
 8003fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fc fac4 	bl	8000558 <__aeabi_f2d>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	f897 1080 	ldrb.w	r1, [r7, #128]	; 0x80
 8003fd8:	f107 000c 	add.w	r0, r7, #12
 8003fdc:	9104      	str	r1, [sp, #16]
 8003fde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fe2:	e9cd 4500 	strd	r4, r5, [sp]
 8003fe6:	4a10      	ldr	r2, [pc, #64]	; (8004028 <DHT11_to_post+0x98>)
 8003fe8:	2164      	movs	r1, #100	; 0x64
 8003fea:	f001 faa9 	bl	8005540 <sniprintf>
    snprintf(buffer, len, "POST %s HTTP/1.1\r\nHost: %s\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n%s\r\n\r\n", endpoint, host, strlen(json), json);
 8003fee:	f107 030c 	add.w	r3, r7, #12
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc f8f4 	bl	80001e0 <strlen>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	f107 030c 	add.w	r3, r7, #12
 8003ffe:	9302      	str	r3, [sp, #8]
 8004000:	9201      	str	r2, [sp, #4]
 8004002:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800400c:	4a07      	ldr	r2, [pc, #28]	; (800402c <DHT11_to_post+0x9c>)
 800400e:	6839      	ldr	r1, [r7, #0]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f001 fa95 	bl	8005540 <sniprintf>
}
 8004016:	bf00      	nop
 8004018:	3770      	adds	r7, #112	; 0x70
 800401a:	46bd      	mov	sp, r7
 800401c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004020:	b002      	add	sp, #8
 8004022:	4770      	bx	lr
 8004024:	08006e48 	.word	0x08006e48
 8004028:	08006db8 	.word	0x08006db8
 800402c:	08006dec 	.word	0x08006dec

08004030 <gpio_set_output>:
#include "gpio_ext.h"


void gpio_set_output(GPIO_TypeDef *port, uint16_t pin)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403c:	f107 030c 	add.w	r3, r7, #12
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = pin;
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004050:	2301      	movs	r3, #1
 8004052:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8004054:	f107 030c 	add.w	r3, r7, #12
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fc ffd0 	bl	8001000 <HAL_GPIO_Init>
}
 8004060:	bf00      	nop
 8004062:	3720      	adds	r7, #32
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <gpio_set_input>:


void gpio_set_input(GPIO_TypeDef *port, uint16_t pin)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004074:	f107 030c 	add.w	r3, r7, #12
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = pin;
 8004084:	887b      	ldrh	r3, [r7, #2]
 8004086:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800408c:	f107 030c 	add.w	r3, r7, #12
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fc ffb4 	bl	8001000 <HAL_GPIO_Init>
}
 8004098:	bf00      	nop
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040a6:	f7fc fdd7 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040aa:	f000 f853 	bl	8004154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040ae:	f000 f949 	bl	8004344 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80040b2:	f000 f8e7 	bl	8004284 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80040b6:	f000 f915 	bl	80042e4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80040ba:	f000 f8ab 	bl	8004214 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80040be:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <main+0x90>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <main+0x90>)
 80040c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c8:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80040ca:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <main+0x94>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80040d0:	4b18      	ldr	r3, [pc, #96]	; (8004134 <main+0x94>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a17      	ldr	r2, [pc, #92]	; (8004134 <main+0x94>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80040dc:	4816      	ldr	r0, [pc, #88]	; (8004138 <main+0x98>)
 80040de:	f7fe fcb8 	bl	8002a52 <HAL_TIM_Base_Start_IT>

  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nProgram Started\r\n", (uint16_t) strlen("\r\nProgram Started\r\n"), HAL_MAX_DELAY);
 80040e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040e6:	2213      	movs	r2, #19
 80040e8:	4914      	ldr	r1, [pc, #80]	; (800413c <main+0x9c>)
 80040ea:	4815      	ldr	r0, [pc, #84]	; (8004140 <main+0xa0>)
 80040ec:	f7fe ff7f 	bl	8002fee <HAL_UART_Transmit>
  DHT11_sample();
 80040f0:	463b      	mov	r3, r7
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fe12 	bl	8003d1c <DHT11_sample>
  while (ESP8266_wake_up() != ESP_WAKEUP_SUCCESS);
 80040f8:	bf00      	nop
 80040fa:	f000 f9cb 	bl	8004494 <ESP8266_wake_up>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1fa      	bne.n	80040fa <main+0x5a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
      if (new_sample_counter_graph >= COUNTER_NEW_SAMPLE_GRAPH) {
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <main+0xa4>)
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800410c:	d305      	bcc.n	800411a <main+0x7a>
    	  new_sample_counter_graph = 0;
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <main+0xa4>)
 8004110:	2200      	movs	r2, #0
 8004112:	801a      	strh	r2, [r3, #0]
    	  sample_and_post_dht(ENDPOINT_NEW_SAMPLE);
 8004114:	480c      	ldr	r0, [pc, #48]	; (8004148 <main+0xa8>)
 8004116:	f000 f98f 	bl	8004438 <sample_and_post_dht>
      }

      if (sample_counter_live >= COUNTER_NEW_SAMPLE_LIVE) {
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <main+0xac>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b15      	cmp	r3, #21
 8004120:	d9f0      	bls.n	8004104 <main+0x64>
    	  sample_counter_live = 0;
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <main+0xac>)
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
    	  sample_and_post_dht(ENDPOINT_LIVE_SAMPLE);
 8004128:	4809      	ldr	r0, [pc, #36]	; (8004150 <main+0xb0>)
 800412a:	f000 f985 	bl	8004438 <sample_and_post_dht>
      if (new_sample_counter_graph >= COUNTER_NEW_SAMPLE_GRAPH) {
 800412e:	e7e9      	b.n	8004104 <main+0x64>
 8004130:	e000edf0 	.word	0xe000edf0
 8004134:	e0001000 	.word	0xe0001000
 8004138:	20000570 	.word	0x20000570
 800413c:	08006eac 	.word	0x08006eac
 8004140:	200005b0 	.word	0x200005b0
 8004144:	200003f0 	.word	0x200003f0
 8004148:	08006ec0 	.word	0x08006ec0
 800414c:	200003ef 	.word	0x200003ef
 8004150:	08006ecc 	.word	0x08006ecc

08004154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b0a6      	sub	sp, #152	; 0x98
 8004158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800415a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800415e:	2228      	movs	r2, #40	; 0x28
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fd88 	bl	8004c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004168:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	2258      	movs	r2, #88	; 0x58
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fd7a 	bl	8004c78 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004184:	2302      	movs	r3, #2
 8004186:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004188:	2301      	movs	r3, #1
 800418a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800418c:	2310      	movs	r3, #16
 800418e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004192:	2302      	movs	r3, #2
 8004194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80041a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80041a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd f8e2 	bl	800137c <HAL_RCC_OscConfig>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80041be:	f000 fb63 	bl	8004888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041c2:	230f      	movs	r3, #15
 80041c4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041c6:	2302      	movs	r3, #2
 80041c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041ca:	2300      	movs	r3, #0
 80041cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041d4:	2300      	movs	r3, #0
 80041d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80041d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd ffba 	bl	8002158 <HAL_RCC_ClockConfig>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80041ea:	f000 fb4d 	bl	8004888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80041ee:	2306      	movs	r3, #6
 80041f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe f9e1 	bl	80025c4 <HAL_RCCEx_PeriphCLKConfig>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8004208:	f000 fb3e 	bl	8004888 <Error_Handler>
  }
}
 800420c:	bf00      	nop
 800420e:	3798      	adds	r7, #152	; 0x98
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800421a:	1d3b      	adds	r3, r7, #4
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004224:	4b15      	ldr	r3, [pc, #84]	; (800427c <MX_TIM6_Init+0x68>)
 8004226:	4a16      	ldr	r2, [pc, #88]	; (8004280 <MX_TIM6_Init+0x6c>)
 8004228:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 35999;
 800422a:	4b14      	ldr	r3, [pc, #80]	; (800427c <MX_TIM6_Init+0x68>)
 800422c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8004230:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <MX_TIM6_Init+0x68>)
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8004238:	4b10      	ldr	r3, [pc, #64]	; (800427c <MX_TIM6_Init+0x68>)
 800423a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800423e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004240:	4b0e      	ldr	r3, [pc, #56]	; (800427c <MX_TIM6_Init+0x68>)
 8004242:	2200      	movs	r2, #0
 8004244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004246:	480d      	ldr	r0, [pc, #52]	; (800427c <MX_TIM6_Init+0x68>)
 8004248:	f7fe fbd8 	bl	80029fc <HAL_TIM_Base_Init>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004252:	f000 fb19 	bl	8004888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004256:	2320      	movs	r3, #32
 8004258:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800425e:	1d3b      	adds	r3, r7, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4806      	ldr	r0, [pc, #24]	; (800427c <MX_TIM6_Init+0x68>)
 8004264:	f7fe fdf8 	bl	8002e58 <HAL_TIMEx_MasterConfigSynchronization>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800426e:	f000 fb0b 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000570 	.word	0x20000570
 8004280:	40001000 	.word	0x40001000

08004284 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004288:	4b14      	ldr	r3, [pc, #80]	; (80042dc <MX_USART2_UART_Init+0x58>)
 800428a:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <MX_USART2_UART_Init+0x5c>)
 800428c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <MX_USART2_UART_Init+0x58>)
 8004290:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8004294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <MX_USART2_UART_Init+0x58>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800429c:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <MX_USART2_UART_Init+0x58>)
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <MX_USART2_UART_Init+0x58>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <MX_USART2_UART_Init+0x58>)
 80042aa:	220c      	movs	r2, #12
 80042ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <MX_USART2_UART_Init+0x58>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <MX_USART2_UART_Init+0x58>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042ba:	4b08      	ldr	r3, [pc, #32]	; (80042dc <MX_USART2_UART_Init+0x58>)
 80042bc:	2200      	movs	r2, #0
 80042be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <MX_USART2_UART_Init+0x58>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042c6:	4805      	ldr	r0, [pc, #20]	; (80042dc <MX_USART2_UART_Init+0x58>)
 80042c8:	f7fe fe40 	bl	8002f4c <HAL_UART_Init>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80042d2:	f000 fad9 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042d6:	bf00      	nop
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	200005b0 	.word	0x200005b0
 80042e0:	40004400 	.word	0x40004400

080042e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042e8:	4b14      	ldr	r3, [pc, #80]	; (800433c <MX_USART3_UART_Init+0x58>)
 80042ea:	4a15      	ldr	r2, [pc, #84]	; (8004340 <MX_USART3_UART_Init+0x5c>)
 80042ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <MX_USART3_UART_Init+0x58>)
 80042f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <MX_USART3_UART_Init+0x58>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <MX_USART3_UART_Init+0x58>)
 80042fe:	2200      	movs	r2, #0
 8004300:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <MX_USART3_UART_Init+0x58>)
 8004304:	2200      	movs	r2, #0
 8004306:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <MX_USART3_UART_Init+0x58>)
 800430a:	220c      	movs	r2, #12
 800430c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <MX_USART3_UART_Init+0x58>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <MX_USART3_UART_Init+0x58>)
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <MX_USART3_UART_Init+0x58>)
 800431c:	2200      	movs	r2, #0
 800431e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <MX_USART3_UART_Init+0x58>)
 8004322:	2200      	movs	r2, #0
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004326:	4805      	ldr	r0, [pc, #20]	; (800433c <MX_USART3_UART_Init+0x58>)
 8004328:	f7fe fe10 	bl	8002f4c <HAL_UART_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004332:	f000 faa9 	bl	8004888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000404 	.word	0x20000404
 8004340:	40004800 	.word	0x40004800

08004344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	609a      	str	r2, [r3, #8]
 8004356:	60da      	str	r2, [r3, #12]
 8004358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800435a:	4b34      	ldr	r3, [pc, #208]	; (800442c <MX_GPIO_Init+0xe8>)
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4a33      	ldr	r2, [pc, #204]	; (800442c <MX_GPIO_Init+0xe8>)
 8004360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004364:	6153      	str	r3, [r2, #20]
 8004366:	4b31      	ldr	r3, [pc, #196]	; (800442c <MX_GPIO_Init+0xe8>)
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004372:	4b2e      	ldr	r3, [pc, #184]	; (800442c <MX_GPIO_Init+0xe8>)
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	4a2d      	ldr	r2, [pc, #180]	; (800442c <MX_GPIO_Init+0xe8>)
 8004378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800437c:	6153      	str	r3, [r2, #20]
 800437e:	4b2b      	ldr	r3, [pc, #172]	; (800442c <MX_GPIO_Init+0xe8>)
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800438a:	4b28      	ldr	r3, [pc, #160]	; (800442c <MX_GPIO_Init+0xe8>)
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4a27      	ldr	r2, [pc, #156]	; (800442c <MX_GPIO_Init+0xe8>)
 8004390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004394:	6153      	str	r3, [r2, #20]
 8004396:	4b25      	ldr	r3, [pc, #148]	; (800442c <MX_GPIO_Init+0xe8>)
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a2:	4b22      	ldr	r3, [pc, #136]	; (800442c <MX_GPIO_Init+0xe8>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	4a21      	ldr	r2, [pc, #132]	; (800442c <MX_GPIO_Init+0xe8>)
 80043a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ac:	6153      	str	r3, [r2, #20]
 80043ae:	4b1f      	ldr	r3, [pc, #124]	; (800442c <MX_GPIO_Init+0xe8>)
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b6:	607b      	str	r3, [r7, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80043ba:	2200      	movs	r2, #0
 80043bc:	2120      	movs	r1, #32
 80043be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043c2:	f7fc ffc3 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2120      	movs	r1, #32
 80043ca:	4819      	ldr	r0, [pc, #100]	; (8004430 <MX_GPIO_Init+0xec>)
 80043cc:	f7fc ffbe 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80043d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80043d6:	4b17      	ldr	r3, [pc, #92]	; (8004434 <MX_GPIO_Init+0xf0>)
 80043d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80043de:	f107 0314 	add.w	r3, r7, #20
 80043e2:	4619      	mov	r1, r3
 80043e4:	4812      	ldr	r0, [pc, #72]	; (8004430 <MX_GPIO_Init+0xec>)
 80043e6:	f7fc fe0b 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80043ea:	2320      	movs	r3, #32
 80043ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f6:	2300      	movs	r3, #0
 80043f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80043fa:	f107 0314 	add.w	r3, r7, #20
 80043fe:	4619      	mov	r1, r3
 8004400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004404:	f7fc fdfc 	bl	8001000 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8004408:	2320      	movs	r3, #32
 800440a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800440c:	2301      	movs	r3, #1
 800440e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004414:	2300      	movs	r3, #0
 8004416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8004418:	f107 0314 	add.w	r3, r7, #20
 800441c:	4619      	mov	r1, r3
 800441e:	4804      	ldr	r0, [pc, #16]	; (8004430 <MX_GPIO_Init+0xec>)
 8004420:	f7fc fdee 	bl	8001000 <HAL_GPIO_Init>

}
 8004424:	bf00      	nop
 8004426:	3728      	adds	r7, #40	; 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	48000800 	.word	0x48000800
 8004434:	10210000 	.word	0x10210000

08004438 <sample_and_post_dht>:

/**************************************************/
/* USER CODE BEGIN 4 ******************************/
/**************************************************/
void sample_and_post_dht(char *endpoint)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af04      	add	r7, sp, #16
 800443e:	6078      	str	r0, [r7, #4]
	SampleDHT11 sample = DHT11_sample();
 8004440:	f107 030c 	add.w	r3, r7, #12
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fc69 	bl	8003d1c <DHT11_sample>
	DHT11_to_post(post, POST_LENGTH, sample, endpoint, HOST);
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <sample_and_post_dht+0x50>)
 800444c:	9302      	str	r3, [sp, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	f107 030c 	add.w	r3, r7, #12
 800445a:	cb0c      	ldmia	r3, {r2, r3}
 800445c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004460:	480a      	ldr	r0, [pc, #40]	; (800448c <sample_and_post_dht+0x54>)
 8004462:	f7ff fd95 	bl	8003f90 <DHT11_to_post>
	ESP8266_send_data(post, ADDRESS, PORT);
 8004466:	f641 729a 	movw	r2, #8090	; 0x1f9a
 800446a:	4909      	ldr	r1, [pc, #36]	; (8004490 <sample_and_post_dht+0x58>)
 800446c:	4807      	ldr	r0, [pc, #28]	; (800448c <sample_and_post_dht+0x54>)
 800446e:	f000 f8db 	bl	8004628 <ESP8266_send_data>
	memset(post, 0, sizeof post);
 8004472:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004476:	2100      	movs	r1, #0
 8004478:	4804      	ldr	r0, [pc, #16]	; (800448c <sample_and_post_dht+0x54>)
 800447a:	f000 fbfd 	bl	8004c78 <memset>
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	08006ed8 	.word	0x08006ed8
 800448c:	200001f8 	.word	0x200001f8
 8004490:	08006eec 	.word	0x08006eec

08004494 <ESP8266_wake_up>:


uint8_t ESP8266_wake_up()
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&current_rx_byte, 1); // Start Receiving
 8004498:	2201      	movs	r2, #1
 800449a:	4924      	ldr	r1, [pc, #144]	; (800452c <ESP8266_wake_up+0x98>)
 800449c:	4824      	ldr	r0, [pc, #144]	; (8004530 <ESP8266_wake_up+0x9c>)
 800449e:	f7fe fe33 	bl	8003108 <HAL_UART_Receive_IT>
	ESP_answer_clear();
 80044a2:	f000 f967 	bl	8004774 <ESP_answer_clear>

	if (ESP8266_send_cmd(AT, "OK") != AT_OK)
 80044a6:	4923      	ldr	r1, [pc, #140]	; (8004534 <ESP8266_wake_up+0xa0>)
 80044a8:	4823      	ldr	r0, [pc, #140]	; (8004538 <ESP8266_wake_up+0xa4>)
 80044aa:	f000 f913 	bl	80046d4 <ESP8266_send_cmd>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <ESP8266_wake_up+0x2c>
		return ESP8266_AT_command_error(ESP_WAKEUP_FAILURE, "ERROR: AT command failed on device wakeup\r\n");
 80044b4:	4921      	ldr	r1, [pc, #132]	; (800453c <ESP8266_wake_up+0xa8>)
 80044b6:	2001      	movs	r0, #1
 80044b8:	f000 f96c 	bl	8004794 <ESP8266_AT_command_error>
 80044bc:	4603      	mov	r3, r0
 80044be:	e032      	b.n	8004526 <ESP8266_wake_up+0x92>

	if (ESP8266_send_cmd(AT_RST, "ready") != AT_OK)
 80044c0:	491f      	ldr	r1, [pc, #124]	; (8004540 <ESP8266_wake_up+0xac>)
 80044c2:	4820      	ldr	r0, [pc, #128]	; (8004544 <ESP8266_wake_up+0xb0>)
 80044c4:	f000 f906 	bl	80046d4 <ESP8266_send_cmd>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <ESP8266_wake_up+0x46>
		return ESP8266_AT_command_error(ESP_WAKEUP_FAILURE, "ERROR: AT+RST command failed on device wakeup\r\n");
 80044ce:	491e      	ldr	r1, [pc, #120]	; (8004548 <ESP8266_wake_up+0xb4>)
 80044d0:	2001      	movs	r0, #1
 80044d2:	f000 f95f 	bl	8004794 <ESP8266_AT_command_error>
 80044d6:	4603      	mov	r3, r0
 80044d8:	e025      	b.n	8004526 <ESP8266_wake_up+0x92>

	if (ESP8266_send_cmd(ATE0, "OK") != AT_OK)
 80044da:	4916      	ldr	r1, [pc, #88]	; (8004534 <ESP8266_wake_up+0xa0>)
 80044dc:	481b      	ldr	r0, [pc, #108]	; (800454c <ESP8266_wake_up+0xb8>)
 80044de:	f000 f8f9 	bl	80046d4 <ESP8266_send_cmd>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <ESP8266_wake_up+0x60>
		return ESP8266_AT_command_error(ESP_WAKEUP_FAILURE, "ERROR: ATE0 command failed on device wakeup\r\n");
 80044e8:	4919      	ldr	r1, [pc, #100]	; (8004550 <ESP8266_wake_up+0xbc>)
 80044ea:	2001      	movs	r0, #1
 80044ec:	f000 f952 	bl	8004794 <ESP8266_AT_command_error>
 80044f0:	4603      	mov	r3, r0
 80044f2:	e018      	b.n	8004526 <ESP8266_wake_up+0x92>

	if (ESP8266_send_cmd(AT_CIPMUX0, "OK") != AT_OK)
 80044f4:	490f      	ldr	r1, [pc, #60]	; (8004534 <ESP8266_wake_up+0xa0>)
 80044f6:	4817      	ldr	r0, [pc, #92]	; (8004554 <ESP8266_wake_up+0xc0>)
 80044f8:	f000 f8ec 	bl	80046d4 <ESP8266_send_cmd>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <ESP8266_wake_up+0x7a>
		return ESP8266_AT_command_error(ESP_WAKEUP_FAILURE, "ERROR: AT+CIPMUX=0 command failed on device wakeup\r\n");
 8004502:	4915      	ldr	r1, [pc, #84]	; (8004558 <ESP8266_wake_up+0xc4>)
 8004504:	2001      	movs	r0, #1
 8004506:	f000 f945 	bl	8004794 <ESP8266_AT_command_error>
 800450a:	4603      	mov	r3, r0
 800450c:	e00b      	b.n	8004526 <ESP8266_wake_up+0x92>

	if (ESP8266_check_wifi_connection() != AT_OK)
 800450e:	f000 f84b 	bl	80045a8 <ESP8266_check_wifi_connection>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <ESP8266_wake_up+0x90>
		return ESP8266_AT_command_error(ESP_WAKEUP_FAILURE, "ERROR: Cannot connect to SSID on device wakeup\r\n");
 8004518:	4910      	ldr	r1, [pc, #64]	; (800455c <ESP8266_wake_up+0xc8>)
 800451a:	2001      	movs	r0, #1
 800451c:	f000 f93a 	bl	8004794 <ESP8266_AT_command_error>
 8004520:	4603      	mov	r3, r0
 8004522:	e000      	b.n	8004526 <ESP8266_wake_up+0x92>

	return ESP_WAKEUP_SUCCESS;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	200003ec 	.word	0x200003ec
 8004530:	20000404 	.word	0x20000404
 8004534:	08006efc 	.word	0x08006efc
 8004538:	08006f00 	.word	0x08006f00
 800453c:	08006f08 	.word	0x08006f08
 8004540:	08006f34 	.word	0x08006f34
 8004544:	08006f3c 	.word	0x08006f3c
 8004548:	08006f48 	.word	0x08006f48
 800454c:	08006f78 	.word	0x08006f78
 8004550:	08006f80 	.word	0x08006f80
 8004554:	08006fb0 	.word	0x08006fb0
 8004558:	08006fc0 	.word	0x08006fc0
 800455c:	08006ff8 	.word	0x08006ff8

08004560 <ESP8266_open_tcp_port>:


uint8_t ESP8266_open_tcp_port()
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
	if (ESP8266_check_wifi_connection() != AT_OK)
 8004564:	f000 f820 	bl	80045a8 <ESP8266_check_wifi_connection>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <ESP8266_open_tcp_port+0x12>
		return AT_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e010      	b.n	8004594 <ESP8266_open_tcp_port+0x34>

	if (ESP8266_send_cmd(AT_CIPSTATUS, ADDRESS) != AT_OK) {
 8004572:	4909      	ldr	r1, [pc, #36]	; (8004598 <ESP8266_open_tcp_port+0x38>)
 8004574:	4809      	ldr	r0, [pc, #36]	; (800459c <ESP8266_open_tcp_port+0x3c>)
 8004576:	f000 f8ad 	bl	80046d4 <ESP8266_send_cmd>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <ESP8266_open_tcp_port+0x32>
		if (ESP8266_send_cmd(AT_CIPSTART_TCP, "OK") != AT_OK)
 8004580:	4907      	ldr	r1, [pc, #28]	; (80045a0 <ESP8266_open_tcp_port+0x40>)
 8004582:	4808      	ldr	r0, [pc, #32]	; (80045a4 <ESP8266_open_tcp_port+0x44>)
 8004584:	f000 f8a6 	bl	80046d4 <ESP8266_send_cmd>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <ESP8266_open_tcp_port+0x32>
			return AT_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <ESP8266_open_tcp_port+0x34>
	}

	return AT_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	08006eec 	.word	0x08006eec
 800459c:	0800702c 	.word	0x0800702c
 80045a0:	08006efc 	.word	0x08006efc
 80045a4:	0800703c 	.word	0x0800703c

080045a8 <ESP8266_check_wifi_connection>:


uint8_t ESP8266_check_wifi_connection()
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
	if (ESP8266_send_cmd(AT_CIFSR, "192.168") != AT_OK) {
 80045ac:	4916      	ldr	r1, [pc, #88]	; (8004608 <ESP8266_check_wifi_connection+0x60>)
 80045ae:	4817      	ldr	r0, [pc, #92]	; (800460c <ESP8266_check_wifi_connection+0x64>)
 80045b0:	f000 f890 	bl	80046d4 <ESP8266_send_cmd>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d01c      	beq.n	80045f4 <ESP8266_check_wifi_connection+0x4c>
		if (ESP8266_send_cmd(AT, "OK") != AT_OK)
 80045ba:	4915      	ldr	r1, [pc, #84]	; (8004610 <ESP8266_check_wifi_connection+0x68>)
 80045bc:	4815      	ldr	r0, [pc, #84]	; (8004614 <ESP8266_check_wifi_connection+0x6c>)
 80045be:	f000 f889 	bl	80046d4 <ESP8266_send_cmd>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <ESP8266_check_wifi_connection+0x2c>
			while (ESP8266_wake_up() != ESP_WAKEUP_SUCCESS);
 80045c8:	bf00      	nop
 80045ca:	f7ff ff63 	bl	8004494 <ESP8266_wake_up>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1fa      	bne.n	80045ca <ESP8266_check_wifi_connection+0x22>

		if (ESP8266_send_cmd(AT_CWJAP, "WIFI GOT IP") != AT_OK)
 80045d4:	4910      	ldr	r1, [pc, #64]	; (8004618 <ESP8266_check_wifi_connection+0x70>)
 80045d6:	4811      	ldr	r0, [pc, #68]	; (800461c <ESP8266_check_wifi_connection+0x74>)
 80045d8:	f000 f87c 	bl	80046d4 <ESP8266_send_cmd>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <ESP8266_check_wifi_connection+0x3e>
			return AT_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e00d      	b.n	8004602 <ESP8266_check_wifi_connection+0x5a>

		HAL_UART_Transmit(&huart2, (uint8_t*)WIFI_UP, (uint16_t) strlen(WIFI_UP), HAL_MAX_DELAY);
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ea:	221d      	movs	r2, #29
 80045ec:	490c      	ldr	r1, [pc, #48]	; (8004620 <ESP8266_check_wifi_connection+0x78>)
 80045ee:	480d      	ldr	r0, [pc, #52]	; (8004624 <ESP8266_check_wifi_connection+0x7c>)
 80045f0:	f7fe fcfd 	bl	8002fee <HAL_UART_Transmit>
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0x0);
 80045f4:	2200      	movs	r2, #0
 80045f6:	2120      	movs	r1, #32
 80045f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045fc:	f7fc fea6 	bl	800134c <HAL_GPIO_WritePin>
	return AT_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	08007068 	.word	0x08007068
 800460c:	08007070 	.word	0x08007070
 8004610:	08006efc 	.word	0x08006efc
 8004614:	08006f00 	.word	0x08006f00
 8004618:	0800707c 	.word	0x0800707c
 800461c:	08007088 	.word	0x08007088
 8004620:	080070b4 	.word	0x080070b4
 8004624:	200005b0 	.word	0x200005b0

08004628 <ESP8266_send_data>:


uint8_t ESP8266_send_data(const char *data, const char *address, uint16_t port)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	; 0x28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	4613      	mov	r3, r2
 8004634:	80fb      	strh	r3, [r7, #6]
	if (ESP8266_open_tcp_port() != AT_OK)
 8004636:	f7ff ff93 	bl	8004560 <ESP8266_open_tcp_port>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <ESP8266_send_data+0x24>
		return ESP8266_AT_command_error(ESP_WAKEUP_FAILURE, TCP_CONNECTION_FAILED);
 8004640:	491e      	ldr	r1, [pc, #120]	; (80046bc <ESP8266_send_data+0x94>)
 8004642:	2001      	movs	r0, #1
 8004644:	f000 f8a6 	bl	8004794 <ESP8266_AT_command_error>
 8004648:	4603      	mov	r3, r0
 800464a:	e033      	b.n	80046b4 <ESP8266_send_data+0x8c>

	uint8_t is_data_sent = DATA_NOT_SENT;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t len = strlen(data);
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7fb fdc4 	bl	80001e0 <strlen>
 8004658:	4603      	mov	r3, r0
 800465a:	84bb      	strh	r3, [r7, #36]	; 0x24
	char msg[20] = "";
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	609a      	str	r2, [r3, #8]
 800466c:	60da      	str	r2, [r3, #12]
	sprintf(msg, "AT+CIPSEND=%d\r\n", len);
 800466e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004670:	f107 0310 	add.w	r3, r7, #16
 8004674:	4912      	ldr	r1, [pc, #72]	; (80046c0 <ESP8266_send_data+0x98>)
 8004676:	4618      	mov	r0, r3
 8004678:	f000 ff96 	bl	80055a8 <siprintf>

	if (ESP8266_send_cmd(msg, ">") == AT_OK) {
 800467c:	f107 0310 	add.w	r3, r7, #16
 8004680:	4910      	ldr	r1, [pc, #64]	; (80046c4 <ESP8266_send_data+0x9c>)
 8004682:	4618      	mov	r0, r3
 8004684:	f000 f826 	bl	80046d4 <ESP8266_send_cmd>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d110      	bne.n	80046b0 <ESP8266_send_data+0x88>
		is_data_sent = DATA_SENT;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_UART_Transmit(&huart3, (uint8_t*)data, len, HAL_MAX_DELAY);
 8004694:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800469a:	68f9      	ldr	r1, [r7, #12]
 800469c:	480a      	ldr	r0, [pc, #40]	; (80046c8 <ESP8266_send_data+0xa0>)
 800469e:	f7fe fca6 	bl	8002fee <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Data sent\r\n", (uint16_t) strlen("Data sent\r\n"), HAL_MAX_DELAY);
 80046a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046a6:	220b      	movs	r2, #11
 80046a8:	4908      	ldr	r1, [pc, #32]	; (80046cc <ESP8266_send_data+0xa4>)
 80046aa:	4809      	ldr	r0, [pc, #36]	; (80046d0 <ESP8266_send_data+0xa8>)
 80046ac:	f7fe fc9f 	bl	8002fee <HAL_UART_Transmit>
	}

	return is_data_sent;
 80046b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3728      	adds	r7, #40	; 0x28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	080070d4 	.word	0x080070d4
 80046c0:	080070f4 	.word	0x080070f4
 80046c4:	08007104 	.word	0x08007104
 80046c8:	20000404 	.word	0x20000404
 80046cc:	08007108 	.word	0x08007108
 80046d0:	200005b0 	.word	0x200005b0

080046d4 <ESP8266_send_cmd>:


uint8_t ESP8266_send_cmd(const char *cmd, const char *examcode)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)cmd, (uint16_t) strlen(cmd), HAL_MAX_DELAY);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fb fd7e 	bl	80001e0 <strlen>
 80046e4:	4603      	mov	r3, r0
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4808      	ldr	r0, [pc, #32]	; (8004710 <ESP8266_send_cmd+0x3c>)
 80046f0:	f7fe fc7d 	bl	8002fee <HAL_UART_Transmit>
	uint8_t at_state = ESP8266_AT_check_response(examcode, 10);
 80046f4:	210a      	movs	r1, #10
 80046f6:	6838      	ldr	r0, [r7, #0]
 80046f8:	f000 f80c 	bl	8004714 <ESP8266_AT_check_response>
 80046fc:	4603      	mov	r3, r0
 80046fe:	73fb      	strb	r3, [r7, #15]
	ESP_answer_clear();
 8004700:	f000 f838 	bl	8004774 <ESP_answer_clear>
	return at_state;
 8004704:	7bfb      	ldrb	r3, [r7, #15]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000404 	.word	0x20000404

08004714 <ESP8266_AT_check_response>:


uint8_t ESP8266_AT_check_response(char const *expected_text, uint16_t delay_s)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	807b      	strh	r3, [r7, #2]
	uint8_t counter = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	73fb      	strb	r3, [r7, #15]
	while (counter++ < delay_s) {
 8004724:	e00c      	b.n	8004740 <ESP8266_AT_check_response+0x2c>
		if (strstr((char*)ESP_answer, expected_text) != NULL)
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4810      	ldr	r0, [pc, #64]	; (800476c <ESP8266_AT_check_response+0x58>)
 800472a:	f000 ff5d 	bl	80055e8 <strstr>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <ESP8266_AT_check_response+0x24>
			return AT_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e014      	b.n	8004762 <ESP8266_AT_check_response+0x4e>

		HAL_Delay(1000);
 8004738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800473c:	f7fc faf2 	bl	8000d24 <HAL_Delay>
	while (counter++ < delay_s) {
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	73fa      	strb	r2, [r7, #15]
 8004746:	b29b      	uxth	r3, r3
 8004748:	887a      	ldrh	r2, [r7, #2]
 800474a:	429a      	cmp	r2, r3
 800474c:	d8eb      	bhi.n	8004726 <ESP8266_AT_check_response+0x12>
	}

	if (strstr((char*)ESP_answer, "ERROR") != NULL)
 800474e:	4908      	ldr	r1, [pc, #32]	; (8004770 <ESP8266_AT_check_response+0x5c>)
 8004750:	4806      	ldr	r0, [pc, #24]	; (800476c <ESP8266_AT_check_response+0x58>)
 8004752:	f000 ff49 	bl	80055e8 <strstr>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <ESP8266_AT_check_response+0x4c>
		return AT_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <ESP8266_AT_check_response+0x4e>
	return AT_TIMEOUT;
 8004760:	2302      	movs	r3, #2
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000474 	.word	0x20000474
 8004770:	08007114 	.word	0x08007114

08004774 <ESP_answer_clear>:


void ESP_answer_clear()
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
	memset(ESP_answer, 0, sizeof ESP_answer);
 8004778:	22fa      	movs	r2, #250	; 0xfa
 800477a:	2100      	movs	r1, #0
 800477c:	4803      	ldr	r0, [pc, #12]	; (800478c <ESP_answer_clear+0x18>)
 800477e:	f000 fa7b 	bl	8004c78 <memset>
	ESP_answer_write_point = 0;
 8004782:	4b03      	ldr	r3, [pc, #12]	; (8004790 <ESP_answer_clear+0x1c>)
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
}
 8004788:	bf00      	nop
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000474 	.word	0x20000474
 8004790:	200003ed 	.word	0x200003ed

08004794 <ESP8266_AT_command_error>:


uint8_t ESP8266_AT_command_error(uint8_t error_val, char *message)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	6039      	str	r1, [r7, #0]
 800479e:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, (uint16_t) strlen(message), HAL_MAX_DELAY);
 80047a0:	6838      	ldr	r0, [r7, #0]
 80047a2:	f7fb fd1d 	bl	80001e0 <strlen>
 80047a6:	4603      	mov	r3, r0
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	4806      	ldr	r0, [pc, #24]	; (80047cc <ESP8266_AT_command_error+0x38>)
 80047b2:	f7fe fc1c 	bl	8002fee <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0x1);
 80047b6:	2201      	movs	r2, #1
 80047b8:	2120      	movs	r1, #32
 80047ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047be:	f7fc fdc5 	bl	800134c <HAL_GPIO_WritePin>
	return error_val;
 80047c2:	79fb      	ldrb	r3, [r7, #7]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	200005b0 	.word	0x200005b0

080047d0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a13      	ldr	r2, [pc, #76]	; (800482c <HAL_UART_RxCpltCallback+0x5c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d11f      	bne.n	8004822 <HAL_UART_RxCpltCallback+0x52>
		ESP_answer[ESP_answer_write_point] = current_rx_byte;
 80047e2:	4b13      	ldr	r3, [pc, #76]	; (8004830 <HAL_UART_RxCpltCallback+0x60>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_UART_RxCpltCallback+0x64>)
 80047ea:	7819      	ldrb	r1, [r3, #0]
 80047ec:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_UART_RxCpltCallback+0x68>)
 80047ee:	5499      	strb	r1, [r3, r2]
		if (ESP_answer_write_point < MAX_ANSWER_LENGTH - 1)
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <HAL_UART_RxCpltCallback+0x60>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2bf8      	cmp	r3, #248	; 0xf8
 80047f6:	d806      	bhi.n	8004806 <HAL_UART_RxCpltCallback+0x36>
			ESP_answer_write_point++;
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <HAL_UART_RxCpltCallback+0x60>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	3301      	adds	r3, #1
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_UART_RxCpltCallback+0x60>)
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e002      	b.n	800480c <HAL_UART_RxCpltCallback+0x3c>
		else
			ESP_answer_write_point = 0;
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_UART_RxCpltCallback+0x60>)
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]

		ESP_TotalReadByteCounter++;
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_UART_RxCpltCallback+0x6c>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	b2da      	uxtb	r2, r3
 8004814:	4b09      	ldr	r3, [pc, #36]	; (800483c <HAL_UART_RxCpltCallback+0x6c>)
 8004816:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t*)&current_rx_byte, 1);
 8004818:	2201      	movs	r2, #1
 800481a:	4906      	ldr	r1, [pc, #24]	; (8004834 <HAL_UART_RxCpltCallback+0x64>)
 800481c:	4808      	ldr	r0, [pc, #32]	; (8004840 <HAL_UART_RxCpltCallback+0x70>)
 800481e:	f7fe fc73 	bl	8003108 <HAL_UART_Receive_IT>
	}
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40004800 	.word	0x40004800
 8004830:	200003ed 	.word	0x200003ed
 8004834:	200003ec 	.word	0x200003ec
 8004838:	20000474 	.word	0x20000474
 800483c:	200003ee 	.word	0x200003ee
 8004840:	20000404 	.word	0x20000404

08004844 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0a      	ldr	r2, [pc, #40]	; (800487c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d10b      	bne.n	800486e <HAL_TIM_PeriodElapsedCallback+0x2a>
		new_sample_counter_graph++;
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8004860:	801a      	strh	r2, [r3, #0]
		sample_counter_live++;
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	3301      	adds	r3, #1
 8004868:	b2da      	uxtb	r2, r3
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800486c:	701a      	strb	r2, [r3, #0]
	}
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40001000 	.word	0x40001000
 8004880:	200003f0 	.word	0x200003f0
 8004884:	200003ef 	.word	0x200003ef

08004888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <HAL_MspInit+0x44>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	4a0e      	ldr	r2, [pc, #56]	; (80048dc <HAL_MspInit+0x44>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	6193      	str	r3, [r2, #24]
 80048aa:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <HAL_MspInit+0x44>)
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_MspInit+0x44>)
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	4a08      	ldr	r2, [pc, #32]	; (80048dc <HAL_MspInit+0x44>)
 80048bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c0:	61d3      	str	r3, [r2, #28]
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_MspInit+0x44>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80048ce:	2007      	movs	r0, #7
 80048d0:	f7fc fb16 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000

080048e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a0d      	ldr	r2, [pc, #52]	; (8004924 <HAL_TIM_Base_MspInit+0x44>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d113      	bne.n	800491a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <HAL_TIM_Base_MspInit+0x48>)
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	4a0c      	ldr	r2, [pc, #48]	; (8004928 <HAL_TIM_Base_MspInit+0x48>)
 80048f8:	f043 0310 	orr.w	r3, r3, #16
 80048fc:	61d3      	str	r3, [r2, #28]
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <HAL_TIM_Base_MspInit+0x48>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800490a:	2200      	movs	r2, #0
 800490c:	2100      	movs	r1, #0
 800490e:	2036      	movs	r0, #54	; 0x36
 8004910:	f7fc fb01 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004914:	2036      	movs	r0, #54	; 0x36
 8004916:	f7fc fb1a 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40001000 	.word	0x40001000
 8004928:	40021000 	.word	0x40021000

0800492c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08c      	sub	sp, #48	; 0x30
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004934:	f107 031c 	add.w	r3, r7, #28
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a33      	ldr	r2, [pc, #204]	; (8004a18 <HAL_UART_MspInit+0xec>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d129      	bne.n	80049a2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800494e:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	4a32      	ldr	r2, [pc, #200]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 8004954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004958:	61d3      	str	r3, [r2, #28]
 800495a:	4b30      	ldr	r3, [pc, #192]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004966:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4a2c      	ldr	r2, [pc, #176]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 800496c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004970:	6153      	str	r3, [r2, #20]
 8004972:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800497e:	230c      	movs	r3, #12
 8004980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004982:	2302      	movs	r3, #2
 8004984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004986:	2300      	movs	r3, #0
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498a:	2300      	movs	r3, #0
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800498e:	2307      	movs	r3, #7
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004992:	f107 031c 	add.w	r3, r7, #28
 8004996:	4619      	mov	r1, r3
 8004998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800499c:	f7fc fb30 	bl	8001000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049a0:	e035      	b.n	8004a0e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1e      	ldr	r2, [pc, #120]	; (8004a20 <HAL_UART_MspInit+0xf4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d130      	bne.n	8004a0e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 80049b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b6:	61d3      	str	r3, [r2, #28]
 80049b8:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c4:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 80049ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ce:	6153      	str	r3, [r2, #20]
 80049d0:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <HAL_UART_MspInit+0xf0>)
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80049dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80049e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e2:	2302      	movs	r3, #2
 80049e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049ea:	2303      	movs	r3, #3
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049ee:	2307      	movs	r3, #7
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049f2:	f107 031c 	add.w	r3, r7, #28
 80049f6:	4619      	mov	r1, r3
 80049f8:	480a      	ldr	r0, [pc, #40]	; (8004a24 <HAL_UART_MspInit+0xf8>)
 80049fa:	f7fc fb01 	bl	8001000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80049fe:	2200      	movs	r2, #0
 8004a00:	2100      	movs	r1, #0
 8004a02:	2027      	movs	r0, #39	; 0x27
 8004a04:	f7fc fa87 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004a08:	2027      	movs	r0, #39	; 0x27
 8004a0a:	f7fc faa0 	bl	8000f4e <HAL_NVIC_EnableIRQ>
}
 8004a0e:	bf00      	nop
 8004a10:	3730      	adds	r7, #48	; 0x30
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40004400 	.word	0x40004400
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40004800 	.word	0x40004800
 8004a24:	48000400 	.word	0x48000400

08004a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a36:	b480      	push	{r7}
 8004a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a3a:	e7fe      	b.n	8004a3a <HardFault_Handler+0x4>

08004a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a40:	e7fe      	b.n	8004a40 <MemManage_Handler+0x4>

08004a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a46:	e7fe      	b.n	8004a46 <BusFault_Handler+0x4>

08004a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a4c:	e7fe      	b.n	8004a4c <UsageFault_Handler+0x4>

08004a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a7c:	f7fc f932 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a80:	bf00      	nop
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004a88:	4802      	ldr	r0, [pc, #8]	; (8004a94 <USART3_IRQHandler+0x10>)
 8004a8a:	f7fe fbc5 	bl	8003218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000404 	.word	0x20000404

08004a98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <TIM6_DAC_IRQHandler+0x10>)
 8004a9e:	f7fd fff3 	bl	8002a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000570 	.word	0x20000570

08004aac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ab4:	4b11      	ldr	r3, [pc, #68]	; (8004afc <_sbrk+0x50>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <_sbrk+0x16>
		heap_end = &end;
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <_sbrk+0x50>)
 8004abe:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <_sbrk+0x54>)
 8004ac0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <_sbrk+0x50>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <_sbrk+0x50>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4413      	add	r3, r2
 8004ad0:	466a      	mov	r2, sp
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d907      	bls.n	8004ae6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004ad6:	f000 f8a5 	bl	8004c24 <__errno>
 8004ada:	4602      	mov	r2, r0
 8004adc:	230c      	movs	r3, #12
 8004ade:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ae4:	e006      	b.n	8004af4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <_sbrk+0x50>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4413      	add	r3, r2
 8004aee:	4a03      	ldr	r2, [pc, #12]	; (8004afc <_sbrk+0x50>)
 8004af0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004af2:	68fb      	ldr	r3, [r7, #12]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	200003f4 	.word	0x200003f4
 8004b00:	20000628 	.word	0x20000628

08004b04 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b08:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <SystemInit+0x84>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <SystemInit+0x84>)
 8004b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004b18:	4b1c      	ldr	r3, [pc, #112]	; (8004b8c <SystemInit+0x88>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <SystemInit+0x88>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <SystemInit+0x88>)
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	4918      	ldr	r1, [pc, #96]	; (8004b8c <SystemInit+0x88>)
 8004b2a:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <SystemInit+0x8c>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004b30:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <SystemInit+0x88>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <SystemInit+0x88>)
 8004b36:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b40:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <SystemInit+0x88>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <SystemInit+0x88>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <SystemInit+0x88>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <SystemInit+0x88>)
 8004b52:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004b56:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <SystemInit+0x88>)
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	4a0b      	ldr	r2, [pc, #44]	; (8004b8c <SystemInit+0x88>)
 8004b5e:	f023 030f 	bic.w	r3, r3, #15
 8004b62:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <SystemInit+0x88>)
 8004b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b68:	4908      	ldr	r1, [pc, #32]	; (8004b8c <SystemInit+0x88>)
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <SystemInit+0x90>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <SystemInit+0x88>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b76:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <SystemInit+0x84>)
 8004b78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b7c:	609a      	str	r2, [r3, #8]
#endif
}
 8004b7e:	bf00      	nop
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	f87fc00c 	.word	0xf87fc00c
 8004b94:	ff00fccc 	.word	0xff00fccc

08004b98 <delay_us>:

#pragma GCC push_options
#pragma GCC optimize ("O3")
void delay_us(uint32_t us)
{
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <delay_us+0x2c>)
 8004b9a:	490b      	ldr	r1, [pc, #44]	; (8004bc8 <delay_us+0x30>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
	volatile uint32_t start = DWT->CYCCNT;
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <delay_us+0x34>)
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8004ba0:	fba1 1202 	umull	r1, r2, r1, r2
{
 8004ba4:	b082      	sub	sp, #8
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8004ba6:	0c92      	lsrs	r2, r2, #18
 8004ba8:	fb00 f002 	mul.w	r0, r0, r2
 8004bac:	9000      	str	r0, [sp, #0]
	volatile uint32_t start = DWT->CYCCNT;
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	9201      	str	r2, [sp, #4]
	while (DWT->CYCCNT - start < cycles);
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	6843      	ldr	r3, [r0, #4]
 8004bb6:	9901      	ldr	r1, [sp, #4]
 8004bb8:	9a00      	ldr	r2, [sp, #0]
 8004bba:	1a5b      	subs	r3, r3, r1
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d3f9      	bcc.n	8004bb4 <delay_us+0x1c>
}
 8004bc0:	b002      	add	sp, #8
 8004bc2:	4770      	bx	lr
 8004bc4:	20000008 	.word	0x20000008
 8004bc8:	431bde83 	.word	0x431bde83
 8004bcc:	e0001000 	.word	0xe0001000

08004bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004bd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004bd6:	e003      	b.n	8004be0 <LoopCopyDataInit>

08004bd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004bda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004bdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004bde:	3104      	adds	r1, #4

08004be0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004be0:	480b      	ldr	r0, [pc, #44]	; (8004c10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004be4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004be6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004be8:	d3f6      	bcc.n	8004bd8 <CopyDataInit>
	ldr	r2, =_sbss
 8004bea:	4a0b      	ldr	r2, [pc, #44]	; (8004c18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004bec:	e002      	b.n	8004bf4 <LoopFillZerobss>

08004bee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004bee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004bf0:	f842 3b04 	str.w	r3, [r2], #4

08004bf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <LoopForever+0x16>)
	cmp	r2, r3
 8004bf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004bf8:	d3f9      	bcc.n	8004bee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004bfa:	f7ff ff83 	bl	8004b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bfe:	f000 f817 	bl	8004c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c02:	f7ff fa4d 	bl	80040a0 <main>

08004c06 <LoopForever>:

LoopForever:
    b LoopForever
 8004c06:	e7fe      	b.n	8004c06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c08:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004c0c:	080073b8 	.word	0x080073b8
	ldr	r0, =_sdata
 8004c10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004c14:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8004c18:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8004c1c:	20000624 	.word	0x20000624

08004c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c20:	e7fe      	b.n	8004c20 <ADC1_2_IRQHandler>
	...

08004c24 <__errno>:
 8004c24:	4b01      	ldr	r3, [pc, #4]	; (8004c2c <__errno+0x8>)
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	2000000c 	.word	0x2000000c

08004c30 <__libc_init_array>:
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	4e0d      	ldr	r6, [pc, #52]	; (8004c68 <__libc_init_array+0x38>)
 8004c34:	4c0d      	ldr	r4, [pc, #52]	; (8004c6c <__libc_init_array+0x3c>)
 8004c36:	1ba4      	subs	r4, r4, r6
 8004c38:	10a4      	asrs	r4, r4, #2
 8004c3a:	2500      	movs	r5, #0
 8004c3c:	42a5      	cmp	r5, r4
 8004c3e:	d109      	bne.n	8004c54 <__libc_init_array+0x24>
 8004c40:	4e0b      	ldr	r6, [pc, #44]	; (8004c70 <__libc_init_array+0x40>)
 8004c42:	4c0c      	ldr	r4, [pc, #48]	; (8004c74 <__libc_init_array+0x44>)
 8004c44:	f002 f8ac 	bl	8006da0 <_init>
 8004c48:	1ba4      	subs	r4, r4, r6
 8004c4a:	10a4      	asrs	r4, r4, #2
 8004c4c:	2500      	movs	r5, #0
 8004c4e:	42a5      	cmp	r5, r4
 8004c50:	d105      	bne.n	8004c5e <__libc_init_array+0x2e>
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c58:	4798      	blx	r3
 8004c5a:	3501      	adds	r5, #1
 8004c5c:	e7ee      	b.n	8004c3c <__libc_init_array+0xc>
 8004c5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c62:	4798      	blx	r3
 8004c64:	3501      	adds	r5, #1
 8004c66:	e7f2      	b.n	8004c4e <__libc_init_array+0x1e>
 8004c68:	080073b0 	.word	0x080073b0
 8004c6c:	080073b0 	.word	0x080073b0
 8004c70:	080073b0 	.word	0x080073b0
 8004c74:	080073b4 	.word	0x080073b4

08004c78 <memset>:
 8004c78:	4402      	add	r2, r0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d100      	bne.n	8004c82 <memset+0xa>
 8004c80:	4770      	bx	lr
 8004c82:	f803 1b01 	strb.w	r1, [r3], #1
 8004c86:	e7f9      	b.n	8004c7c <memset+0x4>

08004c88 <__cvt>:
 8004c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	ec55 4b10 	vmov	r4, r5, d0
 8004c90:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004c92:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c96:	2d00      	cmp	r5, #0
 8004c98:	460e      	mov	r6, r1
 8004c9a:	4691      	mov	r9, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	bfb8      	it	lt
 8004ca0:	4622      	movlt	r2, r4
 8004ca2:	462b      	mov	r3, r5
 8004ca4:	f027 0720 	bic.w	r7, r7, #32
 8004ca8:	bfbb      	ittet	lt
 8004caa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004cae:	461d      	movlt	r5, r3
 8004cb0:	2300      	movge	r3, #0
 8004cb2:	232d      	movlt	r3, #45	; 0x2d
 8004cb4:	bfb8      	it	lt
 8004cb6:	4614      	movlt	r4, r2
 8004cb8:	2f46      	cmp	r7, #70	; 0x46
 8004cba:	700b      	strb	r3, [r1, #0]
 8004cbc:	d004      	beq.n	8004cc8 <__cvt+0x40>
 8004cbe:	2f45      	cmp	r7, #69	; 0x45
 8004cc0:	d100      	bne.n	8004cc4 <__cvt+0x3c>
 8004cc2:	3601      	adds	r6, #1
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	e000      	b.n	8004cca <__cvt+0x42>
 8004cc8:	2103      	movs	r1, #3
 8004cca:	ab03      	add	r3, sp, #12
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	ab02      	add	r3, sp, #8
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	4653      	mov	r3, sl
 8004cd6:	ec45 4b10 	vmov	d0, r4, r5
 8004cda:	f000 fd2d 	bl	8005738 <_dtoa_r>
 8004cde:	2f47      	cmp	r7, #71	; 0x47
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	d102      	bne.n	8004cea <__cvt+0x62>
 8004ce4:	f019 0f01 	tst.w	r9, #1
 8004ce8:	d026      	beq.n	8004d38 <__cvt+0xb0>
 8004cea:	2f46      	cmp	r7, #70	; 0x46
 8004cec:	eb08 0906 	add.w	r9, r8, r6
 8004cf0:	d111      	bne.n	8004d16 <__cvt+0x8e>
 8004cf2:	f898 3000 	ldrb.w	r3, [r8]
 8004cf6:	2b30      	cmp	r3, #48	; 0x30
 8004cf8:	d10a      	bne.n	8004d10 <__cvt+0x88>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	4620      	mov	r0, r4
 8004d00:	4629      	mov	r1, r5
 8004d02:	f7fb fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d06:	b918      	cbnz	r0, 8004d10 <__cvt+0x88>
 8004d08:	f1c6 0601 	rsb	r6, r6, #1
 8004d0c:	f8ca 6000 	str.w	r6, [sl]
 8004d10:	f8da 3000 	ldr.w	r3, [sl]
 8004d14:	4499      	add	r9, r3
 8004d16:	2200      	movs	r2, #0
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	f7fb fedb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d22:	b938      	cbnz	r0, 8004d34 <__cvt+0xac>
 8004d24:	2230      	movs	r2, #48	; 0x30
 8004d26:	9b03      	ldr	r3, [sp, #12]
 8004d28:	454b      	cmp	r3, r9
 8004d2a:	d205      	bcs.n	8004d38 <__cvt+0xb0>
 8004d2c:	1c59      	adds	r1, r3, #1
 8004d2e:	9103      	str	r1, [sp, #12]
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e7f8      	b.n	8004d26 <__cvt+0x9e>
 8004d34:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d38:	9b03      	ldr	r3, [sp, #12]
 8004d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d3c:	eba3 0308 	sub.w	r3, r3, r8
 8004d40:	4640      	mov	r0, r8
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	b004      	add	sp, #16
 8004d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004d4a <__exponent>:
 8004d4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	4604      	mov	r4, r0
 8004d50:	bfba      	itte	lt
 8004d52:	4249      	neglt	r1, r1
 8004d54:	232d      	movlt	r3, #45	; 0x2d
 8004d56:	232b      	movge	r3, #43	; 0x2b
 8004d58:	2909      	cmp	r1, #9
 8004d5a:	f804 2b02 	strb.w	r2, [r4], #2
 8004d5e:	7043      	strb	r3, [r0, #1]
 8004d60:	dd20      	ble.n	8004da4 <__exponent+0x5a>
 8004d62:	f10d 0307 	add.w	r3, sp, #7
 8004d66:	461f      	mov	r7, r3
 8004d68:	260a      	movs	r6, #10
 8004d6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d6e:	fb06 1115 	mls	r1, r6, r5, r1
 8004d72:	3130      	adds	r1, #48	; 0x30
 8004d74:	2d09      	cmp	r5, #9
 8004d76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d7a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004d7e:	4629      	mov	r1, r5
 8004d80:	dc09      	bgt.n	8004d96 <__exponent+0x4c>
 8004d82:	3130      	adds	r1, #48	; 0x30
 8004d84:	3b02      	subs	r3, #2
 8004d86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d8a:	42bb      	cmp	r3, r7
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	d304      	bcc.n	8004d9a <__exponent+0x50>
 8004d90:	1a10      	subs	r0, r2, r0
 8004d92:	b003      	add	sp, #12
 8004d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d96:	4613      	mov	r3, r2
 8004d98:	e7e7      	b.n	8004d6a <__exponent+0x20>
 8004d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d9e:	f804 2b01 	strb.w	r2, [r4], #1
 8004da2:	e7f2      	b.n	8004d8a <__exponent+0x40>
 8004da4:	2330      	movs	r3, #48	; 0x30
 8004da6:	4419      	add	r1, r3
 8004da8:	7083      	strb	r3, [r0, #2]
 8004daa:	1d02      	adds	r2, r0, #4
 8004dac:	70c1      	strb	r1, [r0, #3]
 8004dae:	e7ef      	b.n	8004d90 <__exponent+0x46>

08004db0 <_printf_float>:
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	b08d      	sub	sp, #52	; 0x34
 8004db6:	460c      	mov	r4, r1
 8004db8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004dbc:	4616      	mov	r6, r2
 8004dbe:	461f      	mov	r7, r3
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	f001 fa71 	bl	80062a8 <_localeconv_r>
 8004dc6:	6803      	ldr	r3, [r0, #0]
 8004dc8:	9304      	str	r3, [sp, #16]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fb fa08 	bl	80001e0 <strlen>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	930a      	str	r3, [sp, #40]	; 0x28
 8004dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd8:	9005      	str	r0, [sp, #20]
 8004dda:	3307      	adds	r3, #7
 8004ddc:	f023 0307 	bic.w	r3, r3, #7
 8004de0:	f103 0208 	add.w	r2, r3, #8
 8004de4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004de8:	f8d4 b000 	ldr.w	fp, [r4]
 8004dec:	f8c8 2000 	str.w	r2, [r8]
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004df8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004dfc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e00:	9307      	str	r3, [sp, #28]
 8004e02:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e0a:	4ba7      	ldr	r3, [pc, #668]	; (80050a8 <_printf_float+0x2f8>)
 8004e0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e10:	f7fb fe94 	bl	8000b3c <__aeabi_dcmpun>
 8004e14:	bb70      	cbnz	r0, 8004e74 <_printf_float+0xc4>
 8004e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e1a:	4ba3      	ldr	r3, [pc, #652]	; (80050a8 <_printf_float+0x2f8>)
 8004e1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e20:	f7fb fe6e 	bl	8000b00 <__aeabi_dcmple>
 8004e24:	bb30      	cbnz	r0, 8004e74 <_printf_float+0xc4>
 8004e26:	2200      	movs	r2, #0
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	f7fb fe5d 	bl	8000aec <__aeabi_dcmplt>
 8004e32:	b110      	cbz	r0, 8004e3a <_printf_float+0x8a>
 8004e34:	232d      	movs	r3, #45	; 0x2d
 8004e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e3a:	4a9c      	ldr	r2, [pc, #624]	; (80050ac <_printf_float+0x2fc>)
 8004e3c:	4b9c      	ldr	r3, [pc, #624]	; (80050b0 <_printf_float+0x300>)
 8004e3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004e42:	bf8c      	ite	hi
 8004e44:	4690      	movhi	r8, r2
 8004e46:	4698      	movls	r8, r3
 8004e48:	2303      	movs	r3, #3
 8004e4a:	f02b 0204 	bic.w	r2, fp, #4
 8004e4e:	6123      	str	r3, [r4, #16]
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	f04f 0900 	mov.w	r9, #0
 8004e56:	9700      	str	r7, [sp, #0]
 8004e58:	4633      	mov	r3, r6
 8004e5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 f9e6 	bl	8005230 <_printf_common>
 8004e64:	3001      	adds	r0, #1
 8004e66:	f040 808d 	bne.w	8004f84 <_printf_float+0x1d4>
 8004e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e6e:	b00d      	add	sp, #52	; 0x34
 8004e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e74:	4642      	mov	r2, r8
 8004e76:	464b      	mov	r3, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	f7fb fe5e 	bl	8000b3c <__aeabi_dcmpun>
 8004e80:	b110      	cbz	r0, 8004e88 <_printf_float+0xd8>
 8004e82:	4a8c      	ldr	r2, [pc, #560]	; (80050b4 <_printf_float+0x304>)
 8004e84:	4b8c      	ldr	r3, [pc, #560]	; (80050b8 <_printf_float+0x308>)
 8004e86:	e7da      	b.n	8004e3e <_printf_float+0x8e>
 8004e88:	6861      	ldr	r1, [r4, #4]
 8004e8a:	1c4b      	adds	r3, r1, #1
 8004e8c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004e90:	a80a      	add	r0, sp, #40	; 0x28
 8004e92:	d13e      	bne.n	8004f12 <_printf_float+0x162>
 8004e94:	2306      	movs	r3, #6
 8004e96:	6063      	str	r3, [r4, #4]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004e9e:	ab09      	add	r3, sp, #36	; 0x24
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	ec49 8b10 	vmov	d0, r8, r9
 8004ea6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004eaa:	6022      	str	r2, [r4, #0]
 8004eac:	f8cd a004 	str.w	sl, [sp, #4]
 8004eb0:	6861      	ldr	r1, [r4, #4]
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f7ff fee8 	bl	8004c88 <__cvt>
 8004eb8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004ebc:	2b47      	cmp	r3, #71	; 0x47
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	d109      	bne.n	8004ed6 <_printf_float+0x126>
 8004ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec4:	1cd8      	adds	r0, r3, #3
 8004ec6:	db02      	blt.n	8004ece <_printf_float+0x11e>
 8004ec8:	6862      	ldr	r2, [r4, #4]
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	dd47      	ble.n	8004f5e <_printf_float+0x1ae>
 8004ece:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ed2:	fa5f fa8a 	uxtb.w	sl, sl
 8004ed6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004eda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004edc:	d824      	bhi.n	8004f28 <_printf_float+0x178>
 8004ede:	3901      	subs	r1, #1
 8004ee0:	4652      	mov	r2, sl
 8004ee2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ee6:	9109      	str	r1, [sp, #36]	; 0x24
 8004ee8:	f7ff ff2f 	bl	8004d4a <__exponent>
 8004eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eee:	1813      	adds	r3, r2, r0
 8004ef0:	2a01      	cmp	r2, #1
 8004ef2:	4681      	mov	r9, r0
 8004ef4:	6123      	str	r3, [r4, #16]
 8004ef6:	dc02      	bgt.n	8004efe <_printf_float+0x14e>
 8004ef8:	6822      	ldr	r2, [r4, #0]
 8004efa:	07d1      	lsls	r1, r2, #31
 8004efc:	d501      	bpl.n	8004f02 <_printf_float+0x152>
 8004efe:	3301      	adds	r3, #1
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0a5      	beq.n	8004e56 <_printf_float+0xa6>
 8004f0a:	232d      	movs	r3, #45	; 0x2d
 8004f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f10:	e7a1      	b.n	8004e56 <_printf_float+0xa6>
 8004f12:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004f16:	f000 8177 	beq.w	8005208 <_printf_float+0x458>
 8004f1a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004f1e:	d1bb      	bne.n	8004e98 <_printf_float+0xe8>
 8004f20:	2900      	cmp	r1, #0
 8004f22:	d1b9      	bne.n	8004e98 <_printf_float+0xe8>
 8004f24:	2301      	movs	r3, #1
 8004f26:	e7b6      	b.n	8004e96 <_printf_float+0xe6>
 8004f28:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004f2c:	d119      	bne.n	8004f62 <_printf_float+0x1b2>
 8004f2e:	2900      	cmp	r1, #0
 8004f30:	6863      	ldr	r3, [r4, #4]
 8004f32:	dd0c      	ble.n	8004f4e <_printf_float+0x19e>
 8004f34:	6121      	str	r1, [r4, #16]
 8004f36:	b913      	cbnz	r3, 8004f3e <_printf_float+0x18e>
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	07d2      	lsls	r2, r2, #31
 8004f3c:	d502      	bpl.n	8004f44 <_printf_float+0x194>
 8004f3e:	3301      	adds	r3, #1
 8004f40:	440b      	add	r3, r1
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f46:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f48:	f04f 0900 	mov.w	r9, #0
 8004f4c:	e7d9      	b.n	8004f02 <_printf_float+0x152>
 8004f4e:	b913      	cbnz	r3, 8004f56 <_printf_float+0x1a6>
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	07d0      	lsls	r0, r2, #31
 8004f54:	d501      	bpl.n	8004f5a <_printf_float+0x1aa>
 8004f56:	3302      	adds	r3, #2
 8004f58:	e7f3      	b.n	8004f42 <_printf_float+0x192>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e7f1      	b.n	8004f42 <_printf_float+0x192>
 8004f5e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004f62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004f66:	4293      	cmp	r3, r2
 8004f68:	db05      	blt.n	8004f76 <_printf_float+0x1c6>
 8004f6a:	6822      	ldr	r2, [r4, #0]
 8004f6c:	6123      	str	r3, [r4, #16]
 8004f6e:	07d1      	lsls	r1, r2, #31
 8004f70:	d5e8      	bpl.n	8004f44 <_printf_float+0x194>
 8004f72:	3301      	adds	r3, #1
 8004f74:	e7e5      	b.n	8004f42 <_printf_float+0x192>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfd4      	ite	le
 8004f7a:	f1c3 0302 	rsble	r3, r3, #2
 8004f7e:	2301      	movgt	r3, #1
 8004f80:	4413      	add	r3, r2
 8004f82:	e7de      	b.n	8004f42 <_printf_float+0x192>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	055a      	lsls	r2, r3, #21
 8004f88:	d407      	bmi.n	8004f9a <_printf_float+0x1ea>
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b8      	blx	r7
 8004f94:	3001      	adds	r0, #1
 8004f96:	d12b      	bne.n	8004ff0 <_printf_float+0x240>
 8004f98:	e767      	b.n	8004e6a <_printf_float+0xba>
 8004f9a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004f9e:	f240 80dc 	bls.w	800515a <_printf_float+0x3aa>
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004faa:	f7fb fd95 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d033      	beq.n	800501a <_printf_float+0x26a>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	4a41      	ldr	r2, [pc, #260]	; (80050bc <_printf_float+0x30c>)
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	4628      	mov	r0, r5
 8004fba:	47b8      	blx	r7
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	f43f af54 	beq.w	8004e6a <_printf_float+0xba>
 8004fc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	db02      	blt.n	8004fd0 <_printf_float+0x220>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	07d8      	lsls	r0, r3, #31
 8004fce:	d50f      	bpl.n	8004ff0 <_printf_float+0x240>
 8004fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fd4:	4631      	mov	r1, r6
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	47b8      	blx	r7
 8004fda:	3001      	adds	r0, #1
 8004fdc:	f43f af45 	beq.w	8004e6a <_printf_float+0xba>
 8004fe0:	f04f 0800 	mov.w	r8, #0
 8004fe4:	f104 091a 	add.w	r9, r4, #26
 8004fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fea:	3b01      	subs	r3, #1
 8004fec:	4543      	cmp	r3, r8
 8004fee:	dc09      	bgt.n	8005004 <_printf_float+0x254>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	079b      	lsls	r3, r3, #30
 8004ff4:	f100 8103 	bmi.w	80051fe <_printf_float+0x44e>
 8004ff8:	68e0      	ldr	r0, [r4, #12]
 8004ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ffc:	4298      	cmp	r0, r3
 8004ffe:	bfb8      	it	lt
 8005000:	4618      	movlt	r0, r3
 8005002:	e734      	b.n	8004e6e <_printf_float+0xbe>
 8005004:	2301      	movs	r3, #1
 8005006:	464a      	mov	r2, r9
 8005008:	4631      	mov	r1, r6
 800500a:	4628      	mov	r0, r5
 800500c:	47b8      	blx	r7
 800500e:	3001      	adds	r0, #1
 8005010:	f43f af2b 	beq.w	8004e6a <_printf_float+0xba>
 8005014:	f108 0801 	add.w	r8, r8, #1
 8005018:	e7e6      	b.n	8004fe8 <_printf_float+0x238>
 800501a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	dc2b      	bgt.n	8005078 <_printf_float+0x2c8>
 8005020:	2301      	movs	r3, #1
 8005022:	4a26      	ldr	r2, [pc, #152]	; (80050bc <_printf_float+0x30c>)
 8005024:	4631      	mov	r1, r6
 8005026:	4628      	mov	r0, r5
 8005028:	47b8      	blx	r7
 800502a:	3001      	adds	r0, #1
 800502c:	f43f af1d 	beq.w	8004e6a <_printf_float+0xba>
 8005030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005032:	b923      	cbnz	r3, 800503e <_printf_float+0x28e>
 8005034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005036:	b913      	cbnz	r3, 800503e <_printf_float+0x28e>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	07d9      	lsls	r1, r3, #31
 800503c:	d5d8      	bpl.n	8004ff0 <_printf_float+0x240>
 800503e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	f43f af0e 	beq.w	8004e6a <_printf_float+0xba>
 800504e:	f04f 0900 	mov.w	r9, #0
 8005052:	f104 0a1a 	add.w	sl, r4, #26
 8005056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005058:	425b      	negs	r3, r3
 800505a:	454b      	cmp	r3, r9
 800505c:	dc01      	bgt.n	8005062 <_printf_float+0x2b2>
 800505e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005060:	e794      	b.n	8004f8c <_printf_float+0x1dc>
 8005062:	2301      	movs	r3, #1
 8005064:	4652      	mov	r2, sl
 8005066:	4631      	mov	r1, r6
 8005068:	4628      	mov	r0, r5
 800506a:	47b8      	blx	r7
 800506c:	3001      	adds	r0, #1
 800506e:	f43f aefc 	beq.w	8004e6a <_printf_float+0xba>
 8005072:	f109 0901 	add.w	r9, r9, #1
 8005076:	e7ee      	b.n	8005056 <_printf_float+0x2a6>
 8005078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800507a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800507c:	429a      	cmp	r2, r3
 800507e:	bfa8      	it	ge
 8005080:	461a      	movge	r2, r3
 8005082:	2a00      	cmp	r2, #0
 8005084:	4691      	mov	r9, r2
 8005086:	dd07      	ble.n	8005098 <_printf_float+0x2e8>
 8005088:	4613      	mov	r3, r2
 800508a:	4631      	mov	r1, r6
 800508c:	4642      	mov	r2, r8
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	f43f aee9 	beq.w	8004e6a <_printf_float+0xba>
 8005098:	f104 031a 	add.w	r3, r4, #26
 800509c:	f04f 0b00 	mov.w	fp, #0
 80050a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050a4:	9306      	str	r3, [sp, #24]
 80050a6:	e015      	b.n	80050d4 <_printf_float+0x324>
 80050a8:	7fefffff 	.word	0x7fefffff
 80050ac:	08007158 	.word	0x08007158
 80050b0:	08007154 	.word	0x08007154
 80050b4:	08007160 	.word	0x08007160
 80050b8:	0800715c 	.word	0x0800715c
 80050bc:	08007164 	.word	0x08007164
 80050c0:	2301      	movs	r3, #1
 80050c2:	9a06      	ldr	r2, [sp, #24]
 80050c4:	4631      	mov	r1, r6
 80050c6:	4628      	mov	r0, r5
 80050c8:	47b8      	blx	r7
 80050ca:	3001      	adds	r0, #1
 80050cc:	f43f aecd 	beq.w	8004e6a <_printf_float+0xba>
 80050d0:	f10b 0b01 	add.w	fp, fp, #1
 80050d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80050d8:	ebaa 0309 	sub.w	r3, sl, r9
 80050dc:	455b      	cmp	r3, fp
 80050de:	dcef      	bgt.n	80050c0 <_printf_float+0x310>
 80050e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050e4:	429a      	cmp	r2, r3
 80050e6:	44d0      	add	r8, sl
 80050e8:	db15      	blt.n	8005116 <_printf_float+0x366>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	07da      	lsls	r2, r3, #31
 80050ee:	d412      	bmi.n	8005116 <_printf_float+0x366>
 80050f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050f4:	eba3 020a 	sub.w	r2, r3, sl
 80050f8:	eba3 0a01 	sub.w	sl, r3, r1
 80050fc:	4592      	cmp	sl, r2
 80050fe:	bfa8      	it	ge
 8005100:	4692      	movge	sl, r2
 8005102:	f1ba 0f00 	cmp.w	sl, #0
 8005106:	dc0e      	bgt.n	8005126 <_printf_float+0x376>
 8005108:	f04f 0800 	mov.w	r8, #0
 800510c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005110:	f104 091a 	add.w	r9, r4, #26
 8005114:	e019      	b.n	800514a <_printf_float+0x39a>
 8005116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	47b8      	blx	r7
 8005120:	3001      	adds	r0, #1
 8005122:	d1e5      	bne.n	80050f0 <_printf_float+0x340>
 8005124:	e6a1      	b.n	8004e6a <_printf_float+0xba>
 8005126:	4653      	mov	r3, sl
 8005128:	4642      	mov	r2, r8
 800512a:	4631      	mov	r1, r6
 800512c:	4628      	mov	r0, r5
 800512e:	47b8      	blx	r7
 8005130:	3001      	adds	r0, #1
 8005132:	d1e9      	bne.n	8005108 <_printf_float+0x358>
 8005134:	e699      	b.n	8004e6a <_printf_float+0xba>
 8005136:	2301      	movs	r3, #1
 8005138:	464a      	mov	r2, r9
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f ae92 	beq.w	8004e6a <_printf_float+0xba>
 8005146:	f108 0801 	add.w	r8, r8, #1
 800514a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	eba3 030a 	sub.w	r3, r3, sl
 8005154:	4543      	cmp	r3, r8
 8005156:	dcee      	bgt.n	8005136 <_printf_float+0x386>
 8005158:	e74a      	b.n	8004ff0 <_printf_float+0x240>
 800515a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800515c:	2a01      	cmp	r2, #1
 800515e:	dc01      	bgt.n	8005164 <_printf_float+0x3b4>
 8005160:	07db      	lsls	r3, r3, #31
 8005162:	d53a      	bpl.n	80051da <_printf_float+0x42a>
 8005164:	2301      	movs	r3, #1
 8005166:	4642      	mov	r2, r8
 8005168:	4631      	mov	r1, r6
 800516a:	4628      	mov	r0, r5
 800516c:	47b8      	blx	r7
 800516e:	3001      	adds	r0, #1
 8005170:	f43f ae7b 	beq.w	8004e6a <_printf_float+0xba>
 8005174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	f108 0801 	add.w	r8, r8, #1
 8005184:	f43f ae71 	beq.w	8004e6a <_printf_float+0xba>
 8005188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518a:	2200      	movs	r2, #0
 800518c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005194:	2300      	movs	r3, #0
 8005196:	f7fb fc9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800519a:	b9c8      	cbnz	r0, 80051d0 <_printf_float+0x420>
 800519c:	4653      	mov	r3, sl
 800519e:	4642      	mov	r2, r8
 80051a0:	4631      	mov	r1, r6
 80051a2:	4628      	mov	r0, r5
 80051a4:	47b8      	blx	r7
 80051a6:	3001      	adds	r0, #1
 80051a8:	d10e      	bne.n	80051c8 <_printf_float+0x418>
 80051aa:	e65e      	b.n	8004e6a <_printf_float+0xba>
 80051ac:	2301      	movs	r3, #1
 80051ae:	4652      	mov	r2, sl
 80051b0:	4631      	mov	r1, r6
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b8      	blx	r7
 80051b6:	3001      	adds	r0, #1
 80051b8:	f43f ae57 	beq.w	8004e6a <_printf_float+0xba>
 80051bc:	f108 0801 	add.w	r8, r8, #1
 80051c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c2:	3b01      	subs	r3, #1
 80051c4:	4543      	cmp	r3, r8
 80051c6:	dcf1      	bgt.n	80051ac <_printf_float+0x3fc>
 80051c8:	464b      	mov	r3, r9
 80051ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051ce:	e6de      	b.n	8004f8e <_printf_float+0x1de>
 80051d0:	f04f 0800 	mov.w	r8, #0
 80051d4:	f104 0a1a 	add.w	sl, r4, #26
 80051d8:	e7f2      	b.n	80051c0 <_printf_float+0x410>
 80051da:	2301      	movs	r3, #1
 80051dc:	e7df      	b.n	800519e <_printf_float+0x3ee>
 80051de:	2301      	movs	r3, #1
 80051e0:	464a      	mov	r2, r9
 80051e2:	4631      	mov	r1, r6
 80051e4:	4628      	mov	r0, r5
 80051e6:	47b8      	blx	r7
 80051e8:	3001      	adds	r0, #1
 80051ea:	f43f ae3e 	beq.w	8004e6a <_printf_float+0xba>
 80051ee:	f108 0801 	add.w	r8, r8, #1
 80051f2:	68e3      	ldr	r3, [r4, #12]
 80051f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	4543      	cmp	r3, r8
 80051fa:	dcf0      	bgt.n	80051de <_printf_float+0x42e>
 80051fc:	e6fc      	b.n	8004ff8 <_printf_float+0x248>
 80051fe:	f04f 0800 	mov.w	r8, #0
 8005202:	f104 0919 	add.w	r9, r4, #25
 8005206:	e7f4      	b.n	80051f2 <_printf_float+0x442>
 8005208:	2900      	cmp	r1, #0
 800520a:	f43f ae8b 	beq.w	8004f24 <_printf_float+0x174>
 800520e:	2300      	movs	r3, #0
 8005210:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005214:	ab09      	add	r3, sp, #36	; 0x24
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	ec49 8b10 	vmov	d0, r8, r9
 800521c:	6022      	str	r2, [r4, #0]
 800521e:	f8cd a004 	str.w	sl, [sp, #4]
 8005222:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005226:	4628      	mov	r0, r5
 8005228:	f7ff fd2e 	bl	8004c88 <__cvt>
 800522c:	4680      	mov	r8, r0
 800522e:	e648      	b.n	8004ec2 <_printf_float+0x112>

08005230 <_printf_common>:
 8005230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005234:	4691      	mov	r9, r2
 8005236:	461f      	mov	r7, r3
 8005238:	688a      	ldr	r2, [r1, #8]
 800523a:	690b      	ldr	r3, [r1, #16]
 800523c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005240:	4293      	cmp	r3, r2
 8005242:	bfb8      	it	lt
 8005244:	4613      	movlt	r3, r2
 8005246:	f8c9 3000 	str.w	r3, [r9]
 800524a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800524e:	4606      	mov	r6, r0
 8005250:	460c      	mov	r4, r1
 8005252:	b112      	cbz	r2, 800525a <_printf_common+0x2a>
 8005254:	3301      	adds	r3, #1
 8005256:	f8c9 3000 	str.w	r3, [r9]
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	0699      	lsls	r1, r3, #26
 800525e:	bf42      	ittt	mi
 8005260:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005264:	3302      	addmi	r3, #2
 8005266:	f8c9 3000 	strmi.w	r3, [r9]
 800526a:	6825      	ldr	r5, [r4, #0]
 800526c:	f015 0506 	ands.w	r5, r5, #6
 8005270:	d107      	bne.n	8005282 <_printf_common+0x52>
 8005272:	f104 0a19 	add.w	sl, r4, #25
 8005276:	68e3      	ldr	r3, [r4, #12]
 8005278:	f8d9 2000 	ldr.w	r2, [r9]
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	42ab      	cmp	r3, r5
 8005280:	dc28      	bgt.n	80052d4 <_printf_common+0xa4>
 8005282:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	3300      	adds	r3, #0
 800528a:	bf18      	it	ne
 800528c:	2301      	movne	r3, #1
 800528e:	0692      	lsls	r2, r2, #26
 8005290:	d42d      	bmi.n	80052ee <_printf_common+0xbe>
 8005292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005296:	4639      	mov	r1, r7
 8005298:	4630      	mov	r0, r6
 800529a:	47c0      	blx	r8
 800529c:	3001      	adds	r0, #1
 800529e:	d020      	beq.n	80052e2 <_printf_common+0xb2>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	68e5      	ldr	r5, [r4, #12]
 80052a4:	f8d9 2000 	ldr.w	r2, [r9]
 80052a8:	f003 0306 	and.w	r3, r3, #6
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	bf08      	it	eq
 80052b0:	1aad      	subeq	r5, r5, r2
 80052b2:	68a3      	ldr	r3, [r4, #8]
 80052b4:	6922      	ldr	r2, [r4, #16]
 80052b6:	bf0c      	ite	eq
 80052b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052bc:	2500      	movne	r5, #0
 80052be:	4293      	cmp	r3, r2
 80052c0:	bfc4      	itt	gt
 80052c2:	1a9b      	subgt	r3, r3, r2
 80052c4:	18ed      	addgt	r5, r5, r3
 80052c6:	f04f 0900 	mov.w	r9, #0
 80052ca:	341a      	adds	r4, #26
 80052cc:	454d      	cmp	r5, r9
 80052ce:	d11a      	bne.n	8005306 <_printf_common+0xd6>
 80052d0:	2000      	movs	r0, #0
 80052d2:	e008      	b.n	80052e6 <_printf_common+0xb6>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4652      	mov	r2, sl
 80052d8:	4639      	mov	r1, r7
 80052da:	4630      	mov	r0, r6
 80052dc:	47c0      	blx	r8
 80052de:	3001      	adds	r0, #1
 80052e0:	d103      	bne.n	80052ea <_printf_common+0xba>
 80052e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ea:	3501      	adds	r5, #1
 80052ec:	e7c3      	b.n	8005276 <_printf_common+0x46>
 80052ee:	18e1      	adds	r1, r4, r3
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	2030      	movs	r0, #48	; 0x30
 80052f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052f8:	4422      	add	r2, r4
 80052fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005302:	3302      	adds	r3, #2
 8005304:	e7c5      	b.n	8005292 <_printf_common+0x62>
 8005306:	2301      	movs	r3, #1
 8005308:	4622      	mov	r2, r4
 800530a:	4639      	mov	r1, r7
 800530c:	4630      	mov	r0, r6
 800530e:	47c0      	blx	r8
 8005310:	3001      	adds	r0, #1
 8005312:	d0e6      	beq.n	80052e2 <_printf_common+0xb2>
 8005314:	f109 0901 	add.w	r9, r9, #1
 8005318:	e7d8      	b.n	80052cc <_printf_common+0x9c>
	...

0800531c <_printf_i>:
 800531c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005320:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005324:	460c      	mov	r4, r1
 8005326:	7e09      	ldrb	r1, [r1, #24]
 8005328:	b085      	sub	sp, #20
 800532a:	296e      	cmp	r1, #110	; 0x6e
 800532c:	4617      	mov	r7, r2
 800532e:	4606      	mov	r6, r0
 8005330:	4698      	mov	r8, r3
 8005332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005334:	f000 80b3 	beq.w	800549e <_printf_i+0x182>
 8005338:	d822      	bhi.n	8005380 <_printf_i+0x64>
 800533a:	2963      	cmp	r1, #99	; 0x63
 800533c:	d036      	beq.n	80053ac <_printf_i+0x90>
 800533e:	d80a      	bhi.n	8005356 <_printf_i+0x3a>
 8005340:	2900      	cmp	r1, #0
 8005342:	f000 80b9 	beq.w	80054b8 <_printf_i+0x19c>
 8005346:	2958      	cmp	r1, #88	; 0x58
 8005348:	f000 8083 	beq.w	8005452 <_printf_i+0x136>
 800534c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005350:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005354:	e032      	b.n	80053bc <_printf_i+0xa0>
 8005356:	2964      	cmp	r1, #100	; 0x64
 8005358:	d001      	beq.n	800535e <_printf_i+0x42>
 800535a:	2969      	cmp	r1, #105	; 0x69
 800535c:	d1f6      	bne.n	800534c <_printf_i+0x30>
 800535e:	6820      	ldr	r0, [r4, #0]
 8005360:	6813      	ldr	r3, [r2, #0]
 8005362:	0605      	lsls	r5, r0, #24
 8005364:	f103 0104 	add.w	r1, r3, #4
 8005368:	d52a      	bpl.n	80053c0 <_printf_i+0xa4>
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6011      	str	r1, [r2, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	da03      	bge.n	800537a <_printf_i+0x5e>
 8005372:	222d      	movs	r2, #45	; 0x2d
 8005374:	425b      	negs	r3, r3
 8005376:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800537a:	486f      	ldr	r0, [pc, #444]	; (8005538 <_printf_i+0x21c>)
 800537c:	220a      	movs	r2, #10
 800537e:	e039      	b.n	80053f4 <_printf_i+0xd8>
 8005380:	2973      	cmp	r1, #115	; 0x73
 8005382:	f000 809d 	beq.w	80054c0 <_printf_i+0x1a4>
 8005386:	d808      	bhi.n	800539a <_printf_i+0x7e>
 8005388:	296f      	cmp	r1, #111	; 0x6f
 800538a:	d020      	beq.n	80053ce <_printf_i+0xb2>
 800538c:	2970      	cmp	r1, #112	; 0x70
 800538e:	d1dd      	bne.n	800534c <_printf_i+0x30>
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	f043 0320 	orr.w	r3, r3, #32
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	e003      	b.n	80053a2 <_printf_i+0x86>
 800539a:	2975      	cmp	r1, #117	; 0x75
 800539c:	d017      	beq.n	80053ce <_printf_i+0xb2>
 800539e:	2978      	cmp	r1, #120	; 0x78
 80053a0:	d1d4      	bne.n	800534c <_printf_i+0x30>
 80053a2:	2378      	movs	r3, #120	; 0x78
 80053a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053a8:	4864      	ldr	r0, [pc, #400]	; (800553c <_printf_i+0x220>)
 80053aa:	e055      	b.n	8005458 <_printf_i+0x13c>
 80053ac:	6813      	ldr	r3, [r2, #0]
 80053ae:	1d19      	adds	r1, r3, #4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6011      	str	r1, [r2, #0]
 80053b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053bc:	2301      	movs	r3, #1
 80053be:	e08c      	b.n	80054da <_printf_i+0x1be>
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6011      	str	r1, [r2, #0]
 80053c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053c8:	bf18      	it	ne
 80053ca:	b21b      	sxthne	r3, r3
 80053cc:	e7cf      	b.n	800536e <_printf_i+0x52>
 80053ce:	6813      	ldr	r3, [r2, #0]
 80053d0:	6825      	ldr	r5, [r4, #0]
 80053d2:	1d18      	adds	r0, r3, #4
 80053d4:	6010      	str	r0, [r2, #0]
 80053d6:	0628      	lsls	r0, r5, #24
 80053d8:	d501      	bpl.n	80053de <_printf_i+0xc2>
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	e002      	b.n	80053e4 <_printf_i+0xc8>
 80053de:	0668      	lsls	r0, r5, #25
 80053e0:	d5fb      	bpl.n	80053da <_printf_i+0xbe>
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	4854      	ldr	r0, [pc, #336]	; (8005538 <_printf_i+0x21c>)
 80053e6:	296f      	cmp	r1, #111	; 0x6f
 80053e8:	bf14      	ite	ne
 80053ea:	220a      	movne	r2, #10
 80053ec:	2208      	moveq	r2, #8
 80053ee:	2100      	movs	r1, #0
 80053f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053f4:	6865      	ldr	r5, [r4, #4]
 80053f6:	60a5      	str	r5, [r4, #8]
 80053f8:	2d00      	cmp	r5, #0
 80053fa:	f2c0 8095 	blt.w	8005528 <_printf_i+0x20c>
 80053fe:	6821      	ldr	r1, [r4, #0]
 8005400:	f021 0104 	bic.w	r1, r1, #4
 8005404:	6021      	str	r1, [r4, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d13d      	bne.n	8005486 <_printf_i+0x16a>
 800540a:	2d00      	cmp	r5, #0
 800540c:	f040 808e 	bne.w	800552c <_printf_i+0x210>
 8005410:	4665      	mov	r5, ip
 8005412:	2a08      	cmp	r2, #8
 8005414:	d10b      	bne.n	800542e <_printf_i+0x112>
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	07db      	lsls	r3, r3, #31
 800541a:	d508      	bpl.n	800542e <_printf_i+0x112>
 800541c:	6923      	ldr	r3, [r4, #16]
 800541e:	6862      	ldr	r2, [r4, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	bfde      	ittt	le
 8005424:	2330      	movle	r3, #48	; 0x30
 8005426:	f805 3c01 	strble.w	r3, [r5, #-1]
 800542a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800542e:	ebac 0305 	sub.w	r3, ip, r5
 8005432:	6123      	str	r3, [r4, #16]
 8005434:	f8cd 8000 	str.w	r8, [sp]
 8005438:	463b      	mov	r3, r7
 800543a:	aa03      	add	r2, sp, #12
 800543c:	4621      	mov	r1, r4
 800543e:	4630      	mov	r0, r6
 8005440:	f7ff fef6 	bl	8005230 <_printf_common>
 8005444:	3001      	adds	r0, #1
 8005446:	d14d      	bne.n	80054e4 <_printf_i+0x1c8>
 8005448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800544c:	b005      	add	sp, #20
 800544e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005452:	4839      	ldr	r0, [pc, #228]	; (8005538 <_printf_i+0x21c>)
 8005454:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005458:	6813      	ldr	r3, [r2, #0]
 800545a:	6821      	ldr	r1, [r4, #0]
 800545c:	1d1d      	adds	r5, r3, #4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6015      	str	r5, [r2, #0]
 8005462:	060a      	lsls	r2, r1, #24
 8005464:	d50b      	bpl.n	800547e <_printf_i+0x162>
 8005466:	07ca      	lsls	r2, r1, #31
 8005468:	bf44      	itt	mi
 800546a:	f041 0120 	orrmi.w	r1, r1, #32
 800546e:	6021      	strmi	r1, [r4, #0]
 8005470:	b91b      	cbnz	r3, 800547a <_printf_i+0x15e>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	f022 0220 	bic.w	r2, r2, #32
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	2210      	movs	r2, #16
 800547c:	e7b7      	b.n	80053ee <_printf_i+0xd2>
 800547e:	064d      	lsls	r5, r1, #25
 8005480:	bf48      	it	mi
 8005482:	b29b      	uxthmi	r3, r3
 8005484:	e7ef      	b.n	8005466 <_printf_i+0x14a>
 8005486:	4665      	mov	r5, ip
 8005488:	fbb3 f1f2 	udiv	r1, r3, r2
 800548c:	fb02 3311 	mls	r3, r2, r1, r3
 8005490:	5cc3      	ldrb	r3, [r0, r3]
 8005492:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005496:	460b      	mov	r3, r1
 8005498:	2900      	cmp	r1, #0
 800549a:	d1f5      	bne.n	8005488 <_printf_i+0x16c>
 800549c:	e7b9      	b.n	8005412 <_printf_i+0xf6>
 800549e:	6813      	ldr	r3, [r2, #0]
 80054a0:	6825      	ldr	r5, [r4, #0]
 80054a2:	6961      	ldr	r1, [r4, #20]
 80054a4:	1d18      	adds	r0, r3, #4
 80054a6:	6010      	str	r0, [r2, #0]
 80054a8:	0628      	lsls	r0, r5, #24
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	d501      	bpl.n	80054b2 <_printf_i+0x196>
 80054ae:	6019      	str	r1, [r3, #0]
 80054b0:	e002      	b.n	80054b8 <_printf_i+0x19c>
 80054b2:	066a      	lsls	r2, r5, #25
 80054b4:	d5fb      	bpl.n	80054ae <_printf_i+0x192>
 80054b6:	8019      	strh	r1, [r3, #0]
 80054b8:	2300      	movs	r3, #0
 80054ba:	6123      	str	r3, [r4, #16]
 80054bc:	4665      	mov	r5, ip
 80054be:	e7b9      	b.n	8005434 <_printf_i+0x118>
 80054c0:	6813      	ldr	r3, [r2, #0]
 80054c2:	1d19      	adds	r1, r3, #4
 80054c4:	6011      	str	r1, [r2, #0]
 80054c6:	681d      	ldr	r5, [r3, #0]
 80054c8:	6862      	ldr	r2, [r4, #4]
 80054ca:	2100      	movs	r1, #0
 80054cc:	4628      	mov	r0, r5
 80054ce:	f7fa fe8f 	bl	80001f0 <memchr>
 80054d2:	b108      	cbz	r0, 80054d8 <_printf_i+0x1bc>
 80054d4:	1b40      	subs	r0, r0, r5
 80054d6:	6060      	str	r0, [r4, #4]
 80054d8:	6863      	ldr	r3, [r4, #4]
 80054da:	6123      	str	r3, [r4, #16]
 80054dc:	2300      	movs	r3, #0
 80054de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e2:	e7a7      	b.n	8005434 <_printf_i+0x118>
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	462a      	mov	r2, r5
 80054e8:	4639      	mov	r1, r7
 80054ea:	4630      	mov	r0, r6
 80054ec:	47c0      	blx	r8
 80054ee:	3001      	adds	r0, #1
 80054f0:	d0aa      	beq.n	8005448 <_printf_i+0x12c>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	079b      	lsls	r3, r3, #30
 80054f6:	d413      	bmi.n	8005520 <_printf_i+0x204>
 80054f8:	68e0      	ldr	r0, [r4, #12]
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	4298      	cmp	r0, r3
 80054fe:	bfb8      	it	lt
 8005500:	4618      	movlt	r0, r3
 8005502:	e7a3      	b.n	800544c <_printf_i+0x130>
 8005504:	2301      	movs	r3, #1
 8005506:	464a      	mov	r2, r9
 8005508:	4639      	mov	r1, r7
 800550a:	4630      	mov	r0, r6
 800550c:	47c0      	blx	r8
 800550e:	3001      	adds	r0, #1
 8005510:	d09a      	beq.n	8005448 <_printf_i+0x12c>
 8005512:	3501      	adds	r5, #1
 8005514:	68e3      	ldr	r3, [r4, #12]
 8005516:	9a03      	ldr	r2, [sp, #12]
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	42ab      	cmp	r3, r5
 800551c:	dcf2      	bgt.n	8005504 <_printf_i+0x1e8>
 800551e:	e7eb      	b.n	80054f8 <_printf_i+0x1dc>
 8005520:	2500      	movs	r5, #0
 8005522:	f104 0919 	add.w	r9, r4, #25
 8005526:	e7f5      	b.n	8005514 <_printf_i+0x1f8>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1ac      	bne.n	8005486 <_printf_i+0x16a>
 800552c:	7803      	ldrb	r3, [r0, #0]
 800552e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005532:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005536:	e76c      	b.n	8005412 <_printf_i+0xf6>
 8005538:	08007166 	.word	0x08007166
 800553c:	08007177 	.word	0x08007177

08005540 <sniprintf>:
 8005540:	b40c      	push	{r2, r3}
 8005542:	b530      	push	{r4, r5, lr}
 8005544:	4b17      	ldr	r3, [pc, #92]	; (80055a4 <sniprintf+0x64>)
 8005546:	1e0c      	subs	r4, r1, #0
 8005548:	b09d      	sub	sp, #116	; 0x74
 800554a:	681d      	ldr	r5, [r3, #0]
 800554c:	da08      	bge.n	8005560 <sniprintf+0x20>
 800554e:	238b      	movs	r3, #139	; 0x8b
 8005550:	602b      	str	r3, [r5, #0]
 8005552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005556:	b01d      	add	sp, #116	; 0x74
 8005558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800555c:	b002      	add	sp, #8
 800555e:	4770      	bx	lr
 8005560:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005564:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005568:	bf14      	ite	ne
 800556a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800556e:	4623      	moveq	r3, r4
 8005570:	9304      	str	r3, [sp, #16]
 8005572:	9307      	str	r3, [sp, #28]
 8005574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005578:	9002      	str	r0, [sp, #8]
 800557a:	9006      	str	r0, [sp, #24]
 800557c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005580:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005582:	ab21      	add	r3, sp, #132	; 0x84
 8005584:	a902      	add	r1, sp, #8
 8005586:	4628      	mov	r0, r5
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	f001 fa99 	bl	8006ac0 <_svfiprintf_r>
 800558e:	1c43      	adds	r3, r0, #1
 8005590:	bfbc      	itt	lt
 8005592:	238b      	movlt	r3, #139	; 0x8b
 8005594:	602b      	strlt	r3, [r5, #0]
 8005596:	2c00      	cmp	r4, #0
 8005598:	d0dd      	beq.n	8005556 <sniprintf+0x16>
 800559a:	9b02      	ldr	r3, [sp, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e7d9      	b.n	8005556 <sniprintf+0x16>
 80055a2:	bf00      	nop
 80055a4:	2000000c 	.word	0x2000000c

080055a8 <siprintf>:
 80055a8:	b40e      	push	{r1, r2, r3}
 80055aa:	b500      	push	{lr}
 80055ac:	b09c      	sub	sp, #112	; 0x70
 80055ae:	ab1d      	add	r3, sp, #116	; 0x74
 80055b0:	9002      	str	r0, [sp, #8]
 80055b2:	9006      	str	r0, [sp, #24]
 80055b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055b8:	4809      	ldr	r0, [pc, #36]	; (80055e0 <siprintf+0x38>)
 80055ba:	9107      	str	r1, [sp, #28]
 80055bc:	9104      	str	r1, [sp, #16]
 80055be:	4909      	ldr	r1, [pc, #36]	; (80055e4 <siprintf+0x3c>)
 80055c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c4:	9105      	str	r1, [sp, #20]
 80055c6:	6800      	ldr	r0, [r0, #0]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	a902      	add	r1, sp, #8
 80055cc:	f001 fa78 	bl	8006ac0 <_svfiprintf_r>
 80055d0:	9b02      	ldr	r3, [sp, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	b01c      	add	sp, #112	; 0x70
 80055d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055dc:	b003      	add	sp, #12
 80055de:	4770      	bx	lr
 80055e0:	2000000c 	.word	0x2000000c
 80055e4:	ffff0208 	.word	0xffff0208

080055e8 <strstr>:
 80055e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ea:	7803      	ldrb	r3, [r0, #0]
 80055ec:	b17b      	cbz	r3, 800560e <strstr+0x26>
 80055ee:	4604      	mov	r4, r0
 80055f0:	7823      	ldrb	r3, [r4, #0]
 80055f2:	4620      	mov	r0, r4
 80055f4:	1c66      	adds	r6, r4, #1
 80055f6:	b17b      	cbz	r3, 8005618 <strstr+0x30>
 80055f8:	1e4a      	subs	r2, r1, #1
 80055fa:	1e63      	subs	r3, r4, #1
 80055fc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8005600:	b14d      	cbz	r5, 8005616 <strstr+0x2e>
 8005602:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005606:	42af      	cmp	r7, r5
 8005608:	4634      	mov	r4, r6
 800560a:	d0f7      	beq.n	80055fc <strstr+0x14>
 800560c:	e7f0      	b.n	80055f0 <strstr+0x8>
 800560e:	780b      	ldrb	r3, [r1, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	bf18      	it	ne
 8005614:	2000      	movne	r0, #0
 8005616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005618:	4618      	mov	r0, r3
 800561a:	e7fc      	b.n	8005616 <strstr+0x2e>

0800561c <quorem>:
 800561c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005620:	6903      	ldr	r3, [r0, #16]
 8005622:	690c      	ldr	r4, [r1, #16]
 8005624:	42a3      	cmp	r3, r4
 8005626:	4680      	mov	r8, r0
 8005628:	f2c0 8082 	blt.w	8005730 <quorem+0x114>
 800562c:	3c01      	subs	r4, #1
 800562e:	f101 0714 	add.w	r7, r1, #20
 8005632:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005636:	f100 0614 	add.w	r6, r0, #20
 800563a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800563e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005642:	eb06 030c 	add.w	r3, r6, ip
 8005646:	3501      	adds	r5, #1
 8005648:	eb07 090c 	add.w	r9, r7, ip
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005652:	b395      	cbz	r5, 80056ba <quorem+0x9e>
 8005654:	f04f 0a00 	mov.w	sl, #0
 8005658:	4638      	mov	r0, r7
 800565a:	46b6      	mov	lr, r6
 800565c:	46d3      	mov	fp, sl
 800565e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005662:	b293      	uxth	r3, r2
 8005664:	fb05 a303 	mla	r3, r5, r3, sl
 8005668:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800566c:	b29b      	uxth	r3, r3
 800566e:	ebab 0303 	sub.w	r3, fp, r3
 8005672:	0c12      	lsrs	r2, r2, #16
 8005674:	f8de b000 	ldr.w	fp, [lr]
 8005678:	fb05 a202 	mla	r2, r5, r2, sl
 800567c:	fa13 f38b 	uxtah	r3, r3, fp
 8005680:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005684:	fa1f fb82 	uxth.w	fp, r2
 8005688:	f8de 2000 	ldr.w	r2, [lr]
 800568c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005690:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005694:	b29b      	uxth	r3, r3
 8005696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800569a:	4581      	cmp	r9, r0
 800569c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80056a0:	f84e 3b04 	str.w	r3, [lr], #4
 80056a4:	d2db      	bcs.n	800565e <quorem+0x42>
 80056a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80056aa:	b933      	cbnz	r3, 80056ba <quorem+0x9e>
 80056ac:	9b01      	ldr	r3, [sp, #4]
 80056ae:	3b04      	subs	r3, #4
 80056b0:	429e      	cmp	r6, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	d330      	bcc.n	8005718 <quorem+0xfc>
 80056b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80056ba:	4640      	mov	r0, r8
 80056bc:	f001 f82a 	bl	8006714 <__mcmp>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	db25      	blt.n	8005710 <quorem+0xf4>
 80056c4:	3501      	adds	r5, #1
 80056c6:	4630      	mov	r0, r6
 80056c8:	f04f 0c00 	mov.w	ip, #0
 80056cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80056d0:	f8d0 e000 	ldr.w	lr, [r0]
 80056d4:	b293      	uxth	r3, r2
 80056d6:	ebac 0303 	sub.w	r3, ip, r3
 80056da:	0c12      	lsrs	r2, r2, #16
 80056dc:	fa13 f38e 	uxtah	r3, r3, lr
 80056e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ee:	45b9      	cmp	r9, r7
 80056f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056f4:	f840 3b04 	str.w	r3, [r0], #4
 80056f8:	d2e8      	bcs.n	80056cc <quorem+0xb0>
 80056fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80056fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005702:	b92a      	cbnz	r2, 8005710 <quorem+0xf4>
 8005704:	3b04      	subs	r3, #4
 8005706:	429e      	cmp	r6, r3
 8005708:	461a      	mov	r2, r3
 800570a:	d30b      	bcc.n	8005724 <quorem+0x108>
 800570c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005710:	4628      	mov	r0, r5
 8005712:	b003      	add	sp, #12
 8005714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	3b04      	subs	r3, #4
 800571c:	2a00      	cmp	r2, #0
 800571e:	d1ca      	bne.n	80056b6 <quorem+0x9a>
 8005720:	3c01      	subs	r4, #1
 8005722:	e7c5      	b.n	80056b0 <quorem+0x94>
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	3b04      	subs	r3, #4
 8005728:	2a00      	cmp	r2, #0
 800572a:	d1ef      	bne.n	800570c <quorem+0xf0>
 800572c:	3c01      	subs	r4, #1
 800572e:	e7ea      	b.n	8005706 <quorem+0xea>
 8005730:	2000      	movs	r0, #0
 8005732:	e7ee      	b.n	8005712 <quorem+0xf6>
 8005734:	0000      	movs	r0, r0
	...

08005738 <_dtoa_r>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	ec57 6b10 	vmov	r6, r7, d0
 8005740:	b097      	sub	sp, #92	; 0x5c
 8005742:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005744:	9106      	str	r1, [sp, #24]
 8005746:	4604      	mov	r4, r0
 8005748:	920b      	str	r2, [sp, #44]	; 0x2c
 800574a:	9312      	str	r3, [sp, #72]	; 0x48
 800574c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005750:	e9cd 6700 	strd	r6, r7, [sp]
 8005754:	b93d      	cbnz	r5, 8005766 <_dtoa_r+0x2e>
 8005756:	2010      	movs	r0, #16
 8005758:	f000 fdb4 	bl	80062c4 <malloc>
 800575c:	6260      	str	r0, [r4, #36]	; 0x24
 800575e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005762:	6005      	str	r5, [r0, #0]
 8005764:	60c5      	str	r5, [r0, #12]
 8005766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	b151      	cbz	r1, 8005782 <_dtoa_r+0x4a>
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	604a      	str	r2, [r1, #4]
 8005770:	2301      	movs	r3, #1
 8005772:	4093      	lsls	r3, r2
 8005774:	608b      	str	r3, [r1, #8]
 8005776:	4620      	mov	r0, r4
 8005778:	f000 fdeb 	bl	8006352 <_Bfree>
 800577c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	1e3b      	subs	r3, r7, #0
 8005784:	bfbb      	ittet	lt
 8005786:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800578a:	9301      	strlt	r3, [sp, #4]
 800578c:	2300      	movge	r3, #0
 800578e:	2201      	movlt	r2, #1
 8005790:	bfac      	ite	ge
 8005792:	f8c8 3000 	strge.w	r3, [r8]
 8005796:	f8c8 2000 	strlt.w	r2, [r8]
 800579a:	4baf      	ldr	r3, [pc, #700]	; (8005a58 <_dtoa_r+0x320>)
 800579c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80057a0:	ea33 0308 	bics.w	r3, r3, r8
 80057a4:	d114      	bne.n	80057d0 <_dtoa_r+0x98>
 80057a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	9b00      	ldr	r3, [sp, #0]
 80057b0:	b923      	cbnz	r3, 80057bc <_dtoa_r+0x84>
 80057b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f000 8542 	beq.w	8006240 <_dtoa_r+0xb08>
 80057bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005a6c <_dtoa_r+0x334>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 8544 	beq.w	8006250 <_dtoa_r+0xb18>
 80057c8:	f10b 0303 	add.w	r3, fp, #3
 80057cc:	f000 bd3e 	b.w	800624c <_dtoa_r+0xb14>
 80057d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80057d4:	2200      	movs	r2, #0
 80057d6:	2300      	movs	r3, #0
 80057d8:	4630      	mov	r0, r6
 80057da:	4639      	mov	r1, r7
 80057dc:	f7fb f97c 	bl	8000ad8 <__aeabi_dcmpeq>
 80057e0:	4681      	mov	r9, r0
 80057e2:	b168      	cbz	r0, 8005800 <_dtoa_r+0xc8>
 80057e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057e6:	2301      	movs	r3, #1
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8524 	beq.w	800623a <_dtoa_r+0xb02>
 80057f2:	4b9a      	ldr	r3, [pc, #616]	; (8005a5c <_dtoa_r+0x324>)
 80057f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057f6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	f000 bd28 	b.w	8006250 <_dtoa_r+0xb18>
 8005800:	aa14      	add	r2, sp, #80	; 0x50
 8005802:	a915      	add	r1, sp, #84	; 0x54
 8005804:	ec47 6b10 	vmov	d0, r6, r7
 8005808:	4620      	mov	r0, r4
 800580a:	f000 fffa 	bl	8006802 <__d2b>
 800580e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005812:	9004      	str	r0, [sp, #16]
 8005814:	2d00      	cmp	r5, #0
 8005816:	d07c      	beq.n	8005912 <_dtoa_r+0x1da>
 8005818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800581c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005820:	46b2      	mov	sl, r6
 8005822:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800582a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800582e:	2200      	movs	r2, #0
 8005830:	4b8b      	ldr	r3, [pc, #556]	; (8005a60 <_dtoa_r+0x328>)
 8005832:	4650      	mov	r0, sl
 8005834:	4659      	mov	r1, fp
 8005836:	f7fa fd2f 	bl	8000298 <__aeabi_dsub>
 800583a:	a381      	add	r3, pc, #516	; (adr r3, 8005a40 <_dtoa_r+0x308>)
 800583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005840:	f7fa fee2 	bl	8000608 <__aeabi_dmul>
 8005844:	a380      	add	r3, pc, #512	; (adr r3, 8005a48 <_dtoa_r+0x310>)
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	f7fa fd27 	bl	800029c <__adddf3>
 800584e:	4606      	mov	r6, r0
 8005850:	4628      	mov	r0, r5
 8005852:	460f      	mov	r7, r1
 8005854:	f7fa fe6e 	bl	8000534 <__aeabi_i2d>
 8005858:	a37d      	add	r3, pc, #500	; (adr r3, 8005a50 <_dtoa_r+0x318>)
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f7fa fed3 	bl	8000608 <__aeabi_dmul>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4630      	mov	r0, r6
 8005868:	4639      	mov	r1, r7
 800586a:	f7fa fd17 	bl	800029c <__adddf3>
 800586e:	4606      	mov	r6, r0
 8005870:	460f      	mov	r7, r1
 8005872:	f7fb f979 	bl	8000b68 <__aeabi_d2iz>
 8005876:	2200      	movs	r2, #0
 8005878:	4682      	mov	sl, r0
 800587a:	2300      	movs	r3, #0
 800587c:	4630      	mov	r0, r6
 800587e:	4639      	mov	r1, r7
 8005880:	f7fb f934 	bl	8000aec <__aeabi_dcmplt>
 8005884:	b148      	cbz	r0, 800589a <_dtoa_r+0x162>
 8005886:	4650      	mov	r0, sl
 8005888:	f7fa fe54 	bl	8000534 <__aeabi_i2d>
 800588c:	4632      	mov	r2, r6
 800588e:	463b      	mov	r3, r7
 8005890:	f7fb f922 	bl	8000ad8 <__aeabi_dcmpeq>
 8005894:	b908      	cbnz	r0, 800589a <_dtoa_r+0x162>
 8005896:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800589a:	f1ba 0f16 	cmp.w	sl, #22
 800589e:	d859      	bhi.n	8005954 <_dtoa_r+0x21c>
 80058a0:	4970      	ldr	r1, [pc, #448]	; (8005a64 <_dtoa_r+0x32c>)
 80058a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80058a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058ae:	f7fb f93b 	bl	8000b28 <__aeabi_dcmpgt>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d050      	beq.n	8005958 <_dtoa_r+0x220>
 80058b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80058ba:	2300      	movs	r3, #0
 80058bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80058be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058c0:	1b5d      	subs	r5, r3, r5
 80058c2:	f1b5 0801 	subs.w	r8, r5, #1
 80058c6:	bf49      	itett	mi
 80058c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80058cc:	2300      	movpl	r3, #0
 80058ce:	9305      	strmi	r3, [sp, #20]
 80058d0:	f04f 0800 	movmi.w	r8, #0
 80058d4:	bf58      	it	pl
 80058d6:	9305      	strpl	r3, [sp, #20]
 80058d8:	f1ba 0f00 	cmp.w	sl, #0
 80058dc:	db3e      	blt.n	800595c <_dtoa_r+0x224>
 80058de:	2300      	movs	r3, #0
 80058e0:	44d0      	add	r8, sl
 80058e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80058e6:	9307      	str	r3, [sp, #28]
 80058e8:	9b06      	ldr	r3, [sp, #24]
 80058ea:	2b09      	cmp	r3, #9
 80058ec:	f200 8090 	bhi.w	8005a10 <_dtoa_r+0x2d8>
 80058f0:	2b05      	cmp	r3, #5
 80058f2:	bfc4      	itt	gt
 80058f4:	3b04      	subgt	r3, #4
 80058f6:	9306      	strgt	r3, [sp, #24]
 80058f8:	9b06      	ldr	r3, [sp, #24]
 80058fa:	f1a3 0302 	sub.w	r3, r3, #2
 80058fe:	bfcc      	ite	gt
 8005900:	2500      	movgt	r5, #0
 8005902:	2501      	movle	r5, #1
 8005904:	2b03      	cmp	r3, #3
 8005906:	f200 808f 	bhi.w	8005a28 <_dtoa_r+0x2f0>
 800590a:	e8df f003 	tbb	[pc, r3]
 800590e:	7f7d      	.short	0x7f7d
 8005910:	7131      	.short	0x7131
 8005912:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005916:	441d      	add	r5, r3
 8005918:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800591c:	2820      	cmp	r0, #32
 800591e:	dd13      	ble.n	8005948 <_dtoa_r+0x210>
 8005920:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005924:	9b00      	ldr	r3, [sp, #0]
 8005926:	fa08 f800 	lsl.w	r8, r8, r0
 800592a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800592e:	fa23 f000 	lsr.w	r0, r3, r0
 8005932:	ea48 0000 	orr.w	r0, r8, r0
 8005936:	f7fa fded 	bl	8000514 <__aeabi_ui2d>
 800593a:	2301      	movs	r3, #1
 800593c:	4682      	mov	sl, r0
 800593e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005942:	3d01      	subs	r5, #1
 8005944:	9313      	str	r3, [sp, #76]	; 0x4c
 8005946:	e772      	b.n	800582e <_dtoa_r+0xf6>
 8005948:	9b00      	ldr	r3, [sp, #0]
 800594a:	f1c0 0020 	rsb	r0, r0, #32
 800594e:	fa03 f000 	lsl.w	r0, r3, r0
 8005952:	e7f0      	b.n	8005936 <_dtoa_r+0x1fe>
 8005954:	2301      	movs	r3, #1
 8005956:	e7b1      	b.n	80058bc <_dtoa_r+0x184>
 8005958:	900f      	str	r0, [sp, #60]	; 0x3c
 800595a:	e7b0      	b.n	80058be <_dtoa_r+0x186>
 800595c:	9b05      	ldr	r3, [sp, #20]
 800595e:	eba3 030a 	sub.w	r3, r3, sl
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	f1ca 0300 	rsb	r3, sl, #0
 8005968:	9307      	str	r3, [sp, #28]
 800596a:	2300      	movs	r3, #0
 800596c:	930e      	str	r3, [sp, #56]	; 0x38
 800596e:	e7bb      	b.n	80058e8 <_dtoa_r+0x1b0>
 8005970:	2301      	movs	r3, #1
 8005972:	930a      	str	r3, [sp, #40]	; 0x28
 8005974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005976:	2b00      	cmp	r3, #0
 8005978:	dd59      	ble.n	8005a2e <_dtoa_r+0x2f6>
 800597a:	9302      	str	r3, [sp, #8]
 800597c:	4699      	mov	r9, r3
 800597e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005980:	2200      	movs	r2, #0
 8005982:	6072      	str	r2, [r6, #4]
 8005984:	2204      	movs	r2, #4
 8005986:	f102 0014 	add.w	r0, r2, #20
 800598a:	4298      	cmp	r0, r3
 800598c:	6871      	ldr	r1, [r6, #4]
 800598e:	d953      	bls.n	8005a38 <_dtoa_r+0x300>
 8005990:	4620      	mov	r0, r4
 8005992:	f000 fcaa 	bl	80062ea <_Balloc>
 8005996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005998:	6030      	str	r0, [r6, #0]
 800599a:	f1b9 0f0e 	cmp.w	r9, #14
 800599e:	f8d3 b000 	ldr.w	fp, [r3]
 80059a2:	f200 80e6 	bhi.w	8005b72 <_dtoa_r+0x43a>
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	f000 80e3 	beq.w	8005b72 <_dtoa_r+0x43a>
 80059ac:	ed9d 7b00 	vldr	d7, [sp]
 80059b0:	f1ba 0f00 	cmp.w	sl, #0
 80059b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80059b8:	dd74      	ble.n	8005aa4 <_dtoa_r+0x36c>
 80059ba:	4a2a      	ldr	r2, [pc, #168]	; (8005a64 <_dtoa_r+0x32c>)
 80059bc:	f00a 030f 	and.w	r3, sl, #15
 80059c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80059c4:	ed93 7b00 	vldr	d7, [r3]
 80059c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80059cc:	06f0      	lsls	r0, r6, #27
 80059ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80059d2:	d565      	bpl.n	8005aa0 <_dtoa_r+0x368>
 80059d4:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <_dtoa_r+0x330>)
 80059d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059de:	f7fa ff3d 	bl	800085c <__aeabi_ddiv>
 80059e2:	e9cd 0100 	strd	r0, r1, [sp]
 80059e6:	f006 060f 	and.w	r6, r6, #15
 80059ea:	2503      	movs	r5, #3
 80059ec:	4f1e      	ldr	r7, [pc, #120]	; (8005a68 <_dtoa_r+0x330>)
 80059ee:	e04c      	b.n	8005a8a <_dtoa_r+0x352>
 80059f0:	2301      	movs	r3, #1
 80059f2:	930a      	str	r3, [sp, #40]	; 0x28
 80059f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f6:	4453      	add	r3, sl
 80059f8:	f103 0901 	add.w	r9, r3, #1
 80059fc:	9302      	str	r3, [sp, #8]
 80059fe:	464b      	mov	r3, r9
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	bfb8      	it	lt
 8005a04:	2301      	movlt	r3, #1
 8005a06:	e7ba      	b.n	800597e <_dtoa_r+0x246>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e7b2      	b.n	8005972 <_dtoa_r+0x23a>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e7f0      	b.n	80059f2 <_dtoa_r+0x2ba>
 8005a10:	2501      	movs	r5, #1
 8005a12:	2300      	movs	r3, #0
 8005a14:	9306      	str	r3, [sp, #24]
 8005a16:	950a      	str	r5, [sp, #40]	; 0x28
 8005a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a1c:	9302      	str	r3, [sp, #8]
 8005a1e:	4699      	mov	r9, r3
 8005a20:	2200      	movs	r2, #0
 8005a22:	2312      	movs	r3, #18
 8005a24:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a26:	e7aa      	b.n	800597e <_dtoa_r+0x246>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a2c:	e7f4      	b.n	8005a18 <_dtoa_r+0x2e0>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	9302      	str	r3, [sp, #8]
 8005a32:	4699      	mov	r9, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	e7f5      	b.n	8005a24 <_dtoa_r+0x2ec>
 8005a38:	3101      	adds	r1, #1
 8005a3a:	6071      	str	r1, [r6, #4]
 8005a3c:	0052      	lsls	r2, r2, #1
 8005a3e:	e7a2      	b.n	8005986 <_dtoa_r+0x24e>
 8005a40:	636f4361 	.word	0x636f4361
 8005a44:	3fd287a7 	.word	0x3fd287a7
 8005a48:	8b60c8b3 	.word	0x8b60c8b3
 8005a4c:	3fc68a28 	.word	0x3fc68a28
 8005a50:	509f79fb 	.word	0x509f79fb
 8005a54:	3fd34413 	.word	0x3fd34413
 8005a58:	7ff00000 	.word	0x7ff00000
 8005a5c:	08007165 	.word	0x08007165
 8005a60:	3ff80000 	.word	0x3ff80000
 8005a64:	080071c0 	.word	0x080071c0
 8005a68:	08007198 	.word	0x08007198
 8005a6c:	08007191 	.word	0x08007191
 8005a70:	07f1      	lsls	r1, r6, #31
 8005a72:	d508      	bpl.n	8005a86 <_dtoa_r+0x34e>
 8005a74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7c:	f7fa fdc4 	bl	8000608 <__aeabi_dmul>
 8005a80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a84:	3501      	adds	r5, #1
 8005a86:	1076      	asrs	r6, r6, #1
 8005a88:	3708      	adds	r7, #8
 8005a8a:	2e00      	cmp	r6, #0
 8005a8c:	d1f0      	bne.n	8005a70 <_dtoa_r+0x338>
 8005a8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a96:	f7fa fee1 	bl	800085c <__aeabi_ddiv>
 8005a9a:	e9cd 0100 	strd	r0, r1, [sp]
 8005a9e:	e01a      	b.n	8005ad6 <_dtoa_r+0x39e>
 8005aa0:	2502      	movs	r5, #2
 8005aa2:	e7a3      	b.n	80059ec <_dtoa_r+0x2b4>
 8005aa4:	f000 80a0 	beq.w	8005be8 <_dtoa_r+0x4b0>
 8005aa8:	f1ca 0600 	rsb	r6, sl, #0
 8005aac:	4b9f      	ldr	r3, [pc, #636]	; (8005d2c <_dtoa_r+0x5f4>)
 8005aae:	4fa0      	ldr	r7, [pc, #640]	; (8005d30 <_dtoa_r+0x5f8>)
 8005ab0:	f006 020f 	and.w	r2, r6, #15
 8005ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ac0:	f7fa fda2 	bl	8000608 <__aeabi_dmul>
 8005ac4:	e9cd 0100 	strd	r0, r1, [sp]
 8005ac8:	1136      	asrs	r6, r6, #4
 8005aca:	2300      	movs	r3, #0
 8005acc:	2502      	movs	r5, #2
 8005ace:	2e00      	cmp	r6, #0
 8005ad0:	d17f      	bne.n	8005bd2 <_dtoa_r+0x49a>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e1      	bne.n	8005a9a <_dtoa_r+0x362>
 8005ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8087 	beq.w	8005bec <_dtoa_r+0x4b4>
 8005ade:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4b93      	ldr	r3, [pc, #588]	; (8005d34 <_dtoa_r+0x5fc>)
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	4639      	mov	r1, r7
 8005aea:	f7fa ffff 	bl	8000aec <__aeabi_dcmplt>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d07c      	beq.n	8005bec <_dtoa_r+0x4b4>
 8005af2:	f1b9 0f00 	cmp.w	r9, #0
 8005af6:	d079      	beq.n	8005bec <_dtoa_r+0x4b4>
 8005af8:	9b02      	ldr	r3, [sp, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	dd35      	ble.n	8005b6a <_dtoa_r+0x432>
 8005afe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005b02:	9308      	str	r3, [sp, #32]
 8005b04:	4639      	mov	r1, r7
 8005b06:	2200      	movs	r2, #0
 8005b08:	4b8b      	ldr	r3, [pc, #556]	; (8005d38 <_dtoa_r+0x600>)
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f7fa fd7c 	bl	8000608 <__aeabi_dmul>
 8005b10:	e9cd 0100 	strd	r0, r1, [sp]
 8005b14:	9f02      	ldr	r7, [sp, #8]
 8005b16:	3501      	adds	r5, #1
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f7fa fd0b 	bl	8000534 <__aeabi_i2d>
 8005b1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b22:	f7fa fd71 	bl	8000608 <__aeabi_dmul>
 8005b26:	2200      	movs	r2, #0
 8005b28:	4b84      	ldr	r3, [pc, #528]	; (8005d3c <_dtoa_r+0x604>)
 8005b2a:	f7fa fbb7 	bl	800029c <__adddf3>
 8005b2e:	4605      	mov	r5, r0
 8005b30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b34:	2f00      	cmp	r7, #0
 8005b36:	d15d      	bne.n	8005bf4 <_dtoa_r+0x4bc>
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4b81      	ldr	r3, [pc, #516]	; (8005d40 <_dtoa_r+0x608>)
 8005b3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b40:	f7fa fbaa 	bl	8000298 <__aeabi_dsub>
 8005b44:	462a      	mov	r2, r5
 8005b46:	4633      	mov	r3, r6
 8005b48:	e9cd 0100 	strd	r0, r1, [sp]
 8005b4c:	f7fa ffec 	bl	8000b28 <__aeabi_dcmpgt>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	f040 8288 	bne.w	8006066 <_dtoa_r+0x92e>
 8005b56:	462a      	mov	r2, r5
 8005b58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005b5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b60:	f7fa ffc4 	bl	8000aec <__aeabi_dcmplt>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	f040 827c 	bne.w	8006062 <_dtoa_r+0x92a>
 8005b6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b6e:	e9cd 2300 	strd	r2, r3, [sp]
 8005b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f2c0 8150 	blt.w	8005e1a <_dtoa_r+0x6e2>
 8005b7a:	f1ba 0f0e 	cmp.w	sl, #14
 8005b7e:	f300 814c 	bgt.w	8005e1a <_dtoa_r+0x6e2>
 8005b82:	4b6a      	ldr	r3, [pc, #424]	; (8005d2c <_dtoa_r+0x5f4>)
 8005b84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b88:	ed93 7b00 	vldr	d7, [r3]
 8005b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b94:	f280 80d8 	bge.w	8005d48 <_dtoa_r+0x610>
 8005b98:	f1b9 0f00 	cmp.w	r9, #0
 8005b9c:	f300 80d4 	bgt.w	8005d48 <_dtoa_r+0x610>
 8005ba0:	f040 825e 	bne.w	8006060 <_dtoa_r+0x928>
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	4b66      	ldr	r3, [pc, #408]	; (8005d40 <_dtoa_r+0x608>)
 8005ba8:	ec51 0b17 	vmov	r0, r1, d7
 8005bac:	f7fa fd2c 	bl	8000608 <__aeabi_dmul>
 8005bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bb4:	f7fa ffae 	bl	8000b14 <__aeabi_dcmpge>
 8005bb8:	464f      	mov	r7, r9
 8005bba:	464e      	mov	r6, r9
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	f040 8234 	bne.w	800602a <_dtoa_r+0x8f2>
 8005bc2:	2331      	movs	r3, #49	; 0x31
 8005bc4:	f10b 0501 	add.w	r5, fp, #1
 8005bc8:	f88b 3000 	strb.w	r3, [fp]
 8005bcc:	f10a 0a01 	add.w	sl, sl, #1
 8005bd0:	e22f      	b.n	8006032 <_dtoa_r+0x8fa>
 8005bd2:	07f2      	lsls	r2, r6, #31
 8005bd4:	d505      	bpl.n	8005be2 <_dtoa_r+0x4aa>
 8005bd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bda:	f7fa fd15 	bl	8000608 <__aeabi_dmul>
 8005bde:	3501      	adds	r5, #1
 8005be0:	2301      	movs	r3, #1
 8005be2:	1076      	asrs	r6, r6, #1
 8005be4:	3708      	adds	r7, #8
 8005be6:	e772      	b.n	8005ace <_dtoa_r+0x396>
 8005be8:	2502      	movs	r5, #2
 8005bea:	e774      	b.n	8005ad6 <_dtoa_r+0x39e>
 8005bec:	f8cd a020 	str.w	sl, [sp, #32]
 8005bf0:	464f      	mov	r7, r9
 8005bf2:	e791      	b.n	8005b18 <_dtoa_r+0x3e0>
 8005bf4:	4b4d      	ldr	r3, [pc, #308]	; (8005d2c <_dtoa_r+0x5f4>)
 8005bf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005bfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d047      	beq.n	8005c94 <_dtoa_r+0x55c>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	2000      	movs	r0, #0
 8005c0a:	494e      	ldr	r1, [pc, #312]	; (8005d44 <_dtoa_r+0x60c>)
 8005c0c:	f7fa fe26 	bl	800085c <__aeabi_ddiv>
 8005c10:	462a      	mov	r2, r5
 8005c12:	4633      	mov	r3, r6
 8005c14:	f7fa fb40 	bl	8000298 <__aeabi_dsub>
 8005c18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c1c:	465d      	mov	r5, fp
 8005c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c22:	f7fa ffa1 	bl	8000b68 <__aeabi_d2iz>
 8005c26:	4606      	mov	r6, r0
 8005c28:	f7fa fc84 	bl	8000534 <__aeabi_i2d>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c34:	f7fa fb30 	bl	8000298 <__aeabi_dsub>
 8005c38:	3630      	adds	r6, #48	; 0x30
 8005c3a:	f805 6b01 	strb.w	r6, [r5], #1
 8005c3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c42:	e9cd 0100 	strd	r0, r1, [sp]
 8005c46:	f7fa ff51 	bl	8000aec <__aeabi_dcmplt>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d163      	bne.n	8005d16 <_dtoa_r+0x5de>
 8005c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c52:	2000      	movs	r0, #0
 8005c54:	4937      	ldr	r1, [pc, #220]	; (8005d34 <_dtoa_r+0x5fc>)
 8005c56:	f7fa fb1f 	bl	8000298 <__aeabi_dsub>
 8005c5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c5e:	f7fa ff45 	bl	8000aec <__aeabi_dcmplt>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	f040 80b7 	bne.w	8005dd6 <_dtoa_r+0x69e>
 8005c68:	eba5 030b 	sub.w	r3, r5, fp
 8005c6c:	429f      	cmp	r7, r3
 8005c6e:	f77f af7c 	ble.w	8005b6a <_dtoa_r+0x432>
 8005c72:	2200      	movs	r2, #0
 8005c74:	4b30      	ldr	r3, [pc, #192]	; (8005d38 <_dtoa_r+0x600>)
 8005c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c7a:	f7fa fcc5 	bl	8000608 <__aeabi_dmul>
 8005c7e:	2200      	movs	r2, #0
 8005c80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c84:	4b2c      	ldr	r3, [pc, #176]	; (8005d38 <_dtoa_r+0x600>)
 8005c86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c8a:	f7fa fcbd 	bl	8000608 <__aeabi_dmul>
 8005c8e:	e9cd 0100 	strd	r0, r1, [sp]
 8005c92:	e7c4      	b.n	8005c1e <_dtoa_r+0x4e6>
 8005c94:	462a      	mov	r2, r5
 8005c96:	4633      	mov	r3, r6
 8005c98:	f7fa fcb6 	bl	8000608 <__aeabi_dmul>
 8005c9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005ca0:	eb0b 0507 	add.w	r5, fp, r7
 8005ca4:	465e      	mov	r6, fp
 8005ca6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005caa:	f7fa ff5d 	bl	8000b68 <__aeabi_d2iz>
 8005cae:	4607      	mov	r7, r0
 8005cb0:	f7fa fc40 	bl	8000534 <__aeabi_i2d>
 8005cb4:	3730      	adds	r7, #48	; 0x30
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cbe:	f7fa faeb 	bl	8000298 <__aeabi_dsub>
 8005cc2:	f806 7b01 	strb.w	r7, [r6], #1
 8005cc6:	42ae      	cmp	r6, r5
 8005cc8:	e9cd 0100 	strd	r0, r1, [sp]
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	d126      	bne.n	8005d20 <_dtoa_r+0x5e8>
 8005cd2:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <_dtoa_r+0x60c>)
 8005cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cd8:	f7fa fae0 	bl	800029c <__adddf3>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ce4:	f7fa ff20 	bl	8000b28 <__aeabi_dcmpgt>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d174      	bne.n	8005dd6 <_dtoa_r+0x69e>
 8005cec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	4914      	ldr	r1, [pc, #80]	; (8005d44 <_dtoa_r+0x60c>)
 8005cf4:	f7fa fad0 	bl	8000298 <__aeabi_dsub>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d00:	f7fa fef4 	bl	8000aec <__aeabi_dcmplt>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f43f af30 	beq.w	8005b6a <_dtoa_r+0x432>
 8005d0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d0e:	2b30      	cmp	r3, #48	; 0x30
 8005d10:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005d14:	d002      	beq.n	8005d1c <_dtoa_r+0x5e4>
 8005d16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d1a:	e04a      	b.n	8005db2 <_dtoa_r+0x67a>
 8005d1c:	4615      	mov	r5, r2
 8005d1e:	e7f4      	b.n	8005d0a <_dtoa_r+0x5d2>
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <_dtoa_r+0x600>)
 8005d22:	f7fa fc71 	bl	8000608 <__aeabi_dmul>
 8005d26:	e9cd 0100 	strd	r0, r1, [sp]
 8005d2a:	e7bc      	b.n	8005ca6 <_dtoa_r+0x56e>
 8005d2c:	080071c0 	.word	0x080071c0
 8005d30:	08007198 	.word	0x08007198
 8005d34:	3ff00000 	.word	0x3ff00000
 8005d38:	40240000 	.word	0x40240000
 8005d3c:	401c0000 	.word	0x401c0000
 8005d40:	40140000 	.word	0x40140000
 8005d44:	3fe00000 	.word	0x3fe00000
 8005d48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005d4c:	465d      	mov	r5, fp
 8005d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d52:	4630      	mov	r0, r6
 8005d54:	4639      	mov	r1, r7
 8005d56:	f7fa fd81 	bl	800085c <__aeabi_ddiv>
 8005d5a:	f7fa ff05 	bl	8000b68 <__aeabi_d2iz>
 8005d5e:	4680      	mov	r8, r0
 8005d60:	f7fa fbe8 	bl	8000534 <__aeabi_i2d>
 8005d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d68:	f7fa fc4e 	bl	8000608 <__aeabi_dmul>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4630      	mov	r0, r6
 8005d72:	4639      	mov	r1, r7
 8005d74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005d78:	f7fa fa8e 	bl	8000298 <__aeabi_dsub>
 8005d7c:	f805 6b01 	strb.w	r6, [r5], #1
 8005d80:	eba5 060b 	sub.w	r6, r5, fp
 8005d84:	45b1      	cmp	r9, r6
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	d139      	bne.n	8005e00 <_dtoa_r+0x6c8>
 8005d8c:	f7fa fa86 	bl	800029c <__adddf3>
 8005d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d94:	4606      	mov	r6, r0
 8005d96:	460f      	mov	r7, r1
 8005d98:	f7fa fec6 	bl	8000b28 <__aeabi_dcmpgt>
 8005d9c:	b9c8      	cbnz	r0, 8005dd2 <_dtoa_r+0x69a>
 8005d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005da2:	4630      	mov	r0, r6
 8005da4:	4639      	mov	r1, r7
 8005da6:	f7fa fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 8005daa:	b110      	cbz	r0, 8005db2 <_dtoa_r+0x67a>
 8005dac:	f018 0f01 	tst.w	r8, #1
 8005db0:	d10f      	bne.n	8005dd2 <_dtoa_r+0x69a>
 8005db2:	9904      	ldr	r1, [sp, #16]
 8005db4:	4620      	mov	r0, r4
 8005db6:	f000 facc 	bl	8006352 <_Bfree>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dbe:	702b      	strb	r3, [r5, #0]
 8005dc0:	f10a 0301 	add.w	r3, sl, #1
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8241 	beq.w	8006250 <_dtoa_r+0xb18>
 8005dce:	601d      	str	r5, [r3, #0]
 8005dd0:	e23e      	b.n	8006250 <_dtoa_r+0xb18>
 8005dd2:	f8cd a020 	str.w	sl, [sp, #32]
 8005dd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005dda:	2a39      	cmp	r2, #57	; 0x39
 8005ddc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005de0:	d108      	bne.n	8005df4 <_dtoa_r+0x6bc>
 8005de2:	459b      	cmp	fp, r3
 8005de4:	d10a      	bne.n	8005dfc <_dtoa_r+0x6c4>
 8005de6:	9b08      	ldr	r3, [sp, #32]
 8005de8:	3301      	adds	r3, #1
 8005dea:	9308      	str	r3, [sp, #32]
 8005dec:	2330      	movs	r3, #48	; 0x30
 8005dee:	f88b 3000 	strb.w	r3, [fp]
 8005df2:	465b      	mov	r3, fp
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	3201      	adds	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	e78c      	b.n	8005d16 <_dtoa_r+0x5de>
 8005dfc:	461d      	mov	r5, r3
 8005dfe:	e7ea      	b.n	8005dd6 <_dtoa_r+0x69e>
 8005e00:	2200      	movs	r2, #0
 8005e02:	4b9b      	ldr	r3, [pc, #620]	; (8006070 <_dtoa_r+0x938>)
 8005e04:	f7fa fc00 	bl	8000608 <__aeabi_dmul>
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	460f      	mov	r7, r1
 8005e10:	f7fa fe62 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d09a      	beq.n	8005d4e <_dtoa_r+0x616>
 8005e18:	e7cb      	b.n	8005db2 <_dtoa_r+0x67a>
 8005e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e1c:	2a00      	cmp	r2, #0
 8005e1e:	f000 808b 	beq.w	8005f38 <_dtoa_r+0x800>
 8005e22:	9a06      	ldr	r2, [sp, #24]
 8005e24:	2a01      	cmp	r2, #1
 8005e26:	dc6e      	bgt.n	8005f06 <_dtoa_r+0x7ce>
 8005e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e2a:	2a00      	cmp	r2, #0
 8005e2c:	d067      	beq.n	8005efe <_dtoa_r+0x7c6>
 8005e2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e32:	9f07      	ldr	r7, [sp, #28]
 8005e34:	9d05      	ldr	r5, [sp, #20]
 8005e36:	9a05      	ldr	r2, [sp, #20]
 8005e38:	2101      	movs	r1, #1
 8005e3a:	441a      	add	r2, r3
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	9205      	str	r2, [sp, #20]
 8005e40:	4498      	add	r8, r3
 8005e42:	f000 fb26 	bl	8006492 <__i2b>
 8005e46:	4606      	mov	r6, r0
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	dd0c      	ble.n	8005e66 <_dtoa_r+0x72e>
 8005e4c:	f1b8 0f00 	cmp.w	r8, #0
 8005e50:	dd09      	ble.n	8005e66 <_dtoa_r+0x72e>
 8005e52:	4545      	cmp	r5, r8
 8005e54:	9a05      	ldr	r2, [sp, #20]
 8005e56:	462b      	mov	r3, r5
 8005e58:	bfa8      	it	ge
 8005e5a:	4643      	movge	r3, r8
 8005e5c:	1ad2      	subs	r2, r2, r3
 8005e5e:	9205      	str	r2, [sp, #20]
 8005e60:	1aed      	subs	r5, r5, r3
 8005e62:	eba8 0803 	sub.w	r8, r8, r3
 8005e66:	9b07      	ldr	r3, [sp, #28]
 8005e68:	b1eb      	cbz	r3, 8005ea6 <_dtoa_r+0x76e>
 8005e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d067      	beq.n	8005f40 <_dtoa_r+0x808>
 8005e70:	b18f      	cbz	r7, 8005e96 <_dtoa_r+0x75e>
 8005e72:	4631      	mov	r1, r6
 8005e74:	463a      	mov	r2, r7
 8005e76:	4620      	mov	r0, r4
 8005e78:	f000 fbaa 	bl	80065d0 <__pow5mult>
 8005e7c:	9a04      	ldr	r2, [sp, #16]
 8005e7e:	4601      	mov	r1, r0
 8005e80:	4606      	mov	r6, r0
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 fb0e 	bl	80064a4 <__multiply>
 8005e88:	9904      	ldr	r1, [sp, #16]
 8005e8a:	9008      	str	r0, [sp, #32]
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f000 fa60 	bl	8006352 <_Bfree>
 8005e92:	9b08      	ldr	r3, [sp, #32]
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	9b07      	ldr	r3, [sp, #28]
 8005e98:	1bda      	subs	r2, r3, r7
 8005e9a:	d004      	beq.n	8005ea6 <_dtoa_r+0x76e>
 8005e9c:	9904      	ldr	r1, [sp, #16]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 fb96 	bl	80065d0 <__pow5mult>
 8005ea4:	9004      	str	r0, [sp, #16]
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 faf2 	bl	8006492 <__i2b>
 8005eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 81d0 	beq.w	8006258 <_dtoa_r+0xb20>
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4601      	mov	r1, r0
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 fb87 	bl	80065d0 <__pow5mult>
 8005ec2:	9b06      	ldr	r3, [sp, #24]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	4607      	mov	r7, r0
 8005ec8:	dc40      	bgt.n	8005f4c <_dtoa_r+0x814>
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d139      	bne.n	8005f44 <_dtoa_r+0x80c>
 8005ed0:	9b01      	ldr	r3, [sp, #4]
 8005ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d136      	bne.n	8005f48 <_dtoa_r+0x810>
 8005eda:	9b01      	ldr	r3, [sp, #4]
 8005edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ee0:	0d1b      	lsrs	r3, r3, #20
 8005ee2:	051b      	lsls	r3, r3, #20
 8005ee4:	b12b      	cbz	r3, 8005ef2 <_dtoa_r+0x7ba>
 8005ee6:	9b05      	ldr	r3, [sp, #20]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	9305      	str	r3, [sp, #20]
 8005eec:	f108 0801 	add.w	r8, r8, #1
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	9307      	str	r3, [sp, #28]
 8005ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d12a      	bne.n	8005f50 <_dtoa_r+0x818>
 8005efa:	2001      	movs	r0, #1
 8005efc:	e030      	b.n	8005f60 <_dtoa_r+0x828>
 8005efe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f04:	e795      	b.n	8005e32 <_dtoa_r+0x6fa>
 8005f06:	9b07      	ldr	r3, [sp, #28]
 8005f08:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8005f0c:	42bb      	cmp	r3, r7
 8005f0e:	bfbf      	itttt	lt
 8005f10:	9b07      	ldrlt	r3, [sp, #28]
 8005f12:	9707      	strlt	r7, [sp, #28]
 8005f14:	1afa      	sublt	r2, r7, r3
 8005f16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005f18:	bfbb      	ittet	lt
 8005f1a:	189b      	addlt	r3, r3, r2
 8005f1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005f1e:	1bdf      	subge	r7, r3, r7
 8005f20:	2700      	movlt	r7, #0
 8005f22:	f1b9 0f00 	cmp.w	r9, #0
 8005f26:	bfb5      	itete	lt
 8005f28:	9b05      	ldrlt	r3, [sp, #20]
 8005f2a:	9d05      	ldrge	r5, [sp, #20]
 8005f2c:	eba3 0509 	sublt.w	r5, r3, r9
 8005f30:	464b      	movge	r3, r9
 8005f32:	bfb8      	it	lt
 8005f34:	2300      	movlt	r3, #0
 8005f36:	e77e      	b.n	8005e36 <_dtoa_r+0x6fe>
 8005f38:	9f07      	ldr	r7, [sp, #28]
 8005f3a:	9d05      	ldr	r5, [sp, #20]
 8005f3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005f3e:	e783      	b.n	8005e48 <_dtoa_r+0x710>
 8005f40:	9a07      	ldr	r2, [sp, #28]
 8005f42:	e7ab      	b.n	8005e9c <_dtoa_r+0x764>
 8005f44:	2300      	movs	r3, #0
 8005f46:	e7d4      	b.n	8005ef2 <_dtoa_r+0x7ba>
 8005f48:	9b00      	ldr	r3, [sp, #0]
 8005f4a:	e7d2      	b.n	8005ef2 <_dtoa_r+0x7ba>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9307      	str	r3, [sp, #28]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005f56:	6918      	ldr	r0, [r3, #16]
 8005f58:	f000 fa4d 	bl	80063f6 <__hi0bits>
 8005f5c:	f1c0 0020 	rsb	r0, r0, #32
 8005f60:	4440      	add	r0, r8
 8005f62:	f010 001f 	ands.w	r0, r0, #31
 8005f66:	d047      	beq.n	8005ff8 <_dtoa_r+0x8c0>
 8005f68:	f1c0 0320 	rsb	r3, r0, #32
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	dd3b      	ble.n	8005fe8 <_dtoa_r+0x8b0>
 8005f70:	9b05      	ldr	r3, [sp, #20]
 8005f72:	f1c0 001c 	rsb	r0, r0, #28
 8005f76:	4403      	add	r3, r0
 8005f78:	9305      	str	r3, [sp, #20]
 8005f7a:	4405      	add	r5, r0
 8005f7c:	4480      	add	r8, r0
 8005f7e:	9b05      	ldr	r3, [sp, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dd05      	ble.n	8005f90 <_dtoa_r+0x858>
 8005f84:	461a      	mov	r2, r3
 8005f86:	9904      	ldr	r1, [sp, #16]
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fb6f 	bl	800666c <__lshift>
 8005f8e:	9004      	str	r0, [sp, #16]
 8005f90:	f1b8 0f00 	cmp.w	r8, #0
 8005f94:	dd05      	ble.n	8005fa2 <_dtoa_r+0x86a>
 8005f96:	4639      	mov	r1, r7
 8005f98:	4642      	mov	r2, r8
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f000 fb66 	bl	800666c <__lshift>
 8005fa0:	4607      	mov	r7, r0
 8005fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fa4:	b353      	cbz	r3, 8005ffc <_dtoa_r+0x8c4>
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	9804      	ldr	r0, [sp, #16]
 8005faa:	f000 fbb3 	bl	8006714 <__mcmp>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	da24      	bge.n	8005ffc <_dtoa_r+0x8c4>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	220a      	movs	r2, #10
 8005fb6:	9904      	ldr	r1, [sp, #16]
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 f9e1 	bl	8006380 <__multadd>
 8005fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc0:	9004      	str	r0, [sp, #16]
 8005fc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 814d 	beq.w	8006266 <_dtoa_r+0xb2e>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4631      	mov	r1, r6
 8005fd0:	220a      	movs	r2, #10
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 f9d4 	bl	8006380 <__multadd>
 8005fd8:	9b02      	ldr	r3, [sp, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	4606      	mov	r6, r0
 8005fde:	dc4f      	bgt.n	8006080 <_dtoa_r+0x948>
 8005fe0:	9b06      	ldr	r3, [sp, #24]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	dd4c      	ble.n	8006080 <_dtoa_r+0x948>
 8005fe6:	e011      	b.n	800600c <_dtoa_r+0x8d4>
 8005fe8:	d0c9      	beq.n	8005f7e <_dtoa_r+0x846>
 8005fea:	9a05      	ldr	r2, [sp, #20]
 8005fec:	331c      	adds	r3, #28
 8005fee:	441a      	add	r2, r3
 8005ff0:	9205      	str	r2, [sp, #20]
 8005ff2:	441d      	add	r5, r3
 8005ff4:	4498      	add	r8, r3
 8005ff6:	e7c2      	b.n	8005f7e <_dtoa_r+0x846>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	e7f6      	b.n	8005fea <_dtoa_r+0x8b2>
 8005ffc:	f1b9 0f00 	cmp.w	r9, #0
 8006000:	dc38      	bgt.n	8006074 <_dtoa_r+0x93c>
 8006002:	9b06      	ldr	r3, [sp, #24]
 8006004:	2b02      	cmp	r3, #2
 8006006:	dd35      	ble.n	8006074 <_dtoa_r+0x93c>
 8006008:	f8cd 9008 	str.w	r9, [sp, #8]
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	b963      	cbnz	r3, 800602a <_dtoa_r+0x8f2>
 8006010:	4639      	mov	r1, r7
 8006012:	2205      	movs	r2, #5
 8006014:	4620      	mov	r0, r4
 8006016:	f000 f9b3 	bl	8006380 <__multadd>
 800601a:	4601      	mov	r1, r0
 800601c:	4607      	mov	r7, r0
 800601e:	9804      	ldr	r0, [sp, #16]
 8006020:	f000 fb78 	bl	8006714 <__mcmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	f73f adcc 	bgt.w	8005bc2 <_dtoa_r+0x48a>
 800602a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800602c:	465d      	mov	r5, fp
 800602e:	ea6f 0a03 	mvn.w	sl, r3
 8006032:	f04f 0900 	mov.w	r9, #0
 8006036:	4639      	mov	r1, r7
 8006038:	4620      	mov	r0, r4
 800603a:	f000 f98a 	bl	8006352 <_Bfree>
 800603e:	2e00      	cmp	r6, #0
 8006040:	f43f aeb7 	beq.w	8005db2 <_dtoa_r+0x67a>
 8006044:	f1b9 0f00 	cmp.w	r9, #0
 8006048:	d005      	beq.n	8006056 <_dtoa_r+0x91e>
 800604a:	45b1      	cmp	r9, r6
 800604c:	d003      	beq.n	8006056 <_dtoa_r+0x91e>
 800604e:	4649      	mov	r1, r9
 8006050:	4620      	mov	r0, r4
 8006052:	f000 f97e 	bl	8006352 <_Bfree>
 8006056:	4631      	mov	r1, r6
 8006058:	4620      	mov	r0, r4
 800605a:	f000 f97a 	bl	8006352 <_Bfree>
 800605e:	e6a8      	b.n	8005db2 <_dtoa_r+0x67a>
 8006060:	2700      	movs	r7, #0
 8006062:	463e      	mov	r6, r7
 8006064:	e7e1      	b.n	800602a <_dtoa_r+0x8f2>
 8006066:	f8dd a020 	ldr.w	sl, [sp, #32]
 800606a:	463e      	mov	r6, r7
 800606c:	e5a9      	b.n	8005bc2 <_dtoa_r+0x48a>
 800606e:	bf00      	nop
 8006070:	40240000 	.word	0x40240000
 8006074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006076:	f8cd 9008 	str.w	r9, [sp, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 80fa 	beq.w	8006274 <_dtoa_r+0xb3c>
 8006080:	2d00      	cmp	r5, #0
 8006082:	dd05      	ble.n	8006090 <_dtoa_r+0x958>
 8006084:	4631      	mov	r1, r6
 8006086:	462a      	mov	r2, r5
 8006088:	4620      	mov	r0, r4
 800608a:	f000 faef 	bl	800666c <__lshift>
 800608e:	4606      	mov	r6, r0
 8006090:	9b07      	ldr	r3, [sp, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d04c      	beq.n	8006130 <_dtoa_r+0x9f8>
 8006096:	6871      	ldr	r1, [r6, #4]
 8006098:	4620      	mov	r0, r4
 800609a:	f000 f926 	bl	80062ea <_Balloc>
 800609e:	6932      	ldr	r2, [r6, #16]
 80060a0:	3202      	adds	r2, #2
 80060a2:	4605      	mov	r5, r0
 80060a4:	0092      	lsls	r2, r2, #2
 80060a6:	f106 010c 	add.w	r1, r6, #12
 80060aa:	300c      	adds	r0, #12
 80060ac:	f000 f912 	bl	80062d4 <memcpy>
 80060b0:	2201      	movs	r2, #1
 80060b2:	4629      	mov	r1, r5
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 fad9 	bl	800666c <__lshift>
 80060ba:	9b00      	ldr	r3, [sp, #0]
 80060bc:	f8cd b014 	str.w	fp, [sp, #20]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	46b1      	mov	r9, r6
 80060c6:	9307      	str	r3, [sp, #28]
 80060c8:	4606      	mov	r6, r0
 80060ca:	4639      	mov	r1, r7
 80060cc:	9804      	ldr	r0, [sp, #16]
 80060ce:	f7ff faa5 	bl	800561c <quorem>
 80060d2:	4649      	mov	r1, r9
 80060d4:	4605      	mov	r5, r0
 80060d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80060da:	9804      	ldr	r0, [sp, #16]
 80060dc:	f000 fb1a 	bl	8006714 <__mcmp>
 80060e0:	4632      	mov	r2, r6
 80060e2:	9000      	str	r0, [sp, #0]
 80060e4:	4639      	mov	r1, r7
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 fb2e 	bl	8006748 <__mdiff>
 80060ec:	68c3      	ldr	r3, [r0, #12]
 80060ee:	4602      	mov	r2, r0
 80060f0:	bb03      	cbnz	r3, 8006134 <_dtoa_r+0x9fc>
 80060f2:	4601      	mov	r1, r0
 80060f4:	9008      	str	r0, [sp, #32]
 80060f6:	9804      	ldr	r0, [sp, #16]
 80060f8:	f000 fb0c 	bl	8006714 <__mcmp>
 80060fc:	9a08      	ldr	r2, [sp, #32]
 80060fe:	4603      	mov	r3, r0
 8006100:	4611      	mov	r1, r2
 8006102:	4620      	mov	r0, r4
 8006104:	9308      	str	r3, [sp, #32]
 8006106:	f000 f924 	bl	8006352 <_Bfree>
 800610a:	9b08      	ldr	r3, [sp, #32]
 800610c:	b9a3      	cbnz	r3, 8006138 <_dtoa_r+0xa00>
 800610e:	9a06      	ldr	r2, [sp, #24]
 8006110:	b992      	cbnz	r2, 8006138 <_dtoa_r+0xa00>
 8006112:	9a07      	ldr	r2, [sp, #28]
 8006114:	b982      	cbnz	r2, 8006138 <_dtoa_r+0xa00>
 8006116:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800611a:	d029      	beq.n	8006170 <_dtoa_r+0xa38>
 800611c:	9b00      	ldr	r3, [sp, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	dd01      	ble.n	8006126 <_dtoa_r+0x9ee>
 8006122:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006126:	9b05      	ldr	r3, [sp, #20]
 8006128:	1c5d      	adds	r5, r3, #1
 800612a:	f883 8000 	strb.w	r8, [r3]
 800612e:	e782      	b.n	8006036 <_dtoa_r+0x8fe>
 8006130:	4630      	mov	r0, r6
 8006132:	e7c2      	b.n	80060ba <_dtoa_r+0x982>
 8006134:	2301      	movs	r3, #1
 8006136:	e7e3      	b.n	8006100 <_dtoa_r+0x9c8>
 8006138:	9a00      	ldr	r2, [sp, #0]
 800613a:	2a00      	cmp	r2, #0
 800613c:	db04      	blt.n	8006148 <_dtoa_r+0xa10>
 800613e:	d125      	bne.n	800618c <_dtoa_r+0xa54>
 8006140:	9a06      	ldr	r2, [sp, #24]
 8006142:	bb1a      	cbnz	r2, 800618c <_dtoa_r+0xa54>
 8006144:	9a07      	ldr	r2, [sp, #28]
 8006146:	bb0a      	cbnz	r2, 800618c <_dtoa_r+0xa54>
 8006148:	2b00      	cmp	r3, #0
 800614a:	ddec      	ble.n	8006126 <_dtoa_r+0x9ee>
 800614c:	2201      	movs	r2, #1
 800614e:	9904      	ldr	r1, [sp, #16]
 8006150:	4620      	mov	r0, r4
 8006152:	f000 fa8b 	bl	800666c <__lshift>
 8006156:	4639      	mov	r1, r7
 8006158:	9004      	str	r0, [sp, #16]
 800615a:	f000 fadb 	bl	8006714 <__mcmp>
 800615e:	2800      	cmp	r0, #0
 8006160:	dc03      	bgt.n	800616a <_dtoa_r+0xa32>
 8006162:	d1e0      	bne.n	8006126 <_dtoa_r+0x9ee>
 8006164:	f018 0f01 	tst.w	r8, #1
 8006168:	d0dd      	beq.n	8006126 <_dtoa_r+0x9ee>
 800616a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800616e:	d1d8      	bne.n	8006122 <_dtoa_r+0x9ea>
 8006170:	9b05      	ldr	r3, [sp, #20]
 8006172:	9a05      	ldr	r2, [sp, #20]
 8006174:	1c5d      	adds	r5, r3, #1
 8006176:	2339      	movs	r3, #57	; 0x39
 8006178:	7013      	strb	r3, [r2, #0]
 800617a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800617e:	2b39      	cmp	r3, #57	; 0x39
 8006180:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006184:	d04f      	beq.n	8006226 <_dtoa_r+0xaee>
 8006186:	3301      	adds	r3, #1
 8006188:	7013      	strb	r3, [r2, #0]
 800618a:	e754      	b.n	8006036 <_dtoa_r+0x8fe>
 800618c:	9a05      	ldr	r2, [sp, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f102 0501 	add.w	r5, r2, #1
 8006194:	dd06      	ble.n	80061a4 <_dtoa_r+0xa6c>
 8006196:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800619a:	d0e9      	beq.n	8006170 <_dtoa_r+0xa38>
 800619c:	f108 0801 	add.w	r8, r8, #1
 80061a0:	9b05      	ldr	r3, [sp, #20]
 80061a2:	e7c2      	b.n	800612a <_dtoa_r+0x9f2>
 80061a4:	9a02      	ldr	r2, [sp, #8]
 80061a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80061aa:	eba5 030b 	sub.w	r3, r5, fp
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d021      	beq.n	80061f6 <_dtoa_r+0xabe>
 80061b2:	2300      	movs	r3, #0
 80061b4:	220a      	movs	r2, #10
 80061b6:	9904      	ldr	r1, [sp, #16]
 80061b8:	4620      	mov	r0, r4
 80061ba:	f000 f8e1 	bl	8006380 <__multadd>
 80061be:	45b1      	cmp	r9, r6
 80061c0:	9004      	str	r0, [sp, #16]
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	f04f 020a 	mov.w	r2, #10
 80061ca:	4649      	mov	r1, r9
 80061cc:	4620      	mov	r0, r4
 80061ce:	d105      	bne.n	80061dc <_dtoa_r+0xaa4>
 80061d0:	f000 f8d6 	bl	8006380 <__multadd>
 80061d4:	4681      	mov	r9, r0
 80061d6:	4606      	mov	r6, r0
 80061d8:	9505      	str	r5, [sp, #20]
 80061da:	e776      	b.n	80060ca <_dtoa_r+0x992>
 80061dc:	f000 f8d0 	bl	8006380 <__multadd>
 80061e0:	4631      	mov	r1, r6
 80061e2:	4681      	mov	r9, r0
 80061e4:	2300      	movs	r3, #0
 80061e6:	220a      	movs	r2, #10
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 f8c9 	bl	8006380 <__multadd>
 80061ee:	4606      	mov	r6, r0
 80061f0:	e7f2      	b.n	80061d8 <_dtoa_r+0xaa0>
 80061f2:	f04f 0900 	mov.w	r9, #0
 80061f6:	2201      	movs	r2, #1
 80061f8:	9904      	ldr	r1, [sp, #16]
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 fa36 	bl	800666c <__lshift>
 8006200:	4639      	mov	r1, r7
 8006202:	9004      	str	r0, [sp, #16]
 8006204:	f000 fa86 	bl	8006714 <__mcmp>
 8006208:	2800      	cmp	r0, #0
 800620a:	dcb6      	bgt.n	800617a <_dtoa_r+0xa42>
 800620c:	d102      	bne.n	8006214 <_dtoa_r+0xadc>
 800620e:	f018 0f01 	tst.w	r8, #1
 8006212:	d1b2      	bne.n	800617a <_dtoa_r+0xa42>
 8006214:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006218:	2b30      	cmp	r3, #48	; 0x30
 800621a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800621e:	f47f af0a 	bne.w	8006036 <_dtoa_r+0x8fe>
 8006222:	4615      	mov	r5, r2
 8006224:	e7f6      	b.n	8006214 <_dtoa_r+0xadc>
 8006226:	4593      	cmp	fp, r2
 8006228:	d105      	bne.n	8006236 <_dtoa_r+0xafe>
 800622a:	2331      	movs	r3, #49	; 0x31
 800622c:	f10a 0a01 	add.w	sl, sl, #1
 8006230:	f88b 3000 	strb.w	r3, [fp]
 8006234:	e6ff      	b.n	8006036 <_dtoa_r+0x8fe>
 8006236:	4615      	mov	r5, r2
 8006238:	e79f      	b.n	800617a <_dtoa_r+0xa42>
 800623a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80062a0 <_dtoa_r+0xb68>
 800623e:	e007      	b.n	8006250 <_dtoa_r+0xb18>
 8006240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006242:	f8df b060 	ldr.w	fp, [pc, #96]	; 80062a4 <_dtoa_r+0xb6c>
 8006246:	b11b      	cbz	r3, 8006250 <_dtoa_r+0xb18>
 8006248:	f10b 0308 	add.w	r3, fp, #8
 800624c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	4658      	mov	r0, fp
 8006252:	b017      	add	sp, #92	; 0x5c
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	9b06      	ldr	r3, [sp, #24]
 800625a:	2b01      	cmp	r3, #1
 800625c:	f77f ae35 	ble.w	8005eca <_dtoa_r+0x792>
 8006260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006262:	9307      	str	r3, [sp, #28]
 8006264:	e649      	b.n	8005efa <_dtoa_r+0x7c2>
 8006266:	9b02      	ldr	r3, [sp, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	dc03      	bgt.n	8006274 <_dtoa_r+0xb3c>
 800626c:	9b06      	ldr	r3, [sp, #24]
 800626e:	2b02      	cmp	r3, #2
 8006270:	f73f aecc 	bgt.w	800600c <_dtoa_r+0x8d4>
 8006274:	465d      	mov	r5, fp
 8006276:	4639      	mov	r1, r7
 8006278:	9804      	ldr	r0, [sp, #16]
 800627a:	f7ff f9cf 	bl	800561c <quorem>
 800627e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006282:	f805 8b01 	strb.w	r8, [r5], #1
 8006286:	9a02      	ldr	r2, [sp, #8]
 8006288:	eba5 030b 	sub.w	r3, r5, fp
 800628c:	429a      	cmp	r2, r3
 800628e:	ddb0      	ble.n	80061f2 <_dtoa_r+0xaba>
 8006290:	2300      	movs	r3, #0
 8006292:	220a      	movs	r2, #10
 8006294:	9904      	ldr	r1, [sp, #16]
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f872 	bl	8006380 <__multadd>
 800629c:	9004      	str	r0, [sp, #16]
 800629e:	e7ea      	b.n	8006276 <_dtoa_r+0xb3e>
 80062a0:	08007164 	.word	0x08007164
 80062a4:	08007188 	.word	0x08007188

080062a8 <_localeconv_r>:
 80062a8:	4b04      	ldr	r3, [pc, #16]	; (80062bc <_localeconv_r+0x14>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a18      	ldr	r0, [r3, #32]
 80062ae:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <_localeconv_r+0x18>)
 80062b0:	2800      	cmp	r0, #0
 80062b2:	bf08      	it	eq
 80062b4:	4618      	moveq	r0, r3
 80062b6:	30f0      	adds	r0, #240	; 0xf0
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	2000000c 	.word	0x2000000c
 80062c0:	20000070 	.word	0x20000070

080062c4 <malloc>:
 80062c4:	4b02      	ldr	r3, [pc, #8]	; (80062d0 <malloc+0xc>)
 80062c6:	4601      	mov	r1, r0
 80062c8:	6818      	ldr	r0, [r3, #0]
 80062ca:	f000 bb45 	b.w	8006958 <_malloc_r>
 80062ce:	bf00      	nop
 80062d0:	2000000c 	.word	0x2000000c

080062d4 <memcpy>:
 80062d4:	b510      	push	{r4, lr}
 80062d6:	1e43      	subs	r3, r0, #1
 80062d8:	440a      	add	r2, r1
 80062da:	4291      	cmp	r1, r2
 80062dc:	d100      	bne.n	80062e0 <memcpy+0xc>
 80062de:	bd10      	pop	{r4, pc}
 80062e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062e8:	e7f7      	b.n	80062da <memcpy+0x6>

080062ea <_Balloc>:
 80062ea:	b570      	push	{r4, r5, r6, lr}
 80062ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062ee:	4604      	mov	r4, r0
 80062f0:	460e      	mov	r6, r1
 80062f2:	b93d      	cbnz	r5, 8006304 <_Balloc+0x1a>
 80062f4:	2010      	movs	r0, #16
 80062f6:	f7ff ffe5 	bl	80062c4 <malloc>
 80062fa:	6260      	str	r0, [r4, #36]	; 0x24
 80062fc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006300:	6005      	str	r5, [r0, #0]
 8006302:	60c5      	str	r5, [r0, #12]
 8006304:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006306:	68eb      	ldr	r3, [r5, #12]
 8006308:	b183      	cbz	r3, 800632c <_Balloc+0x42>
 800630a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006312:	b9b8      	cbnz	r0, 8006344 <_Balloc+0x5a>
 8006314:	2101      	movs	r1, #1
 8006316:	fa01 f506 	lsl.w	r5, r1, r6
 800631a:	1d6a      	adds	r2, r5, #5
 800631c:	0092      	lsls	r2, r2, #2
 800631e:	4620      	mov	r0, r4
 8006320:	f000 fabe 	bl	80068a0 <_calloc_r>
 8006324:	b160      	cbz	r0, 8006340 <_Balloc+0x56>
 8006326:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800632a:	e00e      	b.n	800634a <_Balloc+0x60>
 800632c:	2221      	movs	r2, #33	; 0x21
 800632e:	2104      	movs	r1, #4
 8006330:	4620      	mov	r0, r4
 8006332:	f000 fab5 	bl	80068a0 <_calloc_r>
 8006336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006338:	60e8      	str	r0, [r5, #12]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e4      	bne.n	800630a <_Balloc+0x20>
 8006340:	2000      	movs	r0, #0
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	6802      	ldr	r2, [r0, #0]
 8006346:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800634a:	2300      	movs	r3, #0
 800634c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006350:	e7f7      	b.n	8006342 <_Balloc+0x58>

08006352 <_Bfree>:
 8006352:	b570      	push	{r4, r5, r6, lr}
 8006354:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006356:	4606      	mov	r6, r0
 8006358:	460d      	mov	r5, r1
 800635a:	b93c      	cbnz	r4, 800636c <_Bfree+0x1a>
 800635c:	2010      	movs	r0, #16
 800635e:	f7ff ffb1 	bl	80062c4 <malloc>
 8006362:	6270      	str	r0, [r6, #36]	; 0x24
 8006364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006368:	6004      	str	r4, [r0, #0]
 800636a:	60c4      	str	r4, [r0, #12]
 800636c:	b13d      	cbz	r5, 800637e <_Bfree+0x2c>
 800636e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006370:	686a      	ldr	r2, [r5, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006378:	6029      	str	r1, [r5, #0]
 800637a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800637e:	bd70      	pop	{r4, r5, r6, pc}

08006380 <__multadd>:
 8006380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006384:	690d      	ldr	r5, [r1, #16]
 8006386:	461f      	mov	r7, r3
 8006388:	4606      	mov	r6, r0
 800638a:	460c      	mov	r4, r1
 800638c:	f101 0c14 	add.w	ip, r1, #20
 8006390:	2300      	movs	r3, #0
 8006392:	f8dc 0000 	ldr.w	r0, [ip]
 8006396:	b281      	uxth	r1, r0
 8006398:	fb02 7101 	mla	r1, r2, r1, r7
 800639c:	0c0f      	lsrs	r7, r1, #16
 800639e:	0c00      	lsrs	r0, r0, #16
 80063a0:	fb02 7000 	mla	r0, r2, r0, r7
 80063a4:	b289      	uxth	r1, r1
 80063a6:	3301      	adds	r3, #1
 80063a8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80063ac:	429d      	cmp	r5, r3
 80063ae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80063b2:	f84c 1b04 	str.w	r1, [ip], #4
 80063b6:	dcec      	bgt.n	8006392 <__multadd+0x12>
 80063b8:	b1d7      	cbz	r7, 80063f0 <__multadd+0x70>
 80063ba:	68a3      	ldr	r3, [r4, #8]
 80063bc:	42ab      	cmp	r3, r5
 80063be:	dc12      	bgt.n	80063e6 <__multadd+0x66>
 80063c0:	6861      	ldr	r1, [r4, #4]
 80063c2:	4630      	mov	r0, r6
 80063c4:	3101      	adds	r1, #1
 80063c6:	f7ff ff90 	bl	80062ea <_Balloc>
 80063ca:	6922      	ldr	r2, [r4, #16]
 80063cc:	3202      	adds	r2, #2
 80063ce:	f104 010c 	add.w	r1, r4, #12
 80063d2:	4680      	mov	r8, r0
 80063d4:	0092      	lsls	r2, r2, #2
 80063d6:	300c      	adds	r0, #12
 80063d8:	f7ff ff7c 	bl	80062d4 <memcpy>
 80063dc:	4621      	mov	r1, r4
 80063de:	4630      	mov	r0, r6
 80063e0:	f7ff ffb7 	bl	8006352 <_Bfree>
 80063e4:	4644      	mov	r4, r8
 80063e6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063ea:	3501      	adds	r5, #1
 80063ec:	615f      	str	r7, [r3, #20]
 80063ee:	6125      	str	r5, [r4, #16]
 80063f0:	4620      	mov	r0, r4
 80063f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080063f6 <__hi0bits>:
 80063f6:	0c02      	lsrs	r2, r0, #16
 80063f8:	0412      	lsls	r2, r2, #16
 80063fa:	4603      	mov	r3, r0
 80063fc:	b9b2      	cbnz	r2, 800642c <__hi0bits+0x36>
 80063fe:	0403      	lsls	r3, r0, #16
 8006400:	2010      	movs	r0, #16
 8006402:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006406:	bf04      	itt	eq
 8006408:	021b      	lsleq	r3, r3, #8
 800640a:	3008      	addeq	r0, #8
 800640c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006410:	bf04      	itt	eq
 8006412:	011b      	lsleq	r3, r3, #4
 8006414:	3004      	addeq	r0, #4
 8006416:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800641a:	bf04      	itt	eq
 800641c:	009b      	lsleq	r3, r3, #2
 800641e:	3002      	addeq	r0, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	db06      	blt.n	8006432 <__hi0bits+0x3c>
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	d503      	bpl.n	8006430 <__hi0bits+0x3a>
 8006428:	3001      	adds	r0, #1
 800642a:	4770      	bx	lr
 800642c:	2000      	movs	r0, #0
 800642e:	e7e8      	b.n	8006402 <__hi0bits+0xc>
 8006430:	2020      	movs	r0, #32
 8006432:	4770      	bx	lr

08006434 <__lo0bits>:
 8006434:	6803      	ldr	r3, [r0, #0]
 8006436:	f013 0207 	ands.w	r2, r3, #7
 800643a:	4601      	mov	r1, r0
 800643c:	d00b      	beq.n	8006456 <__lo0bits+0x22>
 800643e:	07da      	lsls	r2, r3, #31
 8006440:	d423      	bmi.n	800648a <__lo0bits+0x56>
 8006442:	0798      	lsls	r0, r3, #30
 8006444:	bf49      	itett	mi
 8006446:	085b      	lsrmi	r3, r3, #1
 8006448:	089b      	lsrpl	r3, r3, #2
 800644a:	2001      	movmi	r0, #1
 800644c:	600b      	strmi	r3, [r1, #0]
 800644e:	bf5c      	itt	pl
 8006450:	600b      	strpl	r3, [r1, #0]
 8006452:	2002      	movpl	r0, #2
 8006454:	4770      	bx	lr
 8006456:	b298      	uxth	r0, r3
 8006458:	b9a8      	cbnz	r0, 8006486 <__lo0bits+0x52>
 800645a:	0c1b      	lsrs	r3, r3, #16
 800645c:	2010      	movs	r0, #16
 800645e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006462:	bf04      	itt	eq
 8006464:	0a1b      	lsreq	r3, r3, #8
 8006466:	3008      	addeq	r0, #8
 8006468:	071a      	lsls	r2, r3, #28
 800646a:	bf04      	itt	eq
 800646c:	091b      	lsreq	r3, r3, #4
 800646e:	3004      	addeq	r0, #4
 8006470:	079a      	lsls	r2, r3, #30
 8006472:	bf04      	itt	eq
 8006474:	089b      	lsreq	r3, r3, #2
 8006476:	3002      	addeq	r0, #2
 8006478:	07da      	lsls	r2, r3, #31
 800647a:	d402      	bmi.n	8006482 <__lo0bits+0x4e>
 800647c:	085b      	lsrs	r3, r3, #1
 800647e:	d006      	beq.n	800648e <__lo0bits+0x5a>
 8006480:	3001      	adds	r0, #1
 8006482:	600b      	str	r3, [r1, #0]
 8006484:	4770      	bx	lr
 8006486:	4610      	mov	r0, r2
 8006488:	e7e9      	b.n	800645e <__lo0bits+0x2a>
 800648a:	2000      	movs	r0, #0
 800648c:	4770      	bx	lr
 800648e:	2020      	movs	r0, #32
 8006490:	4770      	bx	lr

08006492 <__i2b>:
 8006492:	b510      	push	{r4, lr}
 8006494:	460c      	mov	r4, r1
 8006496:	2101      	movs	r1, #1
 8006498:	f7ff ff27 	bl	80062ea <_Balloc>
 800649c:	2201      	movs	r2, #1
 800649e:	6144      	str	r4, [r0, #20]
 80064a0:	6102      	str	r2, [r0, #16]
 80064a2:	bd10      	pop	{r4, pc}

080064a4 <__multiply>:
 80064a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	4614      	mov	r4, r2
 80064aa:	690a      	ldr	r2, [r1, #16]
 80064ac:	6923      	ldr	r3, [r4, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	bfb8      	it	lt
 80064b2:	460b      	movlt	r3, r1
 80064b4:	4688      	mov	r8, r1
 80064b6:	bfbc      	itt	lt
 80064b8:	46a0      	movlt	r8, r4
 80064ba:	461c      	movlt	r4, r3
 80064bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80064c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064cc:	eb07 0609 	add.w	r6, r7, r9
 80064d0:	42b3      	cmp	r3, r6
 80064d2:	bfb8      	it	lt
 80064d4:	3101      	addlt	r1, #1
 80064d6:	f7ff ff08 	bl	80062ea <_Balloc>
 80064da:	f100 0514 	add.w	r5, r0, #20
 80064de:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80064e2:	462b      	mov	r3, r5
 80064e4:	2200      	movs	r2, #0
 80064e6:	4573      	cmp	r3, lr
 80064e8:	d316      	bcc.n	8006518 <__multiply+0x74>
 80064ea:	f104 0214 	add.w	r2, r4, #20
 80064ee:	f108 0114 	add.w	r1, r8, #20
 80064f2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80064f6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	9b00      	ldr	r3, [sp, #0]
 80064fe:	9201      	str	r2, [sp, #4]
 8006500:	4293      	cmp	r3, r2
 8006502:	d80c      	bhi.n	800651e <__multiply+0x7a>
 8006504:	2e00      	cmp	r6, #0
 8006506:	dd03      	ble.n	8006510 <__multiply+0x6c>
 8006508:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05d      	beq.n	80065cc <__multiply+0x128>
 8006510:	6106      	str	r6, [r0, #16]
 8006512:	b003      	add	sp, #12
 8006514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006518:	f843 2b04 	str.w	r2, [r3], #4
 800651c:	e7e3      	b.n	80064e6 <__multiply+0x42>
 800651e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006522:	f1bb 0f00 	cmp.w	fp, #0
 8006526:	d023      	beq.n	8006570 <__multiply+0xcc>
 8006528:	4689      	mov	r9, r1
 800652a:	46ac      	mov	ip, r5
 800652c:	f04f 0800 	mov.w	r8, #0
 8006530:	f859 4b04 	ldr.w	r4, [r9], #4
 8006534:	f8dc a000 	ldr.w	sl, [ip]
 8006538:	b2a3      	uxth	r3, r4
 800653a:	fa1f fa8a 	uxth.w	sl, sl
 800653e:	fb0b a303 	mla	r3, fp, r3, sl
 8006542:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006546:	f8dc 4000 	ldr.w	r4, [ip]
 800654a:	4443      	add	r3, r8
 800654c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006550:	fb0b 840a 	mla	r4, fp, sl, r8
 8006554:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006558:	46e2      	mov	sl, ip
 800655a:	b29b      	uxth	r3, r3
 800655c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006560:	454f      	cmp	r7, r9
 8006562:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006566:	f84a 3b04 	str.w	r3, [sl], #4
 800656a:	d82b      	bhi.n	80065c4 <__multiply+0x120>
 800656c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006576:	3204      	adds	r2, #4
 8006578:	f1ba 0f00 	cmp.w	sl, #0
 800657c:	d020      	beq.n	80065c0 <__multiply+0x11c>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	4689      	mov	r9, r1
 8006582:	46a8      	mov	r8, r5
 8006584:	f04f 0b00 	mov.w	fp, #0
 8006588:	f8b9 c000 	ldrh.w	ip, [r9]
 800658c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006590:	fb0a 440c 	mla	r4, sl, ip, r4
 8006594:	445c      	add	r4, fp
 8006596:	46c4      	mov	ip, r8
 8006598:	b29b      	uxth	r3, r3
 800659a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800659e:	f84c 3b04 	str.w	r3, [ip], #4
 80065a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80065a6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80065aa:	0c1b      	lsrs	r3, r3, #16
 80065ac:	fb0a b303 	mla	r3, sl, r3, fp
 80065b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80065b4:	454f      	cmp	r7, r9
 80065b6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80065ba:	d805      	bhi.n	80065c8 <__multiply+0x124>
 80065bc:	f8c8 3004 	str.w	r3, [r8, #4]
 80065c0:	3504      	adds	r5, #4
 80065c2:	e79b      	b.n	80064fc <__multiply+0x58>
 80065c4:	46d4      	mov	ip, sl
 80065c6:	e7b3      	b.n	8006530 <__multiply+0x8c>
 80065c8:	46e0      	mov	r8, ip
 80065ca:	e7dd      	b.n	8006588 <__multiply+0xe4>
 80065cc:	3e01      	subs	r6, #1
 80065ce:	e799      	b.n	8006504 <__multiply+0x60>

080065d0 <__pow5mult>:
 80065d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d4:	4615      	mov	r5, r2
 80065d6:	f012 0203 	ands.w	r2, r2, #3
 80065da:	4606      	mov	r6, r0
 80065dc:	460f      	mov	r7, r1
 80065de:	d007      	beq.n	80065f0 <__pow5mult+0x20>
 80065e0:	3a01      	subs	r2, #1
 80065e2:	4c21      	ldr	r4, [pc, #132]	; (8006668 <__pow5mult+0x98>)
 80065e4:	2300      	movs	r3, #0
 80065e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065ea:	f7ff fec9 	bl	8006380 <__multadd>
 80065ee:	4607      	mov	r7, r0
 80065f0:	10ad      	asrs	r5, r5, #2
 80065f2:	d035      	beq.n	8006660 <__pow5mult+0x90>
 80065f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065f6:	b93c      	cbnz	r4, 8006608 <__pow5mult+0x38>
 80065f8:	2010      	movs	r0, #16
 80065fa:	f7ff fe63 	bl	80062c4 <malloc>
 80065fe:	6270      	str	r0, [r6, #36]	; 0x24
 8006600:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006604:	6004      	str	r4, [r0, #0]
 8006606:	60c4      	str	r4, [r0, #12]
 8006608:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800660c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006610:	b94c      	cbnz	r4, 8006626 <__pow5mult+0x56>
 8006612:	f240 2171 	movw	r1, #625	; 0x271
 8006616:	4630      	mov	r0, r6
 8006618:	f7ff ff3b 	bl	8006492 <__i2b>
 800661c:	2300      	movs	r3, #0
 800661e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006622:	4604      	mov	r4, r0
 8006624:	6003      	str	r3, [r0, #0]
 8006626:	f04f 0800 	mov.w	r8, #0
 800662a:	07eb      	lsls	r3, r5, #31
 800662c:	d50a      	bpl.n	8006644 <__pow5mult+0x74>
 800662e:	4639      	mov	r1, r7
 8006630:	4622      	mov	r2, r4
 8006632:	4630      	mov	r0, r6
 8006634:	f7ff ff36 	bl	80064a4 <__multiply>
 8006638:	4639      	mov	r1, r7
 800663a:	4681      	mov	r9, r0
 800663c:	4630      	mov	r0, r6
 800663e:	f7ff fe88 	bl	8006352 <_Bfree>
 8006642:	464f      	mov	r7, r9
 8006644:	106d      	asrs	r5, r5, #1
 8006646:	d00b      	beq.n	8006660 <__pow5mult+0x90>
 8006648:	6820      	ldr	r0, [r4, #0]
 800664a:	b938      	cbnz	r0, 800665c <__pow5mult+0x8c>
 800664c:	4622      	mov	r2, r4
 800664e:	4621      	mov	r1, r4
 8006650:	4630      	mov	r0, r6
 8006652:	f7ff ff27 	bl	80064a4 <__multiply>
 8006656:	6020      	str	r0, [r4, #0]
 8006658:	f8c0 8000 	str.w	r8, [r0]
 800665c:	4604      	mov	r4, r0
 800665e:	e7e4      	b.n	800662a <__pow5mult+0x5a>
 8006660:	4638      	mov	r0, r7
 8006662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006666:	bf00      	nop
 8006668:	08007288 	.word	0x08007288

0800666c <__lshift>:
 800666c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006670:	460c      	mov	r4, r1
 8006672:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	6849      	ldr	r1, [r1, #4]
 800667a:	eb0a 0903 	add.w	r9, sl, r3
 800667e:	68a3      	ldr	r3, [r4, #8]
 8006680:	4607      	mov	r7, r0
 8006682:	4616      	mov	r6, r2
 8006684:	f109 0501 	add.w	r5, r9, #1
 8006688:	42ab      	cmp	r3, r5
 800668a:	db32      	blt.n	80066f2 <__lshift+0x86>
 800668c:	4638      	mov	r0, r7
 800668e:	f7ff fe2c 	bl	80062ea <_Balloc>
 8006692:	2300      	movs	r3, #0
 8006694:	4680      	mov	r8, r0
 8006696:	f100 0114 	add.w	r1, r0, #20
 800669a:	461a      	mov	r2, r3
 800669c:	4553      	cmp	r3, sl
 800669e:	db2b      	blt.n	80066f8 <__lshift+0x8c>
 80066a0:	6920      	ldr	r0, [r4, #16]
 80066a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066a6:	f104 0314 	add.w	r3, r4, #20
 80066aa:	f016 021f 	ands.w	r2, r6, #31
 80066ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066b2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066b6:	d025      	beq.n	8006704 <__lshift+0x98>
 80066b8:	f1c2 0e20 	rsb	lr, r2, #32
 80066bc:	2000      	movs	r0, #0
 80066be:	681e      	ldr	r6, [r3, #0]
 80066c0:	468a      	mov	sl, r1
 80066c2:	4096      	lsls	r6, r2
 80066c4:	4330      	orrs	r0, r6
 80066c6:	f84a 0b04 	str.w	r0, [sl], #4
 80066ca:	f853 0b04 	ldr.w	r0, [r3], #4
 80066ce:	459c      	cmp	ip, r3
 80066d0:	fa20 f00e 	lsr.w	r0, r0, lr
 80066d4:	d814      	bhi.n	8006700 <__lshift+0x94>
 80066d6:	6048      	str	r0, [r1, #4]
 80066d8:	b108      	cbz	r0, 80066de <__lshift+0x72>
 80066da:	f109 0502 	add.w	r5, r9, #2
 80066de:	3d01      	subs	r5, #1
 80066e0:	4638      	mov	r0, r7
 80066e2:	f8c8 5010 	str.w	r5, [r8, #16]
 80066e6:	4621      	mov	r1, r4
 80066e8:	f7ff fe33 	bl	8006352 <_Bfree>
 80066ec:	4640      	mov	r0, r8
 80066ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f2:	3101      	adds	r1, #1
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	e7c7      	b.n	8006688 <__lshift+0x1c>
 80066f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80066fc:	3301      	adds	r3, #1
 80066fe:	e7cd      	b.n	800669c <__lshift+0x30>
 8006700:	4651      	mov	r1, sl
 8006702:	e7dc      	b.n	80066be <__lshift+0x52>
 8006704:	3904      	subs	r1, #4
 8006706:	f853 2b04 	ldr.w	r2, [r3], #4
 800670a:	f841 2f04 	str.w	r2, [r1, #4]!
 800670e:	459c      	cmp	ip, r3
 8006710:	d8f9      	bhi.n	8006706 <__lshift+0x9a>
 8006712:	e7e4      	b.n	80066de <__lshift+0x72>

08006714 <__mcmp>:
 8006714:	6903      	ldr	r3, [r0, #16]
 8006716:	690a      	ldr	r2, [r1, #16]
 8006718:	1a9b      	subs	r3, r3, r2
 800671a:	b530      	push	{r4, r5, lr}
 800671c:	d10c      	bne.n	8006738 <__mcmp+0x24>
 800671e:	0092      	lsls	r2, r2, #2
 8006720:	3014      	adds	r0, #20
 8006722:	3114      	adds	r1, #20
 8006724:	1884      	adds	r4, r0, r2
 8006726:	4411      	add	r1, r2
 8006728:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800672c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006730:	4295      	cmp	r5, r2
 8006732:	d003      	beq.n	800673c <__mcmp+0x28>
 8006734:	d305      	bcc.n	8006742 <__mcmp+0x2e>
 8006736:	2301      	movs	r3, #1
 8006738:	4618      	mov	r0, r3
 800673a:	bd30      	pop	{r4, r5, pc}
 800673c:	42a0      	cmp	r0, r4
 800673e:	d3f3      	bcc.n	8006728 <__mcmp+0x14>
 8006740:	e7fa      	b.n	8006738 <__mcmp+0x24>
 8006742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006746:	e7f7      	b.n	8006738 <__mcmp+0x24>

08006748 <__mdiff>:
 8006748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	460d      	mov	r5, r1
 800674e:	4607      	mov	r7, r0
 8006750:	4611      	mov	r1, r2
 8006752:	4628      	mov	r0, r5
 8006754:	4614      	mov	r4, r2
 8006756:	f7ff ffdd 	bl	8006714 <__mcmp>
 800675a:	1e06      	subs	r6, r0, #0
 800675c:	d108      	bne.n	8006770 <__mdiff+0x28>
 800675e:	4631      	mov	r1, r6
 8006760:	4638      	mov	r0, r7
 8006762:	f7ff fdc2 	bl	80062ea <_Balloc>
 8006766:	2301      	movs	r3, #1
 8006768:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006770:	bfa4      	itt	ge
 8006772:	4623      	movge	r3, r4
 8006774:	462c      	movge	r4, r5
 8006776:	4638      	mov	r0, r7
 8006778:	6861      	ldr	r1, [r4, #4]
 800677a:	bfa6      	itte	ge
 800677c:	461d      	movge	r5, r3
 800677e:	2600      	movge	r6, #0
 8006780:	2601      	movlt	r6, #1
 8006782:	f7ff fdb2 	bl	80062ea <_Balloc>
 8006786:	692b      	ldr	r3, [r5, #16]
 8006788:	60c6      	str	r6, [r0, #12]
 800678a:	6926      	ldr	r6, [r4, #16]
 800678c:	f105 0914 	add.w	r9, r5, #20
 8006790:	f104 0214 	add.w	r2, r4, #20
 8006794:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006798:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800679c:	f100 0514 	add.w	r5, r0, #20
 80067a0:	f04f 0e00 	mov.w	lr, #0
 80067a4:	f852 ab04 	ldr.w	sl, [r2], #4
 80067a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80067ac:	fa1e f18a 	uxtah	r1, lr, sl
 80067b0:	b2a3      	uxth	r3, r4
 80067b2:	1ac9      	subs	r1, r1, r3
 80067b4:	0c23      	lsrs	r3, r4, #16
 80067b6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80067ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80067be:	b289      	uxth	r1, r1
 80067c0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80067c4:	45c8      	cmp	r8, r9
 80067c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80067ca:	4694      	mov	ip, r2
 80067cc:	f845 3b04 	str.w	r3, [r5], #4
 80067d0:	d8e8      	bhi.n	80067a4 <__mdiff+0x5c>
 80067d2:	45bc      	cmp	ip, r7
 80067d4:	d304      	bcc.n	80067e0 <__mdiff+0x98>
 80067d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80067da:	b183      	cbz	r3, 80067fe <__mdiff+0xb6>
 80067dc:	6106      	str	r6, [r0, #16]
 80067de:	e7c5      	b.n	800676c <__mdiff+0x24>
 80067e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80067e4:	fa1e f381 	uxtah	r3, lr, r1
 80067e8:	141a      	asrs	r2, r3, #16
 80067ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80067f8:	f845 3b04 	str.w	r3, [r5], #4
 80067fc:	e7e9      	b.n	80067d2 <__mdiff+0x8a>
 80067fe:	3e01      	subs	r6, #1
 8006800:	e7e9      	b.n	80067d6 <__mdiff+0x8e>

08006802 <__d2b>:
 8006802:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006806:	460e      	mov	r6, r1
 8006808:	2101      	movs	r1, #1
 800680a:	ec59 8b10 	vmov	r8, r9, d0
 800680e:	4615      	mov	r5, r2
 8006810:	f7ff fd6b 	bl	80062ea <_Balloc>
 8006814:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006818:	4607      	mov	r7, r0
 800681a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800681e:	bb34      	cbnz	r4, 800686e <__d2b+0x6c>
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	f1b8 0300 	subs.w	r3, r8, #0
 8006826:	d027      	beq.n	8006878 <__d2b+0x76>
 8006828:	a802      	add	r0, sp, #8
 800682a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800682e:	f7ff fe01 	bl	8006434 <__lo0bits>
 8006832:	9900      	ldr	r1, [sp, #0]
 8006834:	b1f0      	cbz	r0, 8006874 <__d2b+0x72>
 8006836:	9a01      	ldr	r2, [sp, #4]
 8006838:	f1c0 0320 	rsb	r3, r0, #32
 800683c:	fa02 f303 	lsl.w	r3, r2, r3
 8006840:	430b      	orrs	r3, r1
 8006842:	40c2      	lsrs	r2, r0
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	9201      	str	r2, [sp, #4]
 8006848:	9b01      	ldr	r3, [sp, #4]
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	bf14      	ite	ne
 8006850:	2102      	movne	r1, #2
 8006852:	2101      	moveq	r1, #1
 8006854:	6139      	str	r1, [r7, #16]
 8006856:	b1c4      	cbz	r4, 800688a <__d2b+0x88>
 8006858:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800685c:	4404      	add	r4, r0
 800685e:	6034      	str	r4, [r6, #0]
 8006860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006864:	6028      	str	r0, [r5, #0]
 8006866:	4638      	mov	r0, r7
 8006868:	b003      	add	sp, #12
 800686a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800686e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006872:	e7d5      	b.n	8006820 <__d2b+0x1e>
 8006874:	6179      	str	r1, [r7, #20]
 8006876:	e7e7      	b.n	8006848 <__d2b+0x46>
 8006878:	a801      	add	r0, sp, #4
 800687a:	f7ff fddb 	bl	8006434 <__lo0bits>
 800687e:	9b01      	ldr	r3, [sp, #4]
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	2101      	movs	r1, #1
 8006884:	6139      	str	r1, [r7, #16]
 8006886:	3020      	adds	r0, #32
 8006888:	e7e5      	b.n	8006856 <__d2b+0x54>
 800688a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800688e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006892:	6030      	str	r0, [r6, #0]
 8006894:	6918      	ldr	r0, [r3, #16]
 8006896:	f7ff fdae 	bl	80063f6 <__hi0bits>
 800689a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800689e:	e7e1      	b.n	8006864 <__d2b+0x62>

080068a0 <_calloc_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	fb02 f401 	mul.w	r4, r2, r1
 80068a6:	4621      	mov	r1, r4
 80068a8:	f000 f856 	bl	8006958 <_malloc_r>
 80068ac:	4605      	mov	r5, r0
 80068ae:	b118      	cbz	r0, 80068b8 <_calloc_r+0x18>
 80068b0:	4622      	mov	r2, r4
 80068b2:	2100      	movs	r1, #0
 80068b4:	f7fe f9e0 	bl	8004c78 <memset>
 80068b8:	4628      	mov	r0, r5
 80068ba:	bd38      	pop	{r3, r4, r5, pc}

080068bc <_free_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4605      	mov	r5, r0
 80068c0:	2900      	cmp	r1, #0
 80068c2:	d045      	beq.n	8006950 <_free_r+0x94>
 80068c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c8:	1f0c      	subs	r4, r1, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bfb8      	it	lt
 80068ce:	18e4      	addlt	r4, r4, r3
 80068d0:	f000 fa29 	bl	8006d26 <__malloc_lock>
 80068d4:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <_free_r+0x98>)
 80068d6:	6813      	ldr	r3, [r2, #0]
 80068d8:	4610      	mov	r0, r2
 80068da:	b933      	cbnz	r3, 80068ea <_free_r+0x2e>
 80068dc:	6063      	str	r3, [r4, #4]
 80068de:	6014      	str	r4, [r2, #0]
 80068e0:	4628      	mov	r0, r5
 80068e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068e6:	f000 ba1f 	b.w	8006d28 <__malloc_unlock>
 80068ea:	42a3      	cmp	r3, r4
 80068ec:	d90c      	bls.n	8006908 <_free_r+0x4c>
 80068ee:	6821      	ldr	r1, [r4, #0]
 80068f0:	1862      	adds	r2, r4, r1
 80068f2:	4293      	cmp	r3, r2
 80068f4:	bf04      	itt	eq
 80068f6:	681a      	ldreq	r2, [r3, #0]
 80068f8:	685b      	ldreq	r3, [r3, #4]
 80068fa:	6063      	str	r3, [r4, #4]
 80068fc:	bf04      	itt	eq
 80068fe:	1852      	addeq	r2, r2, r1
 8006900:	6022      	streq	r2, [r4, #0]
 8006902:	6004      	str	r4, [r0, #0]
 8006904:	e7ec      	b.n	80068e0 <_free_r+0x24>
 8006906:	4613      	mov	r3, r2
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	b10a      	cbz	r2, 8006910 <_free_r+0x54>
 800690c:	42a2      	cmp	r2, r4
 800690e:	d9fa      	bls.n	8006906 <_free_r+0x4a>
 8006910:	6819      	ldr	r1, [r3, #0]
 8006912:	1858      	adds	r0, r3, r1
 8006914:	42a0      	cmp	r0, r4
 8006916:	d10b      	bne.n	8006930 <_free_r+0x74>
 8006918:	6820      	ldr	r0, [r4, #0]
 800691a:	4401      	add	r1, r0
 800691c:	1858      	adds	r0, r3, r1
 800691e:	4282      	cmp	r2, r0
 8006920:	6019      	str	r1, [r3, #0]
 8006922:	d1dd      	bne.n	80068e0 <_free_r+0x24>
 8006924:	6810      	ldr	r0, [r2, #0]
 8006926:	6852      	ldr	r2, [r2, #4]
 8006928:	605a      	str	r2, [r3, #4]
 800692a:	4401      	add	r1, r0
 800692c:	6019      	str	r1, [r3, #0]
 800692e:	e7d7      	b.n	80068e0 <_free_r+0x24>
 8006930:	d902      	bls.n	8006938 <_free_r+0x7c>
 8006932:	230c      	movs	r3, #12
 8006934:	602b      	str	r3, [r5, #0]
 8006936:	e7d3      	b.n	80068e0 <_free_r+0x24>
 8006938:	6820      	ldr	r0, [r4, #0]
 800693a:	1821      	adds	r1, r4, r0
 800693c:	428a      	cmp	r2, r1
 800693e:	bf04      	itt	eq
 8006940:	6811      	ldreq	r1, [r2, #0]
 8006942:	6852      	ldreq	r2, [r2, #4]
 8006944:	6062      	str	r2, [r4, #4]
 8006946:	bf04      	itt	eq
 8006948:	1809      	addeq	r1, r1, r0
 800694a:	6021      	streq	r1, [r4, #0]
 800694c:	605c      	str	r4, [r3, #4]
 800694e:	e7c7      	b.n	80068e0 <_free_r+0x24>
 8006950:	bd38      	pop	{r3, r4, r5, pc}
 8006952:	bf00      	nop
 8006954:	200003f8 	.word	0x200003f8

08006958 <_malloc_r>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	1ccd      	adds	r5, r1, #3
 800695c:	f025 0503 	bic.w	r5, r5, #3
 8006960:	3508      	adds	r5, #8
 8006962:	2d0c      	cmp	r5, #12
 8006964:	bf38      	it	cc
 8006966:	250c      	movcc	r5, #12
 8006968:	2d00      	cmp	r5, #0
 800696a:	4606      	mov	r6, r0
 800696c:	db01      	blt.n	8006972 <_malloc_r+0x1a>
 800696e:	42a9      	cmp	r1, r5
 8006970:	d903      	bls.n	800697a <_malloc_r+0x22>
 8006972:	230c      	movs	r3, #12
 8006974:	6033      	str	r3, [r6, #0]
 8006976:	2000      	movs	r0, #0
 8006978:	bd70      	pop	{r4, r5, r6, pc}
 800697a:	f000 f9d4 	bl	8006d26 <__malloc_lock>
 800697e:	4a21      	ldr	r2, [pc, #132]	; (8006a04 <_malloc_r+0xac>)
 8006980:	6814      	ldr	r4, [r2, #0]
 8006982:	4621      	mov	r1, r4
 8006984:	b991      	cbnz	r1, 80069ac <_malloc_r+0x54>
 8006986:	4c20      	ldr	r4, [pc, #128]	; (8006a08 <_malloc_r+0xb0>)
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	b91b      	cbnz	r3, 8006994 <_malloc_r+0x3c>
 800698c:	4630      	mov	r0, r6
 800698e:	f000 f98f 	bl	8006cb0 <_sbrk_r>
 8006992:	6020      	str	r0, [r4, #0]
 8006994:	4629      	mov	r1, r5
 8006996:	4630      	mov	r0, r6
 8006998:	f000 f98a 	bl	8006cb0 <_sbrk_r>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	d124      	bne.n	80069ea <_malloc_r+0x92>
 80069a0:	230c      	movs	r3, #12
 80069a2:	6033      	str	r3, [r6, #0]
 80069a4:	4630      	mov	r0, r6
 80069a6:	f000 f9bf 	bl	8006d28 <__malloc_unlock>
 80069aa:	e7e4      	b.n	8006976 <_malloc_r+0x1e>
 80069ac:	680b      	ldr	r3, [r1, #0]
 80069ae:	1b5b      	subs	r3, r3, r5
 80069b0:	d418      	bmi.n	80069e4 <_malloc_r+0x8c>
 80069b2:	2b0b      	cmp	r3, #11
 80069b4:	d90f      	bls.n	80069d6 <_malloc_r+0x7e>
 80069b6:	600b      	str	r3, [r1, #0]
 80069b8:	50cd      	str	r5, [r1, r3]
 80069ba:	18cc      	adds	r4, r1, r3
 80069bc:	4630      	mov	r0, r6
 80069be:	f000 f9b3 	bl	8006d28 <__malloc_unlock>
 80069c2:	f104 000b 	add.w	r0, r4, #11
 80069c6:	1d23      	adds	r3, r4, #4
 80069c8:	f020 0007 	bic.w	r0, r0, #7
 80069cc:	1ac3      	subs	r3, r0, r3
 80069ce:	d0d3      	beq.n	8006978 <_malloc_r+0x20>
 80069d0:	425a      	negs	r2, r3
 80069d2:	50e2      	str	r2, [r4, r3]
 80069d4:	e7d0      	b.n	8006978 <_malloc_r+0x20>
 80069d6:	428c      	cmp	r4, r1
 80069d8:	684b      	ldr	r3, [r1, #4]
 80069da:	bf16      	itet	ne
 80069dc:	6063      	strne	r3, [r4, #4]
 80069de:	6013      	streq	r3, [r2, #0]
 80069e0:	460c      	movne	r4, r1
 80069e2:	e7eb      	b.n	80069bc <_malloc_r+0x64>
 80069e4:	460c      	mov	r4, r1
 80069e6:	6849      	ldr	r1, [r1, #4]
 80069e8:	e7cc      	b.n	8006984 <_malloc_r+0x2c>
 80069ea:	1cc4      	adds	r4, r0, #3
 80069ec:	f024 0403 	bic.w	r4, r4, #3
 80069f0:	42a0      	cmp	r0, r4
 80069f2:	d005      	beq.n	8006a00 <_malloc_r+0xa8>
 80069f4:	1a21      	subs	r1, r4, r0
 80069f6:	4630      	mov	r0, r6
 80069f8:	f000 f95a 	bl	8006cb0 <_sbrk_r>
 80069fc:	3001      	adds	r0, #1
 80069fe:	d0cf      	beq.n	80069a0 <_malloc_r+0x48>
 8006a00:	6025      	str	r5, [r4, #0]
 8006a02:	e7db      	b.n	80069bc <_malloc_r+0x64>
 8006a04:	200003f8 	.word	0x200003f8
 8006a08:	200003fc 	.word	0x200003fc

08006a0c <__ssputs_r>:
 8006a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a10:	688e      	ldr	r6, [r1, #8]
 8006a12:	429e      	cmp	r6, r3
 8006a14:	4682      	mov	sl, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	4690      	mov	r8, r2
 8006a1a:	4699      	mov	r9, r3
 8006a1c:	d837      	bhi.n	8006a8e <__ssputs_r+0x82>
 8006a1e:	898a      	ldrh	r2, [r1, #12]
 8006a20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a24:	d031      	beq.n	8006a8a <__ssputs_r+0x7e>
 8006a26:	6825      	ldr	r5, [r4, #0]
 8006a28:	6909      	ldr	r1, [r1, #16]
 8006a2a:	1a6f      	subs	r7, r5, r1
 8006a2c:	6965      	ldr	r5, [r4, #20]
 8006a2e:	2302      	movs	r3, #2
 8006a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a34:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a38:	f109 0301 	add.w	r3, r9, #1
 8006a3c:	443b      	add	r3, r7
 8006a3e:	429d      	cmp	r5, r3
 8006a40:	bf38      	it	cc
 8006a42:	461d      	movcc	r5, r3
 8006a44:	0553      	lsls	r3, r2, #21
 8006a46:	d530      	bpl.n	8006aaa <__ssputs_r+0x9e>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	f7ff ff85 	bl	8006958 <_malloc_r>
 8006a4e:	4606      	mov	r6, r0
 8006a50:	b950      	cbnz	r0, 8006a68 <__ssputs_r+0x5c>
 8006a52:	230c      	movs	r3, #12
 8006a54:	f8ca 3000 	str.w	r3, [sl]
 8006a58:	89a3      	ldrh	r3, [r4, #12]
 8006a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a68:	463a      	mov	r2, r7
 8006a6a:	6921      	ldr	r1, [r4, #16]
 8006a6c:	f7ff fc32 	bl	80062d4 <memcpy>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	6126      	str	r6, [r4, #16]
 8006a7e:	6165      	str	r5, [r4, #20]
 8006a80:	443e      	add	r6, r7
 8006a82:	1bed      	subs	r5, r5, r7
 8006a84:	6026      	str	r6, [r4, #0]
 8006a86:	60a5      	str	r5, [r4, #8]
 8006a88:	464e      	mov	r6, r9
 8006a8a:	454e      	cmp	r6, r9
 8006a8c:	d900      	bls.n	8006a90 <__ssputs_r+0x84>
 8006a8e:	464e      	mov	r6, r9
 8006a90:	4632      	mov	r2, r6
 8006a92:	4641      	mov	r1, r8
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	f000 f92d 	bl	8006cf4 <memmove>
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	1b9b      	subs	r3, r3, r6
 8006a9e:	60a3      	str	r3, [r4, #8]
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	441e      	add	r6, r3
 8006aa4:	6026      	str	r6, [r4, #0]
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	e7dc      	b.n	8006a64 <__ssputs_r+0x58>
 8006aaa:	462a      	mov	r2, r5
 8006aac:	f000 f93d 	bl	8006d2a <_realloc_r>
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d1e2      	bne.n	8006a7c <__ssputs_r+0x70>
 8006ab6:	6921      	ldr	r1, [r4, #16]
 8006ab8:	4650      	mov	r0, sl
 8006aba:	f7ff feff 	bl	80068bc <_free_r>
 8006abe:	e7c8      	b.n	8006a52 <__ssputs_r+0x46>

08006ac0 <_svfiprintf_r>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	898b      	ldrh	r3, [r1, #12]
 8006ac8:	061f      	lsls	r7, r3, #24
 8006aca:	b09d      	sub	sp, #116	; 0x74
 8006acc:	4680      	mov	r8, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	d50f      	bpl.n	8006af4 <_svfiprintf_r+0x34>
 8006ad4:	690b      	ldr	r3, [r1, #16]
 8006ad6:	b96b      	cbnz	r3, 8006af4 <_svfiprintf_r+0x34>
 8006ad8:	2140      	movs	r1, #64	; 0x40
 8006ada:	f7ff ff3d 	bl	8006958 <_malloc_r>
 8006ade:	6020      	str	r0, [r4, #0]
 8006ae0:	6120      	str	r0, [r4, #16]
 8006ae2:	b928      	cbnz	r0, 8006af0 <_svfiprintf_r+0x30>
 8006ae4:	230c      	movs	r3, #12
 8006ae6:	f8c8 3000 	str.w	r3, [r8]
 8006aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aee:	e0c8      	b.n	8006c82 <_svfiprintf_r+0x1c2>
 8006af0:	2340      	movs	r3, #64	; 0x40
 8006af2:	6163      	str	r3, [r4, #20]
 8006af4:	2300      	movs	r3, #0
 8006af6:	9309      	str	r3, [sp, #36]	; 0x24
 8006af8:	2320      	movs	r3, #32
 8006afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006afe:	2330      	movs	r3, #48	; 0x30
 8006b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b04:	9503      	str	r5, [sp, #12]
 8006b06:	f04f 0b01 	mov.w	fp, #1
 8006b0a:	4637      	mov	r7, r6
 8006b0c:	463d      	mov	r5, r7
 8006b0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b12:	b10b      	cbz	r3, 8006b18 <_svfiprintf_r+0x58>
 8006b14:	2b25      	cmp	r3, #37	; 0x25
 8006b16:	d13e      	bne.n	8006b96 <_svfiprintf_r+0xd6>
 8006b18:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b1c:	d00b      	beq.n	8006b36 <_svfiprintf_r+0x76>
 8006b1e:	4653      	mov	r3, sl
 8006b20:	4632      	mov	r2, r6
 8006b22:	4621      	mov	r1, r4
 8006b24:	4640      	mov	r0, r8
 8006b26:	f7ff ff71 	bl	8006a0c <__ssputs_r>
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	f000 80a4 	beq.w	8006c78 <_svfiprintf_r+0x1b8>
 8006b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b32:	4453      	add	r3, sl
 8006b34:	9309      	str	r3, [sp, #36]	; 0x24
 8006b36:	783b      	ldrb	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 809d 	beq.w	8006c78 <_svfiprintf_r+0x1b8>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	9307      	str	r3, [sp, #28]
 8006b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b50:	931a      	str	r3, [sp, #104]	; 0x68
 8006b52:	462f      	mov	r7, r5
 8006b54:	2205      	movs	r2, #5
 8006b56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006b5a:	4850      	ldr	r0, [pc, #320]	; (8006c9c <_svfiprintf_r+0x1dc>)
 8006b5c:	f7f9 fb48 	bl	80001f0 <memchr>
 8006b60:	9b04      	ldr	r3, [sp, #16]
 8006b62:	b9d0      	cbnz	r0, 8006b9a <_svfiprintf_r+0xda>
 8006b64:	06d9      	lsls	r1, r3, #27
 8006b66:	bf44      	itt	mi
 8006b68:	2220      	movmi	r2, #32
 8006b6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b6e:	071a      	lsls	r2, r3, #28
 8006b70:	bf44      	itt	mi
 8006b72:	222b      	movmi	r2, #43	; 0x2b
 8006b74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b78:	782a      	ldrb	r2, [r5, #0]
 8006b7a:	2a2a      	cmp	r2, #42	; 0x2a
 8006b7c:	d015      	beq.n	8006baa <_svfiprintf_r+0xea>
 8006b7e:	9a07      	ldr	r2, [sp, #28]
 8006b80:	462f      	mov	r7, r5
 8006b82:	2000      	movs	r0, #0
 8006b84:	250a      	movs	r5, #10
 8006b86:	4639      	mov	r1, r7
 8006b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b8c:	3b30      	subs	r3, #48	; 0x30
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	d94d      	bls.n	8006c2e <_svfiprintf_r+0x16e>
 8006b92:	b1b8      	cbz	r0, 8006bc4 <_svfiprintf_r+0x104>
 8006b94:	e00f      	b.n	8006bb6 <_svfiprintf_r+0xf6>
 8006b96:	462f      	mov	r7, r5
 8006b98:	e7b8      	b.n	8006b0c <_svfiprintf_r+0x4c>
 8006b9a:	4a40      	ldr	r2, [pc, #256]	; (8006c9c <_svfiprintf_r+0x1dc>)
 8006b9c:	1a80      	subs	r0, r0, r2
 8006b9e:	fa0b f000 	lsl.w	r0, fp, r0
 8006ba2:	4318      	orrs	r0, r3
 8006ba4:	9004      	str	r0, [sp, #16]
 8006ba6:	463d      	mov	r5, r7
 8006ba8:	e7d3      	b.n	8006b52 <_svfiprintf_r+0x92>
 8006baa:	9a03      	ldr	r2, [sp, #12]
 8006bac:	1d11      	adds	r1, r2, #4
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	9103      	str	r1, [sp, #12]
 8006bb2:	2a00      	cmp	r2, #0
 8006bb4:	db01      	blt.n	8006bba <_svfiprintf_r+0xfa>
 8006bb6:	9207      	str	r2, [sp, #28]
 8006bb8:	e004      	b.n	8006bc4 <_svfiprintf_r+0x104>
 8006bba:	4252      	negs	r2, r2
 8006bbc:	f043 0302 	orr.w	r3, r3, #2
 8006bc0:	9207      	str	r2, [sp, #28]
 8006bc2:	9304      	str	r3, [sp, #16]
 8006bc4:	783b      	ldrb	r3, [r7, #0]
 8006bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bc8:	d10c      	bne.n	8006be4 <_svfiprintf_r+0x124>
 8006bca:	787b      	ldrb	r3, [r7, #1]
 8006bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bce:	d133      	bne.n	8006c38 <_svfiprintf_r+0x178>
 8006bd0:	9b03      	ldr	r3, [sp, #12]
 8006bd2:	1d1a      	adds	r2, r3, #4
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	9203      	str	r2, [sp, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bfb8      	it	lt
 8006bdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006be0:	3702      	adds	r7, #2
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	4d2e      	ldr	r5, [pc, #184]	; (8006ca0 <_svfiprintf_r+0x1e0>)
 8006be6:	7839      	ldrb	r1, [r7, #0]
 8006be8:	2203      	movs	r2, #3
 8006bea:	4628      	mov	r0, r5
 8006bec:	f7f9 fb00 	bl	80001f0 <memchr>
 8006bf0:	b138      	cbz	r0, 8006c02 <_svfiprintf_r+0x142>
 8006bf2:	2340      	movs	r3, #64	; 0x40
 8006bf4:	1b40      	subs	r0, r0, r5
 8006bf6:	fa03 f000 	lsl.w	r0, r3, r0
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	4303      	orrs	r3, r0
 8006bfe:	3701      	adds	r7, #1
 8006c00:	9304      	str	r3, [sp, #16]
 8006c02:	7839      	ldrb	r1, [r7, #0]
 8006c04:	4827      	ldr	r0, [pc, #156]	; (8006ca4 <_svfiprintf_r+0x1e4>)
 8006c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c0a:	2206      	movs	r2, #6
 8006c0c:	1c7e      	adds	r6, r7, #1
 8006c0e:	f7f9 faef 	bl	80001f0 <memchr>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d038      	beq.n	8006c88 <_svfiprintf_r+0x1c8>
 8006c16:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <_svfiprintf_r+0x1e8>)
 8006c18:	bb13      	cbnz	r3, 8006c60 <_svfiprintf_r+0x1a0>
 8006c1a:	9b03      	ldr	r3, [sp, #12]
 8006c1c:	3307      	adds	r3, #7
 8006c1e:	f023 0307 	bic.w	r3, r3, #7
 8006c22:	3308      	adds	r3, #8
 8006c24:	9303      	str	r3, [sp, #12]
 8006c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c28:	444b      	add	r3, r9
 8006c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2c:	e76d      	b.n	8006b0a <_svfiprintf_r+0x4a>
 8006c2e:	fb05 3202 	mla	r2, r5, r2, r3
 8006c32:	2001      	movs	r0, #1
 8006c34:	460f      	mov	r7, r1
 8006c36:	e7a6      	b.n	8006b86 <_svfiprintf_r+0xc6>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	3701      	adds	r7, #1
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	250a      	movs	r5, #10
 8006c42:	4638      	mov	r0, r7
 8006c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c48:	3a30      	subs	r2, #48	; 0x30
 8006c4a:	2a09      	cmp	r2, #9
 8006c4c:	d903      	bls.n	8006c56 <_svfiprintf_r+0x196>
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0c8      	beq.n	8006be4 <_svfiprintf_r+0x124>
 8006c52:	9105      	str	r1, [sp, #20]
 8006c54:	e7c6      	b.n	8006be4 <_svfiprintf_r+0x124>
 8006c56:	fb05 2101 	mla	r1, r5, r1, r2
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	e7f0      	b.n	8006c42 <_svfiprintf_r+0x182>
 8006c60:	ab03      	add	r3, sp, #12
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	4622      	mov	r2, r4
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <_svfiprintf_r+0x1ec>)
 8006c68:	a904      	add	r1, sp, #16
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	f7fe f8a0 	bl	8004db0 <_printf_float>
 8006c70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006c74:	4681      	mov	r9, r0
 8006c76:	d1d6      	bne.n	8006c26 <_svfiprintf_r+0x166>
 8006c78:	89a3      	ldrh	r3, [r4, #12]
 8006c7a:	065b      	lsls	r3, r3, #25
 8006c7c:	f53f af35 	bmi.w	8006aea <_svfiprintf_r+0x2a>
 8006c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c82:	b01d      	add	sp, #116	; 0x74
 8006c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c88:	ab03      	add	r3, sp, #12
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	4b07      	ldr	r3, [pc, #28]	; (8006cac <_svfiprintf_r+0x1ec>)
 8006c90:	a904      	add	r1, sp, #16
 8006c92:	4640      	mov	r0, r8
 8006c94:	f7fe fb42 	bl	800531c <_printf_i>
 8006c98:	e7ea      	b.n	8006c70 <_svfiprintf_r+0x1b0>
 8006c9a:	bf00      	nop
 8006c9c:	08007294 	.word	0x08007294
 8006ca0:	0800729a 	.word	0x0800729a
 8006ca4:	0800729e 	.word	0x0800729e
 8006ca8:	08004db1 	.word	0x08004db1
 8006cac:	08006a0d 	.word	0x08006a0d

08006cb0 <_sbrk_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4c06      	ldr	r4, [pc, #24]	; (8006ccc <_sbrk_r+0x1c>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	f7fd fef6 	bl	8004aac <_sbrk>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_sbrk_r+0x1a>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_sbrk_r+0x1a>
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	20000620 	.word	0x20000620

08006cd0 <__ascii_mbtowc>:
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	b901      	cbnz	r1, 8006cd6 <__ascii_mbtowc+0x6>
 8006cd4:	a901      	add	r1, sp, #4
 8006cd6:	b142      	cbz	r2, 8006cea <__ascii_mbtowc+0x1a>
 8006cd8:	b14b      	cbz	r3, 8006cee <__ascii_mbtowc+0x1e>
 8006cda:	7813      	ldrb	r3, [r2, #0]
 8006cdc:	600b      	str	r3, [r1, #0]
 8006cde:	7812      	ldrb	r2, [r2, #0]
 8006ce0:	1c10      	adds	r0, r2, #0
 8006ce2:	bf18      	it	ne
 8006ce4:	2001      	movne	r0, #1
 8006ce6:	b002      	add	sp, #8
 8006ce8:	4770      	bx	lr
 8006cea:	4610      	mov	r0, r2
 8006cec:	e7fb      	b.n	8006ce6 <__ascii_mbtowc+0x16>
 8006cee:	f06f 0001 	mvn.w	r0, #1
 8006cf2:	e7f8      	b.n	8006ce6 <__ascii_mbtowc+0x16>

08006cf4 <memmove>:
 8006cf4:	4288      	cmp	r0, r1
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	eb01 0302 	add.w	r3, r1, r2
 8006cfc:	d807      	bhi.n	8006d0e <memmove+0x1a>
 8006cfe:	1e42      	subs	r2, r0, #1
 8006d00:	4299      	cmp	r1, r3
 8006d02:	d00a      	beq.n	8006d1a <memmove+0x26>
 8006d04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d0c:	e7f8      	b.n	8006d00 <memmove+0xc>
 8006d0e:	4283      	cmp	r3, r0
 8006d10:	d9f5      	bls.n	8006cfe <memmove+0xa>
 8006d12:	1881      	adds	r1, r0, r2
 8006d14:	1ad2      	subs	r2, r2, r3
 8006d16:	42d3      	cmn	r3, r2
 8006d18:	d100      	bne.n	8006d1c <memmove+0x28>
 8006d1a:	bd10      	pop	{r4, pc}
 8006d1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006d24:	e7f7      	b.n	8006d16 <memmove+0x22>

08006d26 <__malloc_lock>:
 8006d26:	4770      	bx	lr

08006d28 <__malloc_unlock>:
 8006d28:	4770      	bx	lr

08006d2a <_realloc_r>:
 8006d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	4614      	mov	r4, r2
 8006d30:	460e      	mov	r6, r1
 8006d32:	b921      	cbnz	r1, 8006d3e <_realloc_r+0x14>
 8006d34:	4611      	mov	r1, r2
 8006d36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d3a:	f7ff be0d 	b.w	8006958 <_malloc_r>
 8006d3e:	b922      	cbnz	r2, 8006d4a <_realloc_r+0x20>
 8006d40:	f7ff fdbc 	bl	80068bc <_free_r>
 8006d44:	4625      	mov	r5, r4
 8006d46:	4628      	mov	r0, r5
 8006d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d4a:	f000 f821 	bl	8006d90 <_malloc_usable_size_r>
 8006d4e:	42a0      	cmp	r0, r4
 8006d50:	d20f      	bcs.n	8006d72 <_realloc_r+0x48>
 8006d52:	4621      	mov	r1, r4
 8006d54:	4638      	mov	r0, r7
 8006d56:	f7ff fdff 	bl	8006958 <_malloc_r>
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d0f2      	beq.n	8006d46 <_realloc_r+0x1c>
 8006d60:	4631      	mov	r1, r6
 8006d62:	4622      	mov	r2, r4
 8006d64:	f7ff fab6 	bl	80062d4 <memcpy>
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	f7ff fda6 	bl	80068bc <_free_r>
 8006d70:	e7e9      	b.n	8006d46 <_realloc_r+0x1c>
 8006d72:	4635      	mov	r5, r6
 8006d74:	e7e7      	b.n	8006d46 <_realloc_r+0x1c>

08006d76 <__ascii_wctomb>:
 8006d76:	b149      	cbz	r1, 8006d8c <__ascii_wctomb+0x16>
 8006d78:	2aff      	cmp	r2, #255	; 0xff
 8006d7a:	bf85      	ittet	hi
 8006d7c:	238a      	movhi	r3, #138	; 0x8a
 8006d7e:	6003      	strhi	r3, [r0, #0]
 8006d80:	700a      	strbls	r2, [r1, #0]
 8006d82:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006d86:	bf98      	it	ls
 8006d88:	2001      	movls	r0, #1
 8006d8a:	4770      	bx	lr
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	4770      	bx	lr

08006d90 <_malloc_usable_size_r>:
 8006d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d94:	1f18      	subs	r0, r3, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bfbc      	itt	lt
 8006d9a:	580b      	ldrlt	r3, [r1, r0]
 8006d9c:	18c0      	addlt	r0, r0, r3
 8006d9e:	4770      	bx	lr

08006da0 <_init>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	bf00      	nop
 8006da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da6:	bc08      	pop	{r3}
 8006da8:	469e      	mov	lr, r3
 8006daa:	4770      	bx	lr

08006dac <_fini>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr
